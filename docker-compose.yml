version: "3.9"
services:
  ###############################################################################
  # Traefik proxy
  ###############################################################################
  proxy:
    image: traefik:2.8
    container_name: bocraportal-proxy
    hostname: traefik
    networks:
      bocra-network:
        ipv4_address: ${BOCRA_PROXY_ADDRESS}
      traefik-public:
      default:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${BOCRA_DATA}/auth/system_passwd:/var/system_passwd
      # - ${BOCRA_DATA}/certs:/etc/certs
      # - ${BOCRA_DATA}/traefik/config.yml:/etc/traefik/dynamic_conf/conf.yml:ro
    ports:
      - 80:80
      - 443:443
      # - 8080:8080
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:8082/ping","--spider" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic_conf/"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entryPoints.ping.address=:8082"
      - "--log.level=DEBUG"
      - "--accessLog"
      - "--accesslog=true"
      - "--api"
      - "--api.dashboard"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--metrics"
      - "--metrics.prometheus"
      - "--providers.docker.network=traefik-public"
      - "--entrypoints.web.http.redirections.entrypoint.to=${ACTIVE_ROUTER_ENTRY}"
      # - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # - "--certificatesresolvers.le.acme.email=${ACME_EMAIL?Variable not set}"
      # - "--certificatesresolvers.le.acme.storage=${BOCRA_DATA}/traefik/acme.json"
      # - "--certificatesresolvers.le.acme.tlschallenge=true"
    
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      # - traefik.docker.network=traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other intern      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=truel Traefik instances per stack if needed
      # - traefik.constraint-label=traefik-public
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      # - traefik.http.middlewares.admin-auth.basicauth.usersfile=/var/system_passwd
      # - traefik.http.routers.traefik-public-https.middlewares=admin-auth
      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable DOMAIN
      - traefik.http.routers.traefik-public-http.rule=Host(`${PROXY_DOMAIN}`)
      - traefik.http.routers.traefik-public-http.entrypoints=web
      # - traefik.http.routers.traefik-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable DOMAIN
      # - traefik.http.routers.traefik-public-https.rule=Host(`${PROXY_DOMAIN}`)
      # - traefik.http.routers.traefik-public-https.entrypoints=websecure
      # - traefik.http.routers.traefik-public-https.tls=${SSL_SECURE}
      # Use the special Traefik service api@internal with the web UI/Dashboard
      # - traefik.http.routers.traefik-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      # - traefik.http.routers.traefik-public-https.tls.certresolver=le
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=8080

  ###############################################################################
  # Postgres database
  ###############################################################################
  db:
    container_name: bocraportal-db
    hostname: db
    image: postgres:14
    volumes:
      - ${BOCRA_DATA}/db:/var/lib/postgresql/data
      - ./initdb.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      traefik-public:
      bocra-network:
        ipv4_address: ${BOCRA_DB_ADDRESS}
      default:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-db.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.bocra-db.rule=Host(`${DB_DOMAIN}`)"
      # - "traefik.http.routers.bocra-db.tls=${SSL_SECURE}"
      # - "traefik.http.routers.bocra-db.tls.certresolver=le"

  ###############################################################################
  # Postgres administration frontend
  ###############################################################################
  pgadmin:
    image: dpage/pgadmin4:6.12
    container_name: bocraportal-pgadmin
    networks:
      traefik-public:
      bocra-network:
        ipv4_address: ${BOCRA_PGADMIN_ADDRESS}
      default:
    depends_on:
      proxy:
        condition: service_healthy
      db:
        condition: service_healthy
    # ports:
    #   - 9000:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      SCRIPT_NAME: /pgadmin
      TZ: Africa/Gaborone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-pgadmin.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.bocra-pgadmin.rule=Host(`${DB_DOMAIN}`) && PathPrefix(`/pgadmin`)"
      # - "traefik.http.routers.bocra-pgadmin.tls=${SSL_SECURE}"
      # - "traefik.http.routers.bocra-pgadmin.tls.certresolver=le"

  ###############################################################################
  # Keycloak authentication server
  ###############################################################################
  keycloak:
    image: ${KEYCLOAK_REGISTRY_IMAGE}
    hostname: keycloak
    container_name: bocraportal-keycloak
    command:
      - "start"
      - "--optimized"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    environment:  
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB}
      KC_DB_URL_HOST: ${POSTGRES_SERVER}
      KC_HOSTNAME: ${KEYCLOAK_DOMAIN}
      KC_METRICS_ENABLED: true
      KC_PROXY: edge
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      PROXY_ADDRESS_FORWARDING: false
      TZ: Africa/Gaborone
    depends_on:
      db:
        condition: service_healthy
    networks:
      traefik-public:
      bocra-network:
        ipv4_address: ${BOCRA_KEYCLOAK_ADDRESS}
      default:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN}`)"
      # - "traefik.http.routers.keycloak.tls=${SSL_SECURE}"
      # - "traefik.http.routers.keycloak.tls.certresolver=le"

  ###############################################################################
  # The main API 
  ###############################################################################
  api:
    image: "ojmakhura/${API_IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_VERSION_SUFFIX}"
    container_name: bocraportal-api
    hostname: api

    healthcheck:
      test: "curl -m 5 --silent --fail --request GET http://localhost:8085/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 25s
      retries: 3
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    build:
      context: .
      dockerfile: bocraportal/webservice/Dockerfile
      args:
        CERT: ${CERT}
        CERT_PASSWORD: ${CERT_PASSWORD}
    networks:
      traefik-public:
      bocra-network:
        ipv4_address: ${BOCRA_API_ADDRESS}
      default:
    environment:
      POSTGRES_SERVER: ${BOCRA_DB_ADDRESS}
      SERVER_PORT: ${API_SERVER_PORT}
      POSTGRES_SERVER_PORT: ${POSTGRES_SERVER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KEYCLOAK_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_API_CLIENT: ${KEYCLOAK_API_CLIENT}
      KEYCLOAK_API_CLIENT_SECRET: ${KEYCLOAK_API_CLIENT_SECRET}
      BOCRA_KEYCLOAK_ADDRESS: ${BOCRA_KEYCLOAK_ADDRESS}
      CERT: ${CERT}
      CERT_PASSWORD: ${CERT_PASSWORD}
      TZ: Africa/Gaborone
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN}`)"
      # - "traefik.http.routers.api.tls=${SSL_SECURE}"
      # - "traefik.http.routers.api.tls.certresolver=le"

  ###############################################################################
  # Angular web application
  ###############################################################################
  web:
    image: "ojmakhura/${WEB_IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_VERSION_SUFFIX}"
    hostname: web

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 20s
    build:
      context: .
      dockerfile: bocraportal/angular/Dockerfile
    container_name: bocraportal-web
    volumes:
      - ${BOCRA_DATA}/web:/web
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      traefik-public:
      bocra-network:
        ipv4_address: ${BOCRA_WEB_ADDRESS}
      default:
    environment:
      TZ: Africa/Gaborone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.bocra-web.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      # - "traefik.http.routers.bocra-web.tls=${SSL_SECURE}"
      # - "traefik.http.routers.bocra-web.tls.certresolver=le"

  ###############################################################################
  # Local docker container registry
  ###############################################################################
  registry: 
    image: registry:2
    ports:
      - "5000:5000"
    volumes:
      - ${BOCRA_DATA}/registry/data:/var/lib/registry
      - ${BOCRA_DATA}/registry/certs:${BOCRA_DATA}/registry/certs
      - ${BOCRA_DATA}/registry/auth:${BOCRA_DATA}/registry/auth
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: ${BOCRA_DATA}/registry/auth/registry_passwd
      REGISTRY_AUTH_HTPASSWD_REALM: registry-realm
    networks:
      traefik-public:
      default:
    depends_on:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.registry.rule=Host(`${REGISTRY_DOMAIN}`)"
      # - "traefik.http.routers.registry.tls=${SSL_SECURE}"
      # - "traefik.http.routers.registry.tls.certresolver=le"
  
  ###############################################################################
  # Jenkins for CI/CD
  ###############################################################################
  jenkins:
    container_name: bocra-jenkins
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8083:8080
      - 50003:50000
    depends_on:
      - proxy
    env_file:
      - .env
    volumes:
      - ${BOCRA_DATA}/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      bocra-network:
        ipv4_address: ${BOCRA_JENKINS_ADDRESS}
      traefik-public:
      default:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-jenkins.rule=Host(`${JENKINS_DOMAIN}`)"
      # - "traefik.http.routers.registry.tls=${SSL_SECURE}"
      # - "traefik.http.routers.registry.tls.certresolver=le"

###############################################################################
# Networks
###############################################################################
networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
  bocra-network:
    name: bocra-network
    driver: bridge
    external: false
    ipam:
      driver: default
      config:
        - subnet: 192.168.57.0/24