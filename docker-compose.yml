version: "3.9"
services:
  ###############################################################################
  # Traefik proxy
  ###############################################################################
  proxy:
    image: traefik:3.0
    container_name: bocraportal-proxy
    hostname: traefik
    networks:
      bocra-network:
        ipv4_address: ${BOCRA_PROXY_ADDRESS}
      bocraportal-public:
      default:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${BOCRA_DATA}/auth/system_passwd:/var/system_passwd
      - ${BOCRA_DATA}/certs:/etc/certs
      - ${BOCRA_DATA}/traefik/config.yml:/etc/traefik/dynamic_conf/conf.yml:ro
    environment:
      TZ: Africa/Gaborone
    ports:
      - 80:80
      - 443:443
      - 5432:5432
      - 5672:5672
      # - 8080:8080
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:8082/ping","--spider" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic_conf/"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.rabbitmq.address=:5672"
      - "--entryPoints.ping.address=:8082"
      - "--log.level=DEBUG"
      - "--accessLog"
      - "--accesslog=true"
      - "--api"
      - "--api.dashboard"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--metrics"
      - "--metrics.prometheus"
      - "--providers.docker.network=bocraportal-public"
      # - "--entrypoints.web.http.redirections.entrypoint.to=${ACTIVE_ROUTER_ENTRY}"
      # - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # - "--certificatesresolvers.le.acme.email=${ACME_EMAIL?Variable not set}"
      # - "--certificatesresolvers.le.acme.storage=${BOCRA_DATA}/traefik/acme.json"
      # - "--certificatesresolvers.le.acme.tlschallenge=true"
    
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the bocraportal-public network (declared below)
      # - traefik.docker.network=bocraportal-public
      # Use the custom label "traefik.constraint-label=bocraportal-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      # - traefik.constraint-label=bocraportal-public
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      # - traefik.http.middlewares.admin-auth.basicauth.usersfile=/var/system_passwd
      # - traefik.http.routers.bocraportal-public-https.middlewares=admin-auth
      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable DOMAIN
      - traefik.http.routers.bocraportal-public-http.rule=Host(`${PROXY_DOMAIN}`)
      - traefik.http.routers.bocraportal-public-http.entrypoints=web
      - traefik.http.routers.bocraportal-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable DOMAIN
      - traefik.http.routers.bocraportal-public-https.rule=Host(`${PROXY_DOMAIN}`)
      - traefik.http.routers.bocraportal-public-https.entrypoints=websecure
      - traefik.http.routers.bocraportal-public-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.bocraportal-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      # - traefik.http.routers.bocraportal-public-https.tls.certresolver=le
      # Define the port inside of the Docker service to use
      - traefik.http.services.bocraportal-public.loadbalancer.server.port=8080

  ###############################################################################
  # Postgres database
  ###############################################################################
  db:
    container_name: bocraportal-db
    hostname: db
    image: bitnami/postgresql:15
    volumes:
      - ${BOCRA_DATA}/db:/bitnami/postgresql
    environment:
      POSTGRESQL_POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      POSTGRESQL_USERNAME: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
      TZ: Africa/Gaborone
    depends_on:
      proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/opt/bitnami/postgresql/bin/pg_isready", "--username=postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_DB_ADDRESS}
      default:
    labels:
      - "traefik.enable=true"
      # - "traefik.docker.network=bocraportal-public"
      - "traefik.tcp.routers.bocra-db-postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.bocra-db-postgres.entrypoints=postgres"
      - "traefik.tcp.routers.bocra-db.service=postgres"
      - "traefik.tcp.services.bocra-db.loadbalancer.server.port=5432"
      - "traefik.tcp.routers.bocra-db.tls=true"

  ###############################################################################
  # Postgres administration frontend
  ###############################################################################
  pgadmin:
    image: dpage/pgadmin4:6.15
    container_name: bocraportal-pgadmin
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_PGADMIN_ADDRESS}
      default:
    depends_on:
      proxy:
        condition: service_healthy
      db:
        condition: service_healthy
    # ports:
    #   - 9000:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      SCRIPT_NAME: /pgadmin
      TZ: Africa/Gaborone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-pgadmin-web.rule=Host(`${DB_DOMAIN}`) && PathPrefix(`/pgadmin`)"
      - "traefik.http.routers.bocra-pgadmin-web.entrypoints=web"
      - "traefik.http.routers.bocra-pgadmin-web.middlewares=https-redirect"
      - "traefik.http.routers.bocra-pgadmin-websecure.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.bocra-pgadmin-websecure.rule=Host(`${DB_DOMAIN}`) && PathPrefix(`/pgadmin`)"
      - "traefik.http.routers.bocra-pgadmin-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.bocra-pgadmin-websecure.tls.certresolver=le"

  ###############################################################################
  # Keycloak authentication server
  ###############################################################################
  keycloak:
    image: ${KEYCLOAK_REGISTRY_IMAGE}
    hostname: keycloak
    container_name: bocraportal-keycloak
    command:
      - "start"
      - "--optimized"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    volumes:
      - ${BOCRA_DATA}/hosts:/etc/hosts
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    environment:  
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB}
      KC_DB_URL_HOST: ${POSTGRES_SERVER}
      KC_HOSTNAME: ${KEYCLOAK_DOMAIN}
      KC_METRICS_ENABLED: true
      KC_PROXY: edge
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      PROXY_ADDRESS_FORWARDING: false
      TZ: Africa/Gaborone
    depends_on:
      db:
        condition: service_healthy
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_KEYCLOAK_ADDRESS}
      default:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak-web.rule=Host(`${KEYCLOAK_DOMAIN}`)"
      - "traefik.http.routers.keycloak-web.entrypoints=web"
      - "traefik.http.routers.keycloak-web.middlewares=https-redirect"
      - "traefik.http.routers.keycloak-websecure.entrypoints=${ACTIVE_ROUTER_ENTRY}"
      - "traefik.http.routers.keycloak-websecure.rule=Host(`${KEYCLOAK_DOMAIN}`)"
      - "traefik.http.routers.keycloak-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.keycloak-websecure.tls.certresolver=le"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

  ###############################################################################
  # The main API 
  ###############################################################################
  api:
    image: "ojmakhura/${API_IMAGE_NAME}:${IMAGE_VERSION}"
    container_name: bocraportal-api
    hostname: api

    healthcheck:
      test: "curl -m 5 --silent --fail --request GET http://localhost:8085/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 25s
      retries: 3
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    build:
      context: .
      dockerfile: bocraportal/webservice/Dockerfile
      args:
        CERT: ${CERT}
        CERT_PASSWORD: ${CERT_PASSWORD}
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_API_ADDRESS}
      default:
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      SERVER_PORT: ${API_SERVER_PORT}
      POSTGRES_SERVER_PORT: ${POSTGRES_SERVER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KEYCLOAK_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_API_CLIENT: ${KEYCLOAK_API_CLIENT}
      KEYCLOAK_API_CLIENT_SECRET: ${KEYCLOAK_API_CLIENT_SECRET}
      BOCRA_KEYCLOAK_ADDRESS: ${BOCRA_KEYCLOAK_ADDRESS}
      CERT: ${CERT}
      CERT_PASSWORD: ${CERT_PASSWORD}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_DOMAIN: rabbitmq
      RABBITMQ_SERVICE_PORT: ${RABBITMQ_SERVICE_PORT}
      API_LOG_LEVEL: ${API_LOG_LEVEL}
      WEB_URL: ${WEB_URL}
      COMM_URL: ${COMM_URL}
      TZ: Africa/Gaborone
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-web.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.api-web.entrypoints=web"
      - "traefik.http.routers.api-web.middlewares=https-redirect"
      - "traefik.http.routers.api-websecure.entrypoints=websecure"
      - "traefik.http.routers.api-websecure.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.api-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.api-websecure.tls.certresolver=le"
  
  ###############################################################################
  # The Communication API 
  ###############################################################################
  comm:
    image: "ojmakhura/${COMM_IMAGE_NAME}:${IMAGE_VERSION}"
    container_name: bocraportal-comm
    hostname: comm
    healthcheck:
      test: "curl -m 5 --silent --fail --request GET http://localhost:8095/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 25s
      retries: 3
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: bocraportal/comm/Dockerfile
      args:
        CERT: ${CERT}
        CERT_PASSWORD: ${CERT_PASSWORD}
        IMAGE_VERSION: ${IMAGE_VERSION}
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_COMM_ADDRESS}
      default:
    environment:
      POSTGRES_SERVER: db
      COMM_SERVER_PORT: ${COMM_SERVER_PORT}
      POSTGRES_SERVER_PORT: ${POSTGRES_SERVER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB}
      KEYCLOAK_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_COMM_CLIENT: ${KEYCLOAK_COMM_CLIENT}
      KEYCLOAK_COMM_CLIENT_SECRET: ${KEYCLOAK_COMM_CLIENT_SECRET}
      BOCRA_KEYCLOAK_ADDRESS: ${BOCRA_KEYCLOAK_ADDRESS}
      CERT: ${CERT}
      CERT_PASSWORD: ${CERT_PASSWORD}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_DOMAIN: rabbitmq
      RABBITMQ_SERVICE_PORT: ${RABBITMQ_SERVICE_PORT}
      COMM_LOG_LEVEL: ${COMM_LOG_LEVEL}
      WEB_URL: ${WEB_URL}
      COMM_URL: ${COMM_URL}
      API_URL: ${API_URL}
      TZ: Africa/Gaborone
    # volumes:
    #   - ${BOCRA_DATA}/hosts:/etc/hosts
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.comm-web.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/comm`)"
      - "traefik.http.routers.comm-web.entrypoints=web"
      - "traefik.http.routers.comm-web.middlewares=https-redirect"
      - "traefik.http.routers.comm-websecure.entrypoints=websecure"
      - "traefik.http.routers.comm-websecure.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/comm`)"
      - "traefik.http.routers.comm-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.comm-websecure.tls.certresolver=le"

  ###############################################################################
  # Angular web application
  ###############################################################################
  web:
    image: "ojmakhura/${WEB_IMAGE_NAME}:${IMAGE_VERSION}${IMAGE_VERSION_SUFFIX}"
    hostname: web
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 20s
    build:
      context: .
      dockerfile: bocraportal/angular/Dockerfile
    container_name: bocraportal-web
    volumes:
      - ${BOCRA_DATA}/web:/web
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_WEB_ADDRESS}
      default:
    environment:
      TZ: Africa/Gaborone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.bocra-web.entrypoints=web"
      - "traefik.http.routers.bocra-web.middlewares=https-redirect"
      - "traefik.http.routers.bocra-websecure.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.bocra-websecure.entrypoints=websecure"
      - "traefik.http.routers.bocra-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.bocra-websecure.tls.certresolver=le"

  ###############################################################################
  # Rabbit MQ
  ###############################################################################
  rabbitmq:
    image: rabbitmq:management
    container_name: bocraportal-rabbitmq
    hostname: rabbitmq
    # volumes:
    #  - ${BOCRA_DATA}/rabbit/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      TZ: Africa/Gaborone
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      bocraportal-public:
      bocra-network:
        ipv4_address: ${BOCRA_RABBIT_ADDRESS}
      default:
    # ports:
    #   - "${RABBITMQ_SERVICE_PORT}:${RABBITMQ_SERVICE_PORT}"
    #   - "${RABBITMQ_WEB_PORT}:${RABBITMQ_WEB_PORT}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq-web.rule=Host(`${RABBITMQ_DOMAIN}`)"
      - "traefik.http.routers.rabbitmq-web.entrypoints=web"
      - "traefik.http.routers.rabbitmq-web.middlewares=https-redirect"
      - "traefik.http.routers.rabbitmq-websecure.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq-websecure.rule=Host(`${RABBITMQ_DOMAIN}`)"
      - "traefik.http.routers.rabbitmq-websecure.tls=true"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      #tcp
      - "traefik.tcp.routers.rabbitmq-ingress.rule=HostSNI(`${RABBITMQ_DOMAIN}`)"
      - "traefik.tcp.routers.rabbitmq-ingress.entrypoints=rabbitmq"
      - "traefik.tcp.services.rabbitmq-ingress.loadbalancer.server.port=5672"
      - "traefik.tcp.routers.rabbitmq-ingress.tls=true"

  ###############################################################################
  # Cron job system
  ###############################################################################
  cron:
    image: "ojmakhura/${CRON_IMAGE_NAME}:${IMAGE_VERSION}"	
    build:
      context: .
      dockerfile: bocraportal/cron/Dockerfile.native
      args:
        CERT: ${CERT}
        CERT_PASSWORD: ${CERT_PASSWORD}
        IMAGE_VERSION: ${IMAGE_VERSION}
    container_name: bocraportal-cron
    healthcheck:
      test: "curl -m 5 --silent --fail --request GET http://localhost:8099/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 25s
      retries: 3
      start_period: 5s
    depends_on:
      api:
        condition: service_healthy
    environment:
      CRON_SERVER_PORT: ${CRON_SERVER_PORT}
      CRON_LOG_LEVEL: ${CRON_LOG_LEVEL}
      CRON_DB: ${CRON_DB}
      POSTGRES_SERVER: db
      POSTGRES_SERVER_PORT: ${POSTGRES_SERVER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB}
      KEYCLOAK_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CRON_CLIENT: ${KEYCLOAK_CRON_CLIENT}
      KEYCLOAK_CRON_CLIENT_SECRET: ${KEYCLOAK_CRON_CLIENT_SECRET}
      BOCRA_KEYCLOAK_ADDRESS: ${BOCRA_KEYCLOAK_ADDRESS}
      CERT: ${CERT}
      CERT_PASSWORD: ${CERT_PASSWORD}
      WEB_URL: ${WEB_URL}
      COMM_URL: ${COMM_URL}
      API_URL: ${API_URL}
      TZ: Africa/Gaborone
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cron-http.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/cron`)"
      - "traefik.http.routers.cron-http.entrypoints=web"
      - "traefik.http.routers.cron-http.middlewares=https-redirect"
      - "traefik.http.routers.cron-websecure.entrypoints=websecure"
      - "traefik.http.routers.cron-websecure.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/cron`)"
      - "traefik.http.routers.cron-websecure.tls=${SSL_SECURE}"
      - "traefik.http.routers.cron-websecure.tls.certresolver=le"
    volumes:
      - ${BOCRA_DATA}/cron/hosts:/etc/hosts
    networks:
      bocraportal-public:
      bocra-network:
      default:

  ###############################################################################
  # Local docker container registry
  ###############################################################################
  registry: 
    image: registry:2
    ports:
      - "5000:5000"
    volumes:
      - ${BOCRA_DATA}/registry/data:/var/lib/registry
      - ${BOCRA_DATA}/registry/certs:${BOCRA_DATA}/registry/certs
      - ${BOCRA_DATA}/registry/auth:${BOCRA_DATA}/registry/auth
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: ${BOCRA_DATA}/registry/auth/registry_passwd
      REGISTRY_AUTH_HTPASSWD_REALM: registry-realm
    networks:
      bocraportal-public:
      default:
    depends_on:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry-http.rule=Host(`${REGISTRY_DOMAIN}`)"
      - "traefik.http.routers.registry-http.entrypoints=web"
      - "traefik.http.routers.registry-http.middlewares=https-redirect"
      - "traefik.http.routers.registry.entrypoints=websecure"
      - "traefik.http.routers.registry.rule=Host(`${REGISTRY_DOMAIN}`)"
      - "traefik.http.routers.registry.tls=${SSL_SECURE}"
      - "traefik.http.routers.registry.tls.certresolver=le"
  
  ###############################################################################
  # Jenkins for CI/CD
  ###############################################################################
  jenkins:
    container_name: bocra-jenkins
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8083:8080
      - 50003:50000
    depends_on:
      - proxy
    env_file:
      - .env
    volumes:
      - ${BOCRA_DATA}/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      bocra-network:
        ipv4_address: ${BOCRA_JENKINS_ADDRESS}
      bocraportal-public:
      default:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bocra-jenkins.rule=Host(`${JENKINS_DOMAIN}`)"
      - "traefik.http.routers.registry.tls=${SSL_SECURE}"
      - "traefik.http.routers.registry.tls.certresolver=le"

###############################################################################
# Networks
###############################################################################
networks:
  bocraportal-public:
    # Allow setting it to false for testing
    external: true
  bocra-network:
    name: bocra-network
    driver: bridge
    external: false
    ipam:
      driver: default
      config:
        - subnet: 192.168.57.0/24
