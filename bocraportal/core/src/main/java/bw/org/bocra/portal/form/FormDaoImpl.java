// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.form.field.FormField;
import bw.org.bocra.portal.form.field.FormFieldRepository;
import bw.org.bocra.portal.form.field.FormFieldVO;
import bw.org.bocra.portal.form.section.FormSection;
import bw.org.bocra.portal.form.section.FormSectionRepository;
import bw.org.bocra.portal.form.section.FormSectionVO;
import bw.org.bocra.portal.form.submission.FormSubmissionRepository;
import bw.org.bocra.portal.licence.type.LicenceTypeFormRepository;
import bw.org.bocra.portal.licence.type.LicenceTypeRepository;
import bw.org.bocra.portal.licensee.LicenseeFormRepository;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.report.config.ReportConfigRepository;

/**
 * @see Form
 */
@Repository("formDao")
public class FormDaoImpl
    extends FormDaoBase
{

    public FormDaoImpl(LicenceTypeRepository licenceTypeRepository, FormFieldRepository formFieldRepository,
            FormSubmissionRepository formSubmissionRepository, LicenseeRepository licenseeRepository,
            ReportConfigRepository reportConfigRepository, FormSectionRepository formSectionRepository,
            LicenceTypeFormRepository licenceTypeFormRepository, LicenseeFormRepository licenseeFormRepository,
            FormReportConfigRepository formReportConfigRepository, FormRepository formRepository) {
                
        super(licenceTypeRepository, formFieldRepository, formSubmissionRepository, licenseeRepository, reportConfigRepository,
                formSectionRepository, licenceTypeFormRepository, licenseeFormRepository, formReportConfigRepository,
                formRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toFormVO(
        Form source,
        FormVO target)
    {
        // TODO verify behavior of toFormVO
        super.toFormVO(source, target);

        // if(!CollectionUtils.isEmpty(source.getLicenceTypes())) {

        //     if(target.getLicenceTypes() == null) {
        //         target.setLicenceTypes(new ArrayList<>());
        //     }
            
        //     for (LicenceType entity : source.getLicenceTypes()) {
        //         LicenceTypeVO type = new LicenceTypeVO();
        //         type.setId(entity.getId());
        //         type.setCode(entity.getCode());
        //         type.setDescription(entity.getDescription());
        //         type.setName(entity.getName());
                
        //         target.getLicenceTypes().add(type);
        //     }
        // }

        if(CollectionUtils.isNotEmpty(source.getFormFields())) {
            if(target.getFormFields() == null) {
                target.setFormFields(new ArrayList<>());
            }

            for (FormField entity : source.getFormFields()) {
                FormFieldVO field = new FormFieldVO();
                field.setId(entity.getId());
                field.setCreatedBy(entity.getCreatedBy());
                field.setCreatedDate(entity.getCreatedDate());
                field.setUpdatedBy(entity.getUpdatedBy());
                field.setUpdatedDate(entity.getUpdatedDate());
                field.setFieldId(entity.getFieldId());
                field.setFieldName(entity.getFieldName());
                field.setFieldType(entity.getFieldType());

                target.getFormFields().add(field);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getFormSections())) {
            if(target.getFormSections() == null) {
                target.setFormSections(new ArrayList<>());
            }

            for(FormSection entity : source.getFormSections()) {
                FormSectionVO section = new FormSectionVO();
                section.setId(entity.getId());
                section.setCreatedBy(entity.getCreatedBy());
                section.setCreatedDate(entity.getCreatedDate());
                section.setUpdatedBy(entity.getUpdatedBy());
                section.setUpdatedDate(entity.getUpdatedDate());
                section.setPosition(entity.getPosition());
                section.setSectionName(entity.getSectionName());

                target.getFormSections().add(section);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormVO toFormVO(final Form entity)
    {
        // TODO verify behavior of toFormVO
        return super.toFormVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Form loadFormFromFormVO(FormVO formVO)
    {
        if (formVO.getId() == null)
        {
            return  Form.Factory.newInstance();
        }
        else
        {
            return this.load(formVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Form formVOToEntity(FormVO formVO)
    {
        // TODO verify behavior of formVOToEntity
        Form entity = this.loadFormFromFormVO(formVO);
        this.formVOToEntity(formVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void formVOToEntity(
        FormVO source,
        Form target,
        boolean copyIfNull)
    {
        // TODO verify behavior of formVOToEntity
        super.formVOToEntity(source, target, copyIfNull);

        if(!CollectionUtils.isEmpty(source.getFormFields())) {

            Collection<FormField> fields = new ArrayList<>();
            for(FormFieldVO field : source.getFormFields()) {

                /**
                 * here we are getting a form field that has not been saved
                 * in our datastore. So we first save it before adding it to 
                 * the fields.
                 */
                if(field.getId() == null) {

                    FormField entity = FormField.Factory.newInstance();
                    getFormFieldDao().formFieldVOToEntity(field, entity, copyIfNull);
    
                    entity.setForm(target);
                    entity = formFieldDao.create(entity);
    
                    fields.add(entity);
                } else {

                    FormField entity = formFieldDao.load(field.getId());
                    entity.setForm(target);
                    fields.add(entity);
                }
            }

            target.setFormFields(fields);
        }

        if(CollectionUtils.isNotEmpty(source.getFormSections())) {

            Collection<FormSection> sections = new ArrayList<>();

            for(FormSectionVO section : source.getFormSections()) {
                if(section.getId() == null) {
                    FormSection entity = FormSection.Factory.newInstance();
                    getFormSectionDao().formSectionVOToEntity(section, entity, copyIfNull);

                    entity.setForm(target);
                    entity = formSectionDao.create(entity);

                    sections.add(entity);
                } else {
                    FormSection entity = formSectionDao.load(section.getId());
                    entity.setForm(target);
                    sections.add(entity);
                }
            }

            target.setFormSections(sections);
        }

        // if(!CollectionUtils.isEmpty(source.getLicenceTypes())) {

        //     target.setLicenceTypes(new ArrayList<>());

        //     for(LicenceTypeVO type : source.getLicenceTypes()) {

        //         if(type.getId() != null) {
        //             LicenceType entity = getLicenceTypeDao().load(type.getId());
        //             target.getLicenceTypes().add(entity);
        //         }

        //     }
        // }
    }

}