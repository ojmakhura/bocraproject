// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.expression;

import org.springframework.stereotype.Repository;

/**
 * @see ExpressionNode
 */
@Repository("expressionNodeDao")
public class ExpressionNodeDaoImpl
    extends ExpressionNodeDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toExpressionNodeVO(
        ExpressionNode source,
        ExpressionNodeVO target)
    {
        // TODO verify behavior of toExpressionNodeVO
        super.toExpressionNodeVO(source, target);
        // WARNING! No conversion for target.left (can't convert source.getLeft():ExpressionNode to ExpressionNodeVO
        if(source.getLeft() != null && source.getLeft().getId() != null) {
            ExpressionNodeVO left = new ExpressionNodeVO();
            left.setId(source.getLeft().getId());
            left.setType(source.getLeft().getType());
            left.setValue(source.getLeft().getValue());
            target.setLeft(left);
        }

        // WARNING! No conversion for target.right (can't convert source.getRight():ExpressionNode to ExpressionNodeVO
        if(source.getRight() != null && source.getRight().getId() != null) {
            
            ExpressionNodeVO right = new ExpressionNodeVO();
            right.setId(source.getRight().getId());
            right.setType(source.getRight().getType());
            right.setValue(source.getRight().getValue());
            target.setRight(right);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpressionNodeVO toExpressionNodeVO(final ExpressionNode entity)
    {
        // TODO verify behavior of toExpressionNodeVO
        return super.toExpressionNodeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private ExpressionNode loadExpressionNodeFromExpressionNodeVO(ExpressionNodeVO expressionNodeVO)
    {
        if (expressionNodeVO.getId() == null)
        {
            return  ExpressionNode.Factory.newInstance();
        }
        else
        {
            return this.load(expressionNodeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public ExpressionNode expressionNodeVOToEntity(ExpressionNodeVO expressionNodeVO)
    {
        // TODO verify behavior of expressionNodeVOToEntity
        ExpressionNode entity = this.loadExpressionNodeFromExpressionNodeVO(expressionNodeVO);
        this.expressionNodeVOToEntity(expressionNodeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void expressionNodeVOToEntity(
        ExpressionNodeVO source,
        ExpressionNode target,
        boolean copyIfNull)
    {
        // TODO verify behavior of expressionNodeVOToEntity
        super.expressionNodeVOToEntity(source, target, copyIfNull);
        // WARNING! No conversion for target.left (can't convert source.getLeft():ExpressionNode to ExpressionNodeVO
        if(source.getLeft() != null && source.getLeft().getId() != null) {
            //ExpressionNode left = ex;
            //target.setLeft(left);
        }

        // WARNING! No conversion for target.right (can't convert source.getRight():ExpressionNode to ExpressionNodeVO
        if(source.getRight() != null && source.getRight().getId() != null) {
            
            // ExpressionNodeVO right = new ExpressionNodeVO();
            // right.setId(source.getRight().getId());
            // right.setType(source.getRight().getType());
            // right.setValue(source.getRight().getValue());
            // target.setRight(right);
        }
    }
}