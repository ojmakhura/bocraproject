// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.submission.note;

import bw.org.bocra.portal.form.submission.FormSubmissionRepository;
import bw.org.bocra.portal.form.submission.FormSubmissionVO;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see Note
 */
@Repository("noteDao")
@Transactional
public class NoteDaoImpl
    extends NoteDaoBase
{
    
    public NoteDaoImpl(
        FormSubmissionRepository formSubmissionRepository,
        NoteRepository noteRepository
    ) {

        super(
            formSubmissionRepository,
            noteRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toNoteVO(
        Note source,
        NoteVO target)
    {
        // TODO verify behavior of toNoteVO
        super.toNoteVO(source, target);
        // WARNING! No conversion for target.formSubmission (can't convert source.getFormSubmission():bw.org.bocra.portal.form.submission.FormSubmission to bw.org.bocra.portal.form.submission.FormSubmissionVO
        if(source.getFormSubmission() != null) {
            FormSubmissionVO sub = new FormSubmissionVO();
            sub.setId(source.getId());
            sub.setCreatedBy(source.getFormSubmission().getCreatedBy());
            sub.setUpdatedBy(source.getFormSubmission().getUpdatedBy());
            sub.setCreatedDate(source.getFormSubmission().getCreatedDate());
            sub.setUpdatedDate(source.getFormSubmission().getUpdatedDate());
            sub.setSubmittedBy(source.getFormSubmission().getSubmittedBy());
            sub.setSubmissionDate(source.getFormSubmission().getSubmissionDate());
            sub.setSubmissionStatus(source.getFormSubmission().getSubmissionStatus());

            target.setFormSubmission(sub);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoteVO toNoteVO(final Note entity)
    {
        // TODO verify behavior of toNoteVO
        return super.toNoteVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Note loadNoteFromNoteVO(NoteVO noteVO)
    {
        // TODO implement loadNoteFromNoteVO
        throw new UnsupportedOperationException("bw.org.bocra.portal.form.submission.note.loadNoteFromNoteVO(NoteVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (noteVO.getId() == null)
        {
            return  Note.Factory.newInstance();
        }
        else
        {
            return this.load(noteVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Note noteVOToEntity(NoteVO noteVO)
    {
        // TODO verify behavior of noteVOToEntity
        Note entity = this.loadNoteFromNoteVO(noteVO);
        this.noteVOToEntity(noteVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void noteVOToEntity(
        NoteVO source,
        Note target,
        boolean copyIfNull)
    {
        // TODO verify behavior of noteVOToEntity
        super.noteVOToEntity(source, target, copyIfNull);

        if(source.getFormSubmission() != null && source.getFormSubmission().getClass() != null) {
            target.setFormSubmission(formSubmissionDao.get(source.getFormSubmission().getId()));
        }
    }
}