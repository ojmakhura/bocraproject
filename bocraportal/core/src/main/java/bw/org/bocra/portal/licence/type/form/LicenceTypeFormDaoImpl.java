// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.licence.type.form;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.licence.type.LicenceTypeRepository;
import bw.org.bocra.portal.licence.type.LicenceTypeVO;

/**
 * @see LicenceTypeForm
 */
@Repository("licenceTypeFormDao")
@Transactional
public class LicenceTypeFormDaoImpl
    extends LicenceTypeFormDaoBase
{
    
    public LicenceTypeFormDaoImpl(
        LicenceTypeRepository licenceTypeRepository,
        FormRepository formRepository,
        LicenceTypeFormRepository licenceTypeFormRepository
    ) {

        super(
            licenceTypeRepository,
            formRepository,
            licenceTypeFormRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLicenceTypeFormVO(
        LicenceTypeForm source,
        LicenceTypeFormVO target)
    {
        // TODO verify behavior of toLicenceTypeFormVO
        super.toLicenceTypeFormVO(source, target);
        // WARNING! No conversion for target.licenceType (can't convert source.getLicenceType():bw.org.bocra.portal.licence.type.LicenceType to bw.org.bocra.portal.licence.type.LicenceTypeVO
        if(source.getLicenceType() != null && source.getLicenceType().getId() != null) {
            LicenceTypeVO type = new LicenceTypeVO();
            type.setCode(source.getLicenceType().getCode());
            type.setId(source.getLicenceType().getId());
            type.setName(source.getLicenceType().getName());
            type.setDescription(source.getLicenceType().getDescription());
            target.setLicenceType(type);
        }

        // WARNING! No conversion for target.form (can't convert source.getForm():bw.org.bocra.portal.form.Form to bw.org.bocra.portal.form.FormVO
        if (source.getForm() != null && source.getForm().getId() != null) {
            Form form = source.getForm();
            FormVO vo = new FormVO();

            vo.setId(source.getId());
            vo.setCreatedBy(form.getCreatedBy());
            vo.setUpdatedBy(form.getUpdatedBy());
            vo.setCreatedDate(form.getCreatedDate());
            vo.setUpdatedDate(form.getUpdatedDate());
            vo.setCode(form.getCode());
            vo.setFormName(form.getFormName());
            vo.setDescription(form.getDescription());
            vo.setEntryType(form.getEntryType());

            target.setForm(vo);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenceTypeFormVO toLicenceTypeFormVO(final LicenceTypeForm entity)
    {
        // TODO verify behavior of toLicenceTypeFormVO
        return super.toLicenceTypeFormVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LicenceTypeForm loadLicenceTypeFormFromLicenceTypeFormVO(LicenceTypeFormVO licenceTypeFormVO)
    {
        if (licenceTypeFormVO.getId() == null)
        {
            return  LicenceTypeForm.Factory.newInstance();
        }
        else
        {
            return this.load(licenceTypeFormVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public LicenceTypeForm licenceTypeFormVOToEntity(LicenceTypeFormVO licenceTypeFormVO)
    {
        // TODO verify behavior of licenceTypeFormVOToEntity
        LicenceTypeForm entity = this.loadLicenceTypeFormFromLicenceTypeFormVO(licenceTypeFormVO);
        this.licenceTypeFormVOToEntity(licenceTypeFormVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void licenceTypeFormVOToEntity(
        LicenceTypeFormVO source,
        LicenceTypeForm target,
        boolean copyIfNull)
    {
        // TODO verify behavior of licenceTypeFormVOToEntity
        super.licenceTypeFormVOToEntity(source, target, copyIfNull);
        if (source.getForm() != null && source.getForm().getId() != null) {
            target.setForm(getFormDao().load(source.getForm().getId()));
        } else {
            throw new IllegalArgumentException(
                "LicenceTypeFormDao.licenceTypeFormVOToEntity - 'form' or its id can not be null"
            );
        }

        if (source.getLicenceType() != null && source.getLicenceType().getId() != null) {
            target.setLicenceType(getLicenceTypeDao().load(source.getLicenceType().getId()));
        } else {
            throw new IllegalArgumentException(
                "LicenceTypeFormDao.licenceTypeFormVOToEntity - 'licenceType' or its id can not be null"
            );
        }
    }
}