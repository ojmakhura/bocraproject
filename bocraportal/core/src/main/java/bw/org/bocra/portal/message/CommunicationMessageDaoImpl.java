// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.message;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see CommunicationMessage
 */
@Repository("communicationMessageDao")
@Transactional
public class CommunicationMessageDaoImpl
    extends CommunicationMessageDaoBase
{
    
    public CommunicationMessageDaoImpl(
        CommunicationMessageRepository communicationMessageRepository
    ) {

        super(
            communicationMessageRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toCommunicationMessageVO(
        CommunicationMessage source,
        CommunicationMessageVO target)
    {
        // TODO verify behavior of toCommunicationMessageVO
        super.toCommunicationMessageVO(source, target);
        // WARNING! No conversion for target.dispatchDate (can't convert source.getDispatchDate():java.time.LocalDate to java.time.LocalDateTime
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunicationMessageVO toCommunicationMessageVO(final CommunicationMessage entity)
    {
        // TODO verify behavior of toCommunicationMessageVO
        return super.toCommunicationMessageVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private CommunicationMessage loadCommunicationMessageFromCommunicationMessageVO(CommunicationMessageVO communicationMessageVO)
    {
        if (communicationMessageVO.getId() == null)
        {
            return  CommunicationMessage.Factory.newInstance();
        }
        else
        {
            return this.load(communicationMessageVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public CommunicationMessage communicationMessageVOToEntity(CommunicationMessageVO communicationMessageVO)
    {
        // TODO verify behavior of communicationMessageVOToEntity
        CommunicationMessage entity = this.loadCommunicationMessageFromCommunicationMessageVO(communicationMessageVO);
        this.communicationMessageVOToEntity(communicationMessageVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void communicationMessageVOToEntity(
        CommunicationMessageVO source,
        CommunicationMessage target,
        boolean copyIfNull)
    {
        // TODO verify behavior of communicationMessageVOToEntity
        super.communicationMessageVOToEntity(source, target, copyIfNull);
        // No conversion for target.dispatchDate (can't convert source.getDispatchDate():java.time.LocalDateTime to java.time.LocalDate
    }
}