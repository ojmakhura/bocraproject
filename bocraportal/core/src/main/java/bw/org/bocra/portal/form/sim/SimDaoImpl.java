// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.sim;

import bw.org.bocra.portal.form.FormCriteria;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.instance.PeriodInstance;
import bw.org.bocra.portal.period.instance.PeriodInstanceVO;

import java.util.Collection;

import org.springframework.stereotype.Repository;

/**
 * @see Sim
 */
@Repository("simDao")
public class SimDaoImpl
    extends SimDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Sim> handleFindByCriteria(FormCriteria searchCriteria)
    {
        // TODO implement public Sim handleFindByCriteria(FormCriteria searchCriteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSimVO(
        Sim source,
        SimVO target)
    {
        // TODO verify behavior of toSimVO
        super.toSimVO(source, target);
        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(source.getLicensee() != null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);

            target.setLicensee(licensee);
        }
        
        // WARNING! No conversion for target.periodInstance (can't convert source.getPeriodInstance():bw.org.bocra.portal.period.instance.PeriodInstance to bw.org.bocra.portal.period.instance.PeriodInstanceVO
        if(source.getPeriodInstance() != null) {
            PeriodInstanceVO instance = new PeriodInstanceVO();
            getPeriodInstanceDao().toPeriodInstanceVO(source.getPeriodInstance(), instance);

            target.setPeriodInstance(instance);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SimVO toSimVO(final Sim entity)
    {
        // TODO verify behavior of toSimVO
        return super.toSimVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Sim loadSimFromSimVO(SimVO simVO)
    {
        if (simVO.getId() == null)
        {
            return  Sim.Factory.newInstance();
        }
        else
        {
            return this.load(simVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Sim simVOToEntity(SimVO simVO)
    {
        // TODO verify behavior of simVOToEntity
        Sim entity = this.loadSimFromSimVO(simVO);
        this.simVOToEntity(simVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void simVOToEntity(
        SimVO source,
        Sim target,
        boolean copyIfNull)
    {
        // TODO verify behavior of simVOToEntity
        super.simVOToEntity(source, target, copyIfNull);

        if(source.getLicensee() != null) {
            Licensee licensee = Licensee.Factory.newInstance();
            getLicenseeDao().licenseeVOToEntity(source.getLicensee(), licensee, copyIfNull);

            target.setLicensee(licensee);
        }

        if(source.getPeriodInstance() != null) {
            PeriodInstance instance = PeriodInstance.Factory.newInstance();
            getPeriodInstanceDao().periodInstanceVOToEntity(source.getPeriodInstance(), instance, copyIfNull);

            target.setPeriodInstance(instance);
        }
    }
}