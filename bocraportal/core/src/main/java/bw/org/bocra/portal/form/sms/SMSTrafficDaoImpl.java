// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.sms;

import bw.org.bocra.portal.form.FormCriteria;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.Period;
import bw.org.bocra.portal.period.PeriodVO;

import java.util.Collection;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see SMSTraffic
 */
@Repository("sMSTrafficDao")
public class SMSTrafficDaoImpl
    extends SMSTrafficDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<SMSTraffic> handleFindByCriteria(FormCriteria searchCriteria)
    {
        Specification<SMSTraffic> specs = null;

        if(searchCriteria.getStatus() != null) {
            specs = SMSTrafficSpecifications.findByStatus(searchCriteria.getStatus());
        }

        if(searchCriteria.getLicenseeId() != null) {
            Specification<SMSTraffic> tmp = SMSTrafficSpecifications.findByLicenseeId(searchCriteria.getLicenseeId());
            if(specs == null) {
                specs = tmp;
            } else {
                specs.and(tmp);
            }
        }

        Pageable pageable = null;

        if(searchCriteria.getPaged()) {
            pageable = PageRequest.of(searchCriteria.getPageNumber(), searchCriteria.getPageSize());
        }

        if(pageable == null) {
            return sMSTrafficRepository.findAll(specs, pageable).getContent();
        } else {
            return sMSTrafficRepository.findAll(specs);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSMSTrafficVO(
        SMSTraffic source,
        SMSTrafficVO target)
    {
        // TODO verify behavior of toSMSTrafficVO
        super.toSMSTrafficVO(source, target);
        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(source.getLicensee() != null) {
            if(target.getLicensee() == null) {
                target.setLicensee(new LicenseeVO());
            }
            getLicenseeDao().toLicenseeVO(source.getLicensee(), target.getLicensee());
        }

        // WARNING! No conversion for target.period (can't convert source.getPeriod():bw.org.bocra.portal.period.config.Period to bw.org.bocra.portal.period.config.PeriodVO
        if(source.getPeriod() != null) {
            if(target.getPeriod() == null) {
                target.setPeriod(new PeriodVO());
            }
            getPeriodDao().toPeriodVO(source.getPeriod(), target.getPeriod());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SMSTrafficVO toSMSTrafficVO(final SMSTraffic entity)
    {
        // TODO verify behavior of toSMSTrafficVO
        return super.toSMSTrafficVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private SMSTraffic loadSMSTrafficFromSMSTrafficVO(SMSTrafficVO sMSTrafficVO)
    {
        if (sMSTrafficVO.getId() == null)
        {
            return  SMSTraffic.Factory.newInstance();
        }
        else
        {
            return this.load(sMSTrafficVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public SMSTraffic sMSTrafficVOToEntity(SMSTrafficVO sMSTrafficVO)
    {
        // TODO verify behavior of sMSTrafficVOToEntity
        SMSTraffic entity = this.loadSMSTrafficFromSMSTrafficVO(sMSTrafficVO);
        this.sMSTrafficVOToEntity(sMSTrafficVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void sMSTrafficVOToEntity(
        SMSTrafficVO source,
        SMSTraffic target,
        boolean copyIfNull)
    {
        // TODO verify behavior of sMSTrafficVOToEntity
        super.sMSTrafficVOToEntity(source, target, copyIfNull);

        if(source.getLicensee() != null) {
            if(target.getLicensee() == null) {
                target.setLicensee(Licensee.Factory.newInstance());
            }

            getLicenseeDao().licenseeVOToEntity(source.getLicensee(), target.getLicensee(), copyIfNull);
        }

        if(source.getPeriod() != null) {
            if(target.getPeriod() == null) {
                target.setPeriod(Period.Factory.newInstance());
            }

            getPeriodDao().periodVOToEntity(source.getPeriod(), target.getPeriod(), copyIfNull);
        }

    }
}