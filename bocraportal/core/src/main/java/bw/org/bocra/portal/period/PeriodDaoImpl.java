// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.period;

import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see Period
 */
@Repository("periodDao")
public class PeriodDaoImpl
    extends PeriodDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toPeriodVO(
        Period source,
        PeriodVO target)
    {
        // TODO verify behavior of toPeriodVO
        super.toPeriodVO(source, target);

        // if(CollectionUtils.isNotEmpty(source.getFormSubmissions())) {
            
        // }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PeriodVO toPeriodVO(final Period entity)
    {
        // TODO verify behavior of toPeriodVO
        return super.toPeriodVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Period loadPeriodFromPeriodVO(PeriodVO periodVO)
    {
        if (periodVO.getId() == null)
        {
            return  Period.Factory.newInstance();
        }
        else
        {
            return this.load(periodVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Period periodVOToEntity(PeriodVO periodVO)
    {
        // TODO verify behavior of periodVOToEntity
        Period entity = this.loadPeriodFromPeriodVO(periodVO);
        this.periodVOToEntity(periodVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void periodVOToEntity(
        PeriodVO source,
        Period target,
        boolean copyIfNull)
    {
        // TODO verify behavior of periodVOToEntity
        super.periodVOToEntity(source, target, copyIfNull);
    }

    @Override
    protected Collection<Period> handleFindByCriteria(PeriodCriteria searchCriteria) throws Exception {
        
        Specification<Period> specs = null;

        if(searchCriteria.getSearchDate() != null) {
            specs = PeriodSpecifications.findByPeriodStartGreaterThanEqual(searchCriteria.getSearchDate());
            specs = specs.and(PeriodSpecifications.findByPeriodEndLessThanEqual(searchCriteria.getSearchDate()));
        }

        if(StringUtils.isNotBlank(searchCriteria.getPeriodName())){
            if(specs == null) {
                specs = PeriodSpecifications.findByPeriodNameContainingIgnoreCase(searchCriteria.getPeriodName());
            } else {
                specs = specs.and(PeriodSpecifications.findByPeriodNameContainingIgnoreCase(searchCriteria.getPeriodName()));
            }
        }

        return periodRepository.findAll(specs);
    }
}