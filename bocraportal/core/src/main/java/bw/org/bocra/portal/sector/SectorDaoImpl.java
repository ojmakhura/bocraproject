// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.sector;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeDao;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.licensee.sector.LicenseeSector;
import bw.org.bocra.portal.licensee.sector.LicenseeSectorRepository;
import bw.org.bocra.portal.licensee.sector.LicenseeSectorVO;
import bw.org.bocra.portal.notification.NotificationDao;
import bw.org.bocra.portal.notification.NotificationRepository;
import bw.org.bocra.portal.sector.form.SectorForm;
import bw.org.bocra.portal.sector.form.SectorFormRepository;
import bw.org.bocra.portal.sector.form.SectorFormVO;

/**
 * @see Sector
 */
@Repository("sectorDao")
public class SectorDaoImpl
    extends SectorDaoBase
{

    public SectorDaoImpl(LicenseeRepository licenseeRepository, LicenseeSectorRepository licenseeSectorRepository,
            NotificationRepository notificationRepository, FormRepository formRepository,
            SectorFormRepository sectorFormRepository, SectorRepository sectorRepository) {

        super(licenseeRepository, licenseeSectorRepository, notificationRepository, formRepository, sectorFormRepository,
                sectorRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSectorVO(
        Sector source,
        SectorVO target)
    {
        // TODO verify behavior of toSectorVO
        super.toSectorVO(source, target);

        if(CollectionUtils.isNotEmpty(source.getLicenseeSectors())) {
            Collection<LicenseeSectorVO> licensees = new ArrayList<>();

            for(LicenseeSector l : source.getLicenseeSectors()) {
                LicenseeSectorVO lvo = new LicenseeSectorVO();
                lvo.setLicenseeSectorId(l.getId());
                lvo.setId(l.getLicensee().getId());
                lvo.setLicenseeName(l.getLicensee().getLicenseeName());
                lvo.setStatus(l.getLicensee().getStatus());
                lvo.setUin(l.getLicensee().getUin());
                licensees.add(lvo);
            }

            target.setLicensees(licensees);
        }

        Collection<SectorFormVO> forms = new ArrayList<>();

        for(SectorForm form : source.getSectorForms()) {
            SectorFormVO vo = new SectorFormVO();
            getSectorFormDao().toSectorFormVO(form, vo);
            forms.add(vo);
        }

        target.setForms(forms);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SectorVO toSectorVO(final Sector entity)
    {
        // TODO verify behavior of toSectorVO
        return super.toSectorVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Sector loadSectorFromSectorVO(SectorVO sectorVO)
    {
        if (sectorVO.getId() == null)
        {
            return  Sector.Factory.newInstance();
        }
        else
        {
            return this.load(sectorVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Sector sectorVOToEntity(SectorVO sectorVO)
    {
        // TODO verify behavior of sectorVOToEntity
        Sector entity = this.loadSectorFromSectorVO(sectorVO);
        this.sectorVOToEntity(sectorVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void sectorVOToEntity(
        SectorVO source,
        Sector target,
        boolean copyIfNull)
    {
        // TODO verify behavior of sectorVOToEntity
        super.sectorVOToEntity(source, target, copyIfNull);

        if(CollectionUtils.isNotEmpty(source.getLicensees())) {
            Collection<LicenseeSector> licensees = new ArrayList<>();

            for(LicenseeSectorVO lvo : source.getLicensees()) {

                if(lvo.getLicenseeSectorId() != null) {
                    licensees.add(licenseeSectorRepository.getById(lvo.getLicenseeSectorId()));

                } else if(lvo.getId() != null) {
                    LicenseeSector ls = LicenseeSector.Factory.newInstance(licenseeDao.load(lvo.getId()), target);
                    licensees.add(licenseeSectorRepository.save(ls));
                }
            }

            target.setLicenseeSectors(licensees);
        }
    }

    @Override
    protected Collection<Sector> handleFindByCriteria(String criteria) throws Exception {
        
        Specification<Sector> specs = null;
        
        if(StringUtils.isNotBlank(criteria)) {
            specs = BocraportalSpecifications.<Sector, String>findByAttributeContainingIgnoreCase("code", criteria)
                    .or(BocraportalSpecifications.<Sector, String>findByAttributeContainingIgnoreCase("name", criteria))
                    .or(BocraportalSpecifications.<Sector, String>findByAttributeContainingIgnoreCase("description", criteria));
        }

        return this.sectorRepository.findAll(specs, Sort.by("name").ascending());
    }
}