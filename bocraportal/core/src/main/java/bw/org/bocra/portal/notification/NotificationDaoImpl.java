// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.notification;

import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.licensee.LicenseeDao;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.sector.SectorDao;
import bw.org.bocra.portal.sector.SectorRepository;

/**
 * @see Notification
 */
@Repository("notificationDao")
public class NotificationDaoImpl
    extends NotificationDaoBase
{

    public NotificationDaoImpl(SectorRepository sectorRepository, LicenseeRepository licenseeRepository,
            NotificationRepository notificationRepository) {
                
        super(sectorRepository, licenseeRepository, notificationRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toNotificationVO(
        Notification source,
        NotificationVO target)
    {
        // TODO verify behavior of toNotificationVO
        super.toNotificationVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationVO toNotificationVO(final Notification entity)
    {
        // TODO verify behavior of toNotificationVO
        return super.toNotificationVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Notification loadNotificationFromNotificationVO(NotificationVO notificationVO)
    {
        // TODO implement loadNotificationFromNotificationVO
        throw new UnsupportedOperationException("bw.org.bocra.portal.notification.loadNotificationFromNotificationVO(NotificationVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (notificationVO.getId() == null)
        {
            return  Notification.Factory.newInstance();
        }
        else
        {
            return this.load(notificationVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Notification notificationVOToEntity(NotificationVO notificationVO)
    {
        // TODO verify behavior of notificationVOToEntity
        Notification entity = this.loadNotificationFromNotificationVO(notificationVO);
        this.notificationVOToEntity(notificationVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void notificationVOToEntity(
        NotificationVO source,
        Notification target,
        boolean copyIfNull)
    {
        // TODO verify behavior of notificationVOToEntity
        super.notificationVOToEntity(source, target, copyIfNull);
    }
}