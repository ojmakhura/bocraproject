// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.complaint.type;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.BocraportalSpecifications;

/**
 * @see ComplaintType
 */
@Repository("complaintTypeDao")
@Transactional
public class ComplaintTypeDaoImpl
    extends ComplaintTypeDaoBase
{
    
    public ComplaintTypeDaoImpl(
        ComplaintTypeRepository complaintTypeRepository
    ) {

        super(
            complaintTypeRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toComplaintTypeVO(
        ComplaintType source,
        ComplaintTypeVO target)
    {
        // TODO verify behavior of toComplaintTypeVO
        super.toComplaintTypeVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComplaintTypeVO toComplaintTypeVO(final ComplaintType entity)
    {
        // TODO verify behavior of toComplaintTypeVO
        return super.toComplaintTypeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private ComplaintType loadComplaintTypeFromComplaintTypeVO(ComplaintTypeVO complaintTypeVO)
    {
        if (complaintTypeVO.getId() == null)
        {
            return  ComplaintType.Factory.newInstance();
        }
        else
        {
            return this.load(complaintTypeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public ComplaintType complaintTypeVOToEntity(ComplaintTypeVO complaintTypeVO)
    {
        // TODO verify behavior of complaintTypeVOToEntity
        ComplaintType entity = this.loadComplaintTypeFromComplaintTypeVO(complaintTypeVO);
        this.complaintTypeVOToEntity(complaintTypeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void complaintTypeVOToEntity(
        ComplaintTypeVO source,
        ComplaintType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of complaintTypeVOToEntity
        super.complaintTypeVOToEntity(source, target, copyIfNull);
    }

    @Override
    protected Collection<ComplaintType> handleFindByCriteria(String criteria) throws Exception {

        Specification<ComplaintType> spec = null;

        if(StringUtils.isNotBlank(criteria)) {
            spec = BocraportalSpecifications.<ComplaintType, String>findByAttributeLikeIgnoreCase("code", criteria)
                        .or(BocraportalSpecifications.<ComplaintType, String>findByAttributeLikeIgnoreCase("type", criteria));
        }

        return complaintTypeRepository.findAll(spec, Sort.by("code").ascending());
    }
}