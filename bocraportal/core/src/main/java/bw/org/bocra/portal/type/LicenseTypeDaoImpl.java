// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.type;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;

/**
 * @see LicenseType
 */
@Repository("licenseTypeDao")
public class LicenseTypeDaoImpl
    extends LicenseTypeDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<LicenseType> handleFindByCriteria(LicenseTypeCriteria criteria)
    {
        Specification<LicenseType> criteriaSpecs =  null;

        if(StringUtils.isNotBlank(criteria.getTypeSearch())) {

            criteriaSpecs = LicenseTypeSpecifications.findByCodeLikeIgnoreCase(criteria.getTypeSearch());
            criteriaSpecs.and(LicenseTypeSpecifications.findByNameLikeIgnoreCase(criteria.getTypeSearch()));
            criteriaSpecs.and(LicenseTypeSpecifications.findByDescriptionLikeIgnoreCase(criteria.getTypeSearch()));
        }

        if(criteria.getLicenseeId() != null) {
            if(criteriaSpecs == null) {

            } else {

            }
        }

        return criteriaSpecs == null ? licenseTypeRepository.findAll() : licenseTypeRepository.findAll(criteriaSpecs);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLicenseTypeVO(
        LicenseType source,
        LicenseTypeVO target)
    {
        // TODO verify behavior of toLicenseTypeVO
        super.toLicenseTypeVO(source, target);
        // WARNING! No conversion for target.licensees (can't convert source.getLicensees():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(source.getLicensees() != null) {
            ArrayList<LicenseeVO> licensees = new ArrayList<>();
            for (Licensee licensee : source.getLicensees()) {
                LicenseeVO lvo = new LicenseeVO();
                lvo.setId(licensee.getId());
                lvo.setAddress(licensee.getAddress());
                lvo.setLicenseeName(licensee.getLicenseeName());
                lvo.setUin(licensee.getUin());
            }

            target.setLicensees(licensees);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenseTypeVO toLicenseTypeVO(final LicenseType entity)
    {
        // TODO verify behavior of toLicenseTypeVO
        return super.toLicenseTypeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LicenseType loadLicenseTypeFromLicenseTypeVO(LicenseTypeVO licenseTypeVO)
    {

        if (licenseTypeVO.getId() == null)
        {
            return  LicenseType.Factory.newInstance();
        }
        else
        {
            return this.load(licenseTypeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public LicenseType licenseTypeVOToEntity(LicenseTypeVO licenseTypeVO)
    {
        // TODO verify behavior of licenseTypeVOToEntity
        LicenseType entity = this.loadLicenseTypeFromLicenseTypeVO(licenseTypeVO);
        this.licenseTypeVOToEntity(licenseTypeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void licenseTypeVOToEntity(
        LicenseTypeVO source,
        LicenseType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of licenseTypeVOToEntity
        super.licenseTypeVOToEntity(source, target, copyIfNull);
        if(source.getLicensees() != null) {
            Collection<Licensee> licensees = new ArrayList<>();
            for (LicenseeVO licensee : source.getLicensees()) {
                Licensee lvo = Licensee.Factory.newInstance();
                lvo.setId(licensee.getId());
                lvo.setAddress(licensee.getAddress());
                lvo.setLicenseeName(licensee.getLicenseeName());
                lvo.setUin(licensee.getUin());
            }

            target.setLicensees(licensees);
        }
    }
}