// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.licence.type;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.licence.Licence;
import bw.org.bocra.portal.licence.LicenceRepository;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licence.type.form.LicenceTypeForm;
import bw.org.bocra.portal.licence.type.form.LicenceTypeFormRepository;
import bw.org.bocra.portal.licence.type.form.LicenceTypeFormVO;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.report.config.ReportConfigLicenceTypeRepository;
import bw.org.bocra.portal.report.config.ReportConfigRepository;

/**
 * @see LicenceType
 */
@Repository("licenceTypeDao")
@Transactional
public class LicenceTypeDaoImpl
    extends LicenceTypeDaoBase
{

    public LicenceTypeDaoImpl(FormRepository formRepository, LicenceRepository licenceRepository,
            ReportConfigRepository reportConfigRepository, LicenceTypeFormRepository licenceTypeFormRepository,
            ReportConfigLicenceTypeRepository reportConfigLicenceTypeRepository,
            LicenceTypeRepository licenceTypeRepository) {
                
        super(formRepository, licenceRepository, reportConfigRepository, licenceTypeFormRepository,
                reportConfigLicenceTypeRepository, licenceTypeRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<LicenceType> handleFindByCriteria(LicenceTypeCriteria criteria)
    {
        Specification<LicenceType> criteriaSpecs =  null;

        if(StringUtils.isNotBlank(criteria.getTypeSearch())) {

            criteriaSpecs = BocraportalSpecifications.<LicenceType, String>findByAttributeLikeIgnoreCase("code", criteria.getTypeSearch());
            criteriaSpecs.and(BocraportalSpecifications.<LicenceType, String>findByAttributeLikeIgnoreCase("name", criteria.getTypeSearch()));
            criteriaSpecs.and(BocraportalSpecifications.<LicenceType, String>findByAttributeLikeIgnoreCase("description", criteria.getTypeSearch()));
        }

        if(criteria.getLicence() != null) {
            if(criteriaSpecs == null) {

            } else {

            }
        }

        return licenceTypeRepository.findAll(criteriaSpecs);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLicenceTypeVO(
        LicenceType source,
        LicenceTypeVO target)
    {
        // TODO verify behavior of toLicenceTypeVO
        super.toLicenceTypeVO(source, target);
        // WARNING! No conversion for target.licensees (can't convert source.getLicensees():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(CollectionUtils.isNotEmpty(source.getLicences())) {
            ArrayList<LicenceVO> licences = new ArrayList<>();

            for(Licence licence : source.getLicences()) {
                LicenceVO vo = new LicenceVO();
                vo.setId(licence.getId());
                vo.setLicenceNumber(licence.getLicenceNumber());
                vo.setStartDate(licence.getStartDate());
                vo.setEndDate(licence.getEndDate());
                vo.setProvisional(licence.getProvisional());

                LicenseeVO licensee = new LicenseeVO();
                licensee.setId(licence.getLicensee().getId());
                licensee.setStatus(licence.getLicensee().getStatus());
                licensee.setLicenseeName(licence.getLicensee().getLicenseeName());
                licensee.setUin(licence.getLicensee().getUin());

                vo.setLicensee(licensee);

                licences.add(vo);
            }

            target.setLicences(licences);
        }

        // if(CollectionUtils.isNotEmpty(source.getReportConfigs())) {
        //     Collection<ReportConfigVO> configs = new ArrayList<>();

        //     target.setrep
        // }

        // if(CollectionUtils.isNotEmpty(source.getLicenceTypeForms())) {
        //     ArrayList<LicenceTypeFormVO> forms = new ArrayList<>();
        //     for(LicenceTypeForm form : source.getLicenceTypeForms()) {
                
        //         forms.add(getLicenceTypeFormDao().toLicenceTypeFormVO(form));
        //     }

        //     target.setLic;
        // }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenceTypeVO toLicenceTypeVO(final LicenceType entity)
    {
        // TODO verify behavior of toLicenceTypeVO
        return super.toLicenceTypeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LicenceType loadLicenceTypeFromLicenceTypeVO(LicenceTypeVO LicenceTypeVO)
    {

        if (LicenceTypeVO.getId() == null)
        {
            return  LicenceType.Factory.newInstance();
        }
        else
        {
            return this.load(LicenceTypeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public LicenceType licenceTypeVOToEntity(LicenceTypeVO LicenceTypeVO)
    {
        // TODO verify behavior of LicenceTypeVOToEntity
        LicenceType entity = this.loadLicenceTypeFromLicenceTypeVO(LicenceTypeVO);
        this.licenceTypeVOToEntity(LicenceTypeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void licenceTypeVOToEntity(
        LicenceTypeVO source,
        LicenceType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of LicenceTypeVOToEntity
        super.licenceTypeVOToEntity(source, target, copyIfNull);
        if(CollectionUtils.isNotEmpty(source.getLicences())) {
            Collection<Licence> licences = new ArrayList<>();
            for (LicenceVO licence : source.getLicences()) {
                if(licence.getId() != null) {
                    Licence entity = licenceDao.get(licence.getId());
                    licences.add(entity);
                }
            }

            target.setLicences(licences);
        }

        // if(CollectionUtils.isNotEmpty(source.getForms())) {
        //     ArrayList<LicenceTypeForm> forms = new ArrayList<>();

        //     for(FormVO form : source.getForms()) {
        //         if(form.getId() != null) {
        //             Form entity = getFormDao().get(form.getId());
        //             forms.add(entity);
        //         }
                
        //     }

        //     target.setLicenceTypeForms(forms);
        // }
    }
}