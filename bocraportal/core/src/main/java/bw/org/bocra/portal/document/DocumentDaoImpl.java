// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.document;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.complaint.ComplaintVO;
import bw.org.bocra.portal.complaint.Complaint;
import bw.org.bocra.portal.complaint.ComplaintRepository;
import bw.org.bocra.portal.complaint.ComplaintDao;
import bw.org.bocra.portal.document.type.DocumentType;
import bw.org.bocra.portal.document.type.DocumentTypeRepository;
import bw.org.bocra.portal.document.type.DocumentTypeVO;
import bw.org.bocra.portal.licence.Licence;
import bw.org.bocra.portal.licence.LicenceRepository;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;

/**
 * @see Document
 */
@Repository("documentDao")
@Transactional
public class DocumentDaoImpl
        extends DocumentDaoBase {

    private final ComplaintDao complaintDao;

    public DocumentDaoImpl(DocumentTypeRepository documentTypeRepository, LicenseeRepository licenseeRepository,
            LicenceRepository licenceRepository, DocumentRepository documentRepository, ComplaintDao complaintDao) {
        super(documentTypeRepository, licenseeRepository, licenceRepository, documentRepository);
        this.complaintDao = complaintDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Document> handleFindByCriteria(DocumentCriteria criteria) {
        // TODO implement public Collection<Document> handleFindByCriteria(String
        // criteria)
        Specification<Document> spec = null;

        if (StringUtils.isNotBlank(criteria.getDocumentName())) {
            spec = BocraportalSpecifications.<Document, String>findByAttributeContainingIgnoreCase("documentName",
                    criteria.getDocumentName());
        }

        if(StringUtils.isNotBlank(criteria.getDocumentId())) {
            spec = BocraportalSpecifications.<Document, String>findByAttribute("documentId",
                criteria.getDocumentId());
        }

        if(StringUtils.isNotBlank(criteria.getExtension())) {
            spec = BocraportalSpecifications.<Document, String>findByAttribute("documentId",
                criteria.getExtension());
        }

        if(criteria.getMetadataTarget() != null) {
            spec = BocraportalSpecifications.<Document, DocumentMetadataTarget>findByAttribute("metadataTarget",
                criteria.getMetadataTarget());
        }

        if(criteria.getMetadataTargetId() != null) {
            spec = BocraportalSpecifications.<Document, Long>findByAttribute("metadataTarget",
                criteria.getMetadataTargetId());
        }

        return documentRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentVO(
            Document source,
            DocumentVO target) {
        // TODO verify behavior of toDocumentVO

        target.setId(source.getId());
        target.setCreatedBy(source.getCreatedBy());
        target.setUpdatedBy(source.getUpdatedBy());
        target.setCreatedDate(source.getCreatedDate());
        target.setUpdatedDate(source.getUpdatedDate());
        target.setDocumentName(source.getDocumentName());
        target.setFile(source.getFile());
        target.setDocumentId(source.getDocumentId());

        if (source.getDocumentType() != null) {
            DocumentTypeVO type = new DocumentTypeVO();
            type.setId(source.getDocumentType().getId());
            type.setCode(source.getDocumentType().getCode());
            type.setName(source.getDocumentType().getName());

            target.setDocumentType(type);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentVO toDocumentVO(final Document entity) {
        // TODO verify behavior of toDocumentVO
        return super.toDocumentVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Document loadDocumentFromDocumentVO(DocumentVO documentVO) {
        if (documentVO.getId() == null) {
            return Document.Factory.newInstance();
        } else {
            return this.load(documentVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Document documentVOToEntity(DocumentVO documentVO) {
        // TODO verify behavior of documentVOToEntity
        Document entity = this.loadDocumentFromDocumentVO(documentVO);
        this.documentVOToEntity(documentVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentVOToEntity(
            DocumentVO source,
            Document target,
            boolean copyIfNull) {
        // TODO verify behavior of documentVOToEntity
        super.documentVOToEntity(source, target, copyIfNull);

        if (source.getDocumentType() != null && source.getDocumentType().getId() != null) {

            DocumentType docType = getDocumentTypeDao().load(source.getDocumentType().getId());
            target.setDocumentType(docType);
        }

        // if (source.getLicence() != null && source.getLicence().getId() != null) {
        //     Licence licence = getLicenceDao().load(source.getLicence().getId());
        //     target.setLicence(licence);
        // }

        // if (source.getLicensee() != null && source.getLicensee().getId() != null) {
        //     Licensee licensee = getLicenseeDao().load(source.getLicensee().getId());
        //     target.setLicensee(licensee);
        // }

        // if (source.getComplaint() != null && source.getComplaint().getId() != null) {
        //     Complaint complaint = complaintDao.load(source.getComplaint().getId());
        //     target.setComplaint(complaint);
        // }
    }

    @Override
    protected Collection<Document> handleGetLicenceDocuments(Long licenceId) throws Exception {
        Specification<Document> spec = null;

        // if (licenceId != null) {
        //     spec = DocumentSpecifications.findByLicenceId(licenceId);
        // }

        return documentRepository.findAll(spec);
    }

    @Override
    protected Collection<Document> handleGetLicenseeDocuments(Long licenseeId) throws Exception {
        Specification<Document> spec = null;

        // if (licenseeId != null) {
        //     spec = DocumentSpecifications.findByLicenseeId(licenseeId);
        // }

        return documentRepository.findAll(spec);
    }
}