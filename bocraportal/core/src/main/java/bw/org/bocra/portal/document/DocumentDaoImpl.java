// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.document;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.complaint.Complaint;
import bw.org.bocra.portal.complaint.ComplaintReply;
import bw.org.bocra.portal.complaint.ComplaintReplyDao;
import bw.org.bocra.portal.complaint.ComplaintReplyRepository;
import bw.org.bocra.portal.complaint.ComplaintReplyVO;
import bw.org.bocra.portal.complaint.ComplaintRepository;
import bw.org.bocra.portal.complaint.ComplaintVO;
import bw.org.bocra.portal.document.type.DocumentType;
import bw.org.bocra.portal.document.type.DocumentTypeRepository;
import bw.org.bocra.portal.document.type.DocumentTypeVO;
import bw.org.bocra.portal.licence.LicenceRepository;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholder;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholderRepository;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholderVO;
import bw.org.bocra.portal.shareholder.Shareholder;
import bw.org.bocra.portal.shareholder.ShareholderRepository;
import bw.org.bocra.portal.shareholder.ShareholderVO;

/**
 * @see Document
 */
@Repository("documentDao")
@Transactional
public class DocumentDaoImpl
        extends DocumentDaoBase {

    private final ComplaintRepository complaintRepository;
    private final ComplaintReplyRepository complaintReplyRepository;
    private final ShareholderRepository shareholderRepository;
    private final LicenseeShareholderRepository licenseeShareholderRepository;

    public DocumentDaoImpl(DocumentTypeRepository documentTypeRepository, LicenseeRepository licenseeRepository,
            LicenceRepository licenceRepository, DocumentRepository documentRepository, ComplaintRepository complaintRepository, 
            ComplaintReplyRepository complaintReplyRepository, ShareholderRepository shareholderRepository, LicenseeShareholderRepository licenseeShareholderRepository) {
        
        super(documentTypeRepository, licenseeRepository, licenceRepository, documentRepository);
        this.shareholderRepository = shareholderRepository;
        this.complaintRepository = complaintRepository;
        this.complaintReplyRepository = complaintReplyRepository;
        this.licenseeShareholderRepository = licenseeShareholderRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Document> handleFindByCriteria(DocumentCriteria criteria) {
        // TODO implement public Collection<Document> handleFindByCriteria(String
        // criteria)
        Specification<Document> spec = null;

        if (StringUtils.isNotBlank(criteria.getDocumentName())) {
            spec = BocraportalSpecifications.<Document, String>findByAttributeContainingIgnoreCase("documentName",
                    criteria.getDocumentName());
        }

        if(StringUtils.isNotBlank(criteria.getDocumentId())) {
            spec = BocraportalSpecifications.<Document, String>findByAttribute("documentId",
                criteria.getDocumentId());
        }

        if(StringUtils.isNotBlank(criteria.getExtension())) {
            spec = BocraportalSpecifications.<Document, String>findByAttribute("extension",
                criteria.getExtension());
        }

        if(criteria.getMetadataTarget() != null) {
            spec = BocraportalSpecifications.<Document, DocumentMetadataTarget>findByAttribute("metadataTarget",
                criteria.getMetadataTarget());
        }

        if(criteria.getMetadataTargetId() != null) {
            spec = BocraportalSpecifications.<Document, Long>findByAttribute("metadataTargetId",
                criteria.getMetadataTargetId());
        }

        return documentRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentVO(
            Document source,
            DocumentVO target) {
        // TODO verify behavior of toDocumentVO
        super.toDocumentVO(source, target);

        target.setFile(null);

        if(source.getMetadataTargetId() != null) {
            if(source.getMetadataTarget() == DocumentMetadataTarget.LICENCE) {
    
                target.setMetadataTarget(DocumentMetadataTarget.LICENCE);

                LicenceVO vo = licenceDao.toLicenceVO(licenceDao.get(source.getMetadataTargetId()));
                vo.setDocuments(null);
                vo.getLicenceType().setForms(null);
                vo.getLicenceType().setLicences(null);

                vo.getLicensee().setDocuments(null);
                vo.getLicensee().setForms(null);

                target.setLicence(vo);

            } else if(source.getMetadataTarget() == DocumentMetadataTarget.LICENSEE) {
    
                target.setMetadataTarget(DocumentMetadataTarget.LICENSEE);

                Licensee lic = licenseeRepository.getReferenceById(source.getMetadataTargetId());
                target.setLicensee(getLicenseeVO(lic));

            } else if(source.getMetadataTarget() == DocumentMetadataTarget.SHAREHOLDER) {
    
                target.setMetadataTarget(DocumentMetadataTarget.SHAREHOLDER);
                Shareholder sharer = shareholderRepository.getReferenceById(source.getMetadataTargetId());
                
                target.setShareholder(getShareholderVO(sharer));

            } else if(source.getMetadataTarget() == DocumentMetadataTarget.LICENSEE_SHAREHOLDER) {
    
                target.setMetadataTarget(DocumentMetadataTarget.LICENSEE_SHAREHOLDER);

                LicenseeShareholder holder = licenseeShareholderRepository.getReferenceById(source.getMetadataTargetId());
                LicenseeShareholderVO vo = new LicenseeShareholderVO();
                vo.setId(holder.getId());
                vo.setNumberOfShares(holder.getNumberOfShares());
                vo.setLicensee(getLicenseeVO(holder.getLicensee()));
                vo.setShareholder(getShareholderVO(holder.getShareholder()));
                
                target.setLicenseeShareholder(vo);

            } else if(source.getMetadataTarget() == DocumentMetadataTarget.COMPLAINT) {
    
                target.setMetadataTarget(DocumentMetadataTarget.COMPLAINT);

                Complaint complaint = complaintRepository.getReferenceById(source.getMetadataTargetId());
                ComplaintVO vo = new ComplaintVO();
                vo.setId(complaint.getId());
                vo.setAssignedTo(complaint.getAssignedTo());
                vo.setComplaintId(complaint.getComplaintId());
                vo.setDetails(complaint.getDetails());
                vo.setEmail(complaint.getEmail());
                vo.setFirstName(complaint.getFirstName());
                vo.setSurname(complaint.getSurname());
                vo.setStatus(complaint.getStatus());
                
                target.setComplaint(vo);

            } else if(source.getMetadataTarget() == DocumentMetadataTarget.COMPLAINT_REPLY) {
    
                target.setMetadataTarget(DocumentMetadataTarget.COMPLAINT_REPLY);

                ComplaintReply reply = complaintReplyRepository.getReferenceById(source.getMetadataTargetId());
                ComplaintReplyVO vo = new ComplaintReplyVO();
                vo.setId(reply.getId());
                vo.setReply(reply.getReply());
                vo.setReplyUser(reply.getReplyUser());
                vo.setDate(reply.getDate());
                
                target.setComplaintReply(vo);

            }
        }

        if (source.getDocumentType() != null) {
            DocumentTypeVO type = new DocumentTypeVO();
            type.setId(source.getDocumentType().getId());
            type.setCode(source.getDocumentType().getCode());
            type.setName(source.getDocumentType().getName());

            target.setDocumentType(type);
        }
    }

    private ShareholderVO getShareholderVO(Shareholder holder) {

        ShareholderVO vo = new ShareholderVO();
        vo.setId(holder.getId());
        vo.setAddress(holder.getAddress());
        vo.setName(holder.getName());
        vo.setType(holder.getType());

        return vo;
    }

    private LicenseeVO getLicenseeVO(Licensee licensee) {

        LicenseeVO vo = new LicenseeVO();
        vo.setId(licensee.getId());
        vo.setLicenseeName(licensee.getLicenseeName());
        vo.setUin(licensee.getUin());

        return vo;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentVO toDocumentVO(final Document entity) {
        // TODO verify behavior of toDocumentVO
        return super.toDocumentVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Document loadDocumentFromDocumentVO(DocumentVO documentVO) {
        if (documentVO.getId() == null) {
            return Document.Factory.newInstance();
        } else {
            return this.load(documentVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Document documentVOToEntity(DocumentVO documentVO) {
        // TODO verify behavior of documentVOToEntity
        Document entity = this.loadDocumentFromDocumentVO(documentVO);
        this.documentVOToEntity(documentVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentVOToEntity(
            DocumentVO source,
            Document target,
            boolean copyIfNull) {
        // TODO verify behavior of documentVOToEntity
        super.documentVOToEntity(source, target, copyIfNull);

        if (source.getDocumentType() != null && source.getDocumentType().getId() != null) {

            DocumentType docType = getDocumentTypeDao().load(source.getDocumentType().getId());
            target.setDocumentType(docType);
        }

        if(source.getMetadataTarget() == null || source.getMetadataTargetId() == null) {
            if(source.getLicence() != null && source.getLicence().getId() != null) {

                target.setMetadataTarget(DocumentMetadataTarget.LICENCE);
                target.setMetadataTargetId(source.getLicence().getId());

            } else if(source.getLicensee() != null && source.getLicensee().getId() != null) {

                target.setMetadataTarget(DocumentMetadataTarget.LICENSEE);
                target.setMetadataTargetId(source.getLicensee().getId());

            } else if(source.getLicenseeShareholder() != null && source.getLicenseeShareholder().getId() != null) {

                target.setMetadataTarget(DocumentMetadataTarget.LICENSEE_SHAREHOLDER);
                target.setMetadataTargetId(source.getLicenseeShareholder().getId());

            } else if(source.getShareholder() != null && source.getShareholder().getId() != null) {

                target.setMetadataTarget(DocumentMetadataTarget.SHAREHOLDER);
                target.setMetadataTargetId(source.getShareholder().getId());

            } else if(source.getComplaint() != null && source.getComplaint().getId() != null) {

                target.setMetadataTarget(DocumentMetadataTarget.COMPLAINT);
                target.setMetadataTargetId(source.getComplaint().getId());

            } else if(source.getComplaintReply() != null && source.getComplaintReply().getId() != null) {
                target.setMetadataTarget(DocumentMetadataTarget.COMPLAINT_REPLY);
                target.setMetadataTargetId(source.getComplaintReply().getId());
            }
        }
    }
}