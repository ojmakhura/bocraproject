// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.document;

import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.document.type.DocumentType;
import bw.org.bocra.portal.document.type.DocumentTypeVO;
import bw.org.bocra.portal.licence.Licence;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;

/**
 * @see Document
 */
@Repository("documentDao")
public class DocumentDaoImpl
    extends DocumentDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Document> handleFindByCriteria(String criteria)
    {
        // TODO implement public Collection<Document> handleFindByCriteria(String criteria)
        Specification<Document> spec = null;

        if(StringUtils.isNotBlank(criteria)) {
            spec = DocumentSpecifications.findByDocumentNameContainingIgnoreCase(criteria);
        }

        return documentRepository.findAll(spec);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentVO(
        Document source,
        DocumentVO target)
    {
        // TODO verify behavior of toDocumentVO
        super.toDocumentVO(source, target);

        if(source.getDocumentType() != null) {
            DocumentTypeVO type = new DocumentTypeVO();
            getDocumentTypeDao().toDocumentTypeVO(source.getDocumentType(), type);
            target.setDocumentType(type);
        }

        if(source.getLicence() != null) {
            LicenceVO licence = new LicenceVO();
            getLicenceDao().toLicenceVO(source.getLicence(), licence);
            target.setLicence(licence);
        }

        if(source.getLicensee() != null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentVO toDocumentVO(final Document entity)
    {
        // TODO verify behavior of toDocumentVO
        return super.toDocumentVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Document loadDocumentFromDocumentVO(DocumentVO documentVO)
    {
        if (documentVO.getId() == null)
        {
            return  Document.Factory.newInstance();
        }
        else
        {
            return this.load(documentVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Document documentVOToEntity(DocumentVO documentVO)
    {
        // TODO verify behavior of documentVOToEntity
        Document entity = this.loadDocumentFromDocumentVO(documentVO);
        this.documentVOToEntity(documentVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentVOToEntity(
        DocumentVO source,
        Document target,
        boolean copyIfNull)
    {
        // TODO verify behavior of documentVOToEntity
        super.documentVOToEntity(source, target, copyIfNull);

        if(source.getDocumentType() != null) {

            DocumentType docType = DocumentType.Factory.newInstance();
            getDocumentTypeDao().documentTypeVOToEntity(source.getDocumentType(), docType, copyIfNull);
            target.setDocumentType(docType);
        }

        if(source.getLicence() != null) {
            Licence licence = Licence.Factory.newInstance();
            getLicenceDao().licenceVOToEntity(source.getLicence(), licence, copyIfNull);
            target.setLicence(licence);
        }

        if(source.getLicensee() != null) {
            Licensee licensee = Licensee.Factory.newInstance();
            getLicenseeDao().licenseeVOToEntity(source.getLicensee(), licensee, copyIfNull);
            target.setLicensee(licensee);
        }
    }

    @Override
    protected Collection<Document> handleGetLicenceDocuments(Long licenceId) throws Exception {
        Specification<Document> spec = null;

        if(licenceId != null) {
            spec = DocumentSpecifications.findByLicenceId(licenceId);
        }

        return documentRepository.findAll(spec);
    }

    @Override
    protected Collection<Document> handleGetLicenseeDocuments(Long licenseeId) throws Exception {
        Specification<Document> spec = null;

        if(licenseeId != null) {
            spec = DocumentSpecifications.findByLicenseeId(licenseeId);
        }

        return documentRepository.findAll(spec);
    }
}