// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.complaint;

import bw.org.bocra.portal.licensee.LicenseeRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see Complaint
 */
@Repository("complaintDao")
@Transactional
public class ComplaintDaoImpl
    extends ComplaintDaoBase
{
    
    public ComplaintDaoImpl(
        LicenseeRepository licenseeRepository,
        ComplaintRepository complaintRepository
    ) {

        super(
            licenseeRepository,
            complaintRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toComplainVO(
        Complaint source,
        ComplainVO target)
    {
        // TODO verify behavior of toComplainVO
        super.toComplainVO(source, target);
        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComplainVO toComplainVO(final Complaint entity)
    {
        // TODO verify behavior of toComplainVO
        return super.toComplainVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Complaint loadComplaintFromComplainVO(ComplainVO complainVO)
    {
        // TODO implement loadComplaintFromComplainVO
        throw new UnsupportedOperationException("bw.org.bocra.portal.complaint.loadComplaintFromComplainVO(ComplainVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (complainVO.getId() == null)
        {
            return  Complaint.Factory.newInstance();
        }
        else
        {
            return this.load(complainVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Complaint complainVOToEntity(ComplainVO complainVO)
    {
        // TODO verify behavior of complainVOToEntity
        Complaint entity = this.loadComplaintFromComplainVO(complainVO);
        this.complainVOToEntity(complainVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void complainVOToEntity(
        ComplainVO source,
        Complaint target,
        boolean copyIfNull)
    {
        // TODO verify behavior of complainVOToEntity
        super.complainVOToEntity(source, target, copyIfNull);
    }
}