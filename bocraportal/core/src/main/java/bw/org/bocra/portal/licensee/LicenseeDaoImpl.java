// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 02/11/2022 11:41:52+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.licensee;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.licence.Licence;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licence.type.LicenceType;
import bw.org.bocra.portal.licence.type.LicenceTypeVO;
import bw.org.bocra.portal.sector.Sector;
import bw.org.bocra.portal.sector.SectorVO;

/**
 * @see Licensee
 */
@Repository("licenseeDao")
public class LicenseeDaoImpl
    extends LicenseeDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toLicenseeVO(
        Licensee source,
        LicenseeVO target)
    {
        super.toLicenseeVO(source, target);

        if(CollectionUtils.isNotEmpty(source.getLicences())) {

            target.setLicences(new ArrayList<>());

            for(Licence entity : source.getLicences()) {
                LicenceVO vo = new LicenceVO();
                licenceDao.toLicenceVO(entity, vo);
                target.getLicences().add(vo);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getLicenseeSectors())) {

            target.setSectors(new ArrayList<>());

            for(LicenseeSector entity : source.getLicenseeSectors()) {
                SectorVO vo = new SectorVO();
                sectorDao.toSectorVO(entity.getSector(), vo);
                target.getSectors().add(vo);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getLicenseeForms())) {

            target.setSectors(new ArrayList<>());

            for(LicenseeForm entity : source.getLicenseeForms()) {
                FormVO vo = new FormVO();
                formDao.toFormVO(entity.getForm(), vo);
                target.getForms().add(vo);
            }
        }

        //source.get


        // TODO: read users from keycloak
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenseeVO toLicenseeVO(final Licensee entity)
    {
        // TODO verify behavior of toLicenseeVO
        return super.toLicenseeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Licensee loadLicenseeFromLicenseeVO(LicenseeVO licenseeVO)
    {
        if (licenseeVO.getId() == null)
        {
            return  Licensee.Factory.newInstance();
        }
        else
        {
            return this.load(licenseeVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Licensee licenseeVOToEntity(LicenseeVO licenseeVO)
    {
        // TODO verify behavior of licenseeVOToEntity
        Licensee entity = this.loadLicenseeFromLicenseeVO(licenseeVO);
        this.licenseeVOToEntity(licenseeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void licenseeVOToEntity(
        LicenseeVO source,
        Licensee target,
        boolean copyIfNull)
    {
        // TODO verify behavior of licenseeVOToEntity
        super.licenseeVOToEntity(source, target, copyIfNull);

        if(CollectionUtils.isNotEmpty(source.getLicences())) {
            Collection<Licence> types = new ArrayList<>();
            for(LicenceVO licence : source.getLicences()) {
                if(licence.getId() != null) {
                    Licence entity = licenceRepository.getById(licence.getId());
                    types.add(entity);
                }
            }

            target.setLicences(types);

        }

        // if(CollectionUtils.isNotEmpty(source.getSectors())) {
        //     Collection<Sector> sectors = new ArrayList<>();
        //     for(SectorVO sector : source.getSectors()) {
        //         if(sector.getId() != null) {
        //             Sector entity = sectorDao.load(sector.getId());
        //             sectors.add(entity);
        //         }
        //     }

        //     target.setSectors(sectors);
        // }
    }
}