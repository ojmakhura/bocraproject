// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.licensee.shares;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.document.Document;
import bw.org.bocra.portal.document.DocumentDao;
import bw.org.bocra.portal.document.DocumentMetadataTarget;
import bw.org.bocra.portal.document.DocumentRepository;
import bw.org.bocra.portal.document.DocumentVO;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.shareholder.ShareholderRepository;
import bw.org.bocra.portal.shareholder.ShareholderVO;

import java.util.Collection;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see LicenseeShareholder
 */
@Repository("licenseeShareholderDao")
@Transactional
public class LicenseeShareholderDaoImpl
    extends LicenseeShareholderDaoBase
{
    private DocumentDao documentDao;
    private final DocumentRepository documentRepository;

    public LicenseeShareholderDaoImpl(
        ShareholderRepository shareholderRepository, DocumentRepository documentRepository,
        LicenseeRepository licenseeRepository,
        LicenseeShareholderRepository licenseeShareholderRepository
    ) {

        super(
            shareholderRepository,
            licenseeRepository,
            licenseeShareholderRepository
        );
        this.documentRepository = documentRepository;
    }

    @Autowired
    public void setDocumentDao(@Lazy DocumentDao documentDao) {
        this.documentDao = documentDao;
    }

    public DocumentDao getDocumentDao() {
        return this.documentDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLicenseeShareholderVO(
        LicenseeShareholder source,
        LicenseeShareholderVO target)
    {
        // TODO verify behavior of toLicenseeShareholderVO
        super.toLicenseeShareholderVO(source, target);
        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(source.getLicensee() != null && source.getLicensee().getId() != null) {
            LicenseeVO licensee = new LicenseeVO();
            licensee.setId(source.getLicensee().getId());
            licensee.setUin(source.getLicensee().getUin());
            licensee.setLicenseeName(source.getLicensee().getLicenseeName());
            licensee.setCreatedBy(source.getLicensee().getCreatedBy());
            licensee.setUpdatedBy(source.getLicensee().getUpdatedBy());
            licensee.setCreatedDate(source.getLicensee().getCreatedDate());
            licensee.setUpdatedDate(source.getLicensee().getUpdatedDate());

            target.setLicensee(licensee);
        }
        
        // WARNING! No conversion for target.shareholder (can't convert source.getShareholder():bw.org.bocra.portal.shareholder.Shareholder to bw.org.bocra.portal.shareholder.ShareholderVO
        if(source.getShareholder() != null && source.getShareholder().getId() != null) {
            ShareholderVO shareholder = new ShareholderVO();

            shareholder.setId(source.getShareholder().getId());
            shareholder.setAddress(source.getShareholder().getAddress());
            shareholder.setName(source.getShareholder().getName());
            shareholder.setShareholderId(source.getShareholder().getShareholderId());
            shareholder.setType(source.getShareholder().getType());
            shareholder.setCreatedBy(source.getShareholder().getCreatedBy());
            shareholder.setUpdatedBy(source.getShareholder().getUpdatedBy());
            shareholder.setCreatedDate(source.getShareholder().getCreatedDate());
            shareholder.setUpdatedDate(source.getShareholder().getUpdatedDate());

            target.setShareholder(shareholder);
        }

        Specification<Document> specs = BocraportalSpecifications.<Document, DocumentMetadataTarget>findByAttribute("metadataTarget", DocumentMetadataTarget.LICENSEE_SHAREHOLDER)
                                            .and(BocraportalSpecifications.<Document, Long>findByAttribute("metadataTargetId", source.getId()));

        Collection<Document> entities = documentRepository.findAll(specs, Sort.by("id").ascending());
        if(CollectionUtils.isNotEmpty(entities)) {
            Collection<DocumentVO> docs = entities.stream().map(d -> {
                DocumentVO dv = new DocumentVO();
                dv.setId(d.getId());
                dv.setContentType(d.getContentType());
                dv.setDocumentId(d.getDocumentId());
                dv.setDocumentName(d.getDocumentName());
                dv.setExtension(d.getExtension());
                dv.setMetadataTargetId(d.getMetadataTargetId());
                dv.setSize(d.getSize());
                return dv;
            }).collect(Collectors.toSet());
            target.setDocuments(docs);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenseeShareholderVO toLicenseeShareholderVO(final LicenseeShareholder entity)
    {
        // TODO verify behavior of toLicenseeShareholderVO
        return super.toLicenseeShareholderVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LicenseeShareholder loadLicenseeShareholderFromLicenseeShareholderVO(LicenseeShareholderVO licenseeShareholderVO)
    {
        if (licenseeShareholderVO.getId() == null)
        {
            return  LicenseeShareholder.Factory.newInstance();
        }
        else
        {
            return this.load(licenseeShareholderVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public LicenseeShareholder licenseeShareholderVOToEntity(LicenseeShareholderVO licenseeShareholderVO)
    {
        // TODO verify behavior of licenseeShareholderVOToEntity
        LicenseeShareholder entity = this.loadLicenseeShareholderFromLicenseeShareholderVO(licenseeShareholderVO);
        this.licenseeShareholderVOToEntity(licenseeShareholderVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void licenseeShareholderVOToEntity(
        LicenseeShareholderVO source,
        LicenseeShareholder target,
        boolean copyIfNull)
    {
        // TODO verify behavior of licenseeShareholderVOToEntity
        super.licenseeShareholderVOToEntity(source, target, copyIfNull);

        if(source.getLicensee() != null && source.getLicensee().getId() != null) {
            target.setLicensee(licenseeRepository.getReferenceById(source.getLicensee().getId()));
        }  else {
            throw new IllegalArgumentException(
                "LicenseeShareholderDao.licenseeShareholderVOToEntity - 'licensee' or its id can not be null"
            );
        }

        if(source.getShareholder() != null && source.getShareholder().getId() != null) {
            target.setShareholder(shareholderRepository.getReferenceById(source.getShareholder().getId()));
        } else {
            throw new IllegalArgumentException(
                "LicenseeShareholderDao.licenseeShareholderVOToEntity - 'shareholder' or its id can not be null"
            );
        }
    }
}