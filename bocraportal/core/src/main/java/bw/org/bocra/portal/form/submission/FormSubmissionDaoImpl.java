// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.submission;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.form.activation.FormActivationRepository;
import bw.org.bocra.portal.form.section.FormSection;
import bw.org.bocra.portal.form.submission.data.DataField;
import bw.org.bocra.portal.form.submission.data.DataFieldRepository;
import bw.org.bocra.portal.form.submission.data.DataFieldSectionVO;
import bw.org.bocra.portal.form.submission.data.DataFieldVO;
import bw.org.bocra.portal.form.submission.note.NoteRepository;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.Period;
import bw.org.bocra.portal.period.PeriodRepository;
import bw.org.bocra.portal.period.PeriodVO;

/**
 * @see FormSubmission
 */
@Repository("formSubmissionDao")
@Transactional
public class FormSubmissionDaoImpl
    extends FormSubmissionDaoBase
{

    public FormSubmissionDaoImpl(FormRepository formRepository, PeriodRepository periodRepository,
            DataFieldRepository dataFieldRepository, LicenseeRepository licenseeRepository,
            NoteRepository noteRepository, FormActivationRepository formActivationRepository,
            FormSubmissionRepository formSubmissionRepository) {

        super(formRepository, periodRepository, dataFieldRepository, licenseeRepository, noteRepository,
                formActivationRepository, formSubmissionRepository);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toFormSubmissionVO(
        FormSubmission source,
        FormSubmissionVO target)
    {
        // TODO verify behavior of toFormSubmissionVO
        super.toFormSubmissionVO(source, target);

        if(source.getForm() != null) {
            Form form = source.getForm();
            FormVO formVO = getFormDao().toFormVO(form);
            target.setForm(formVO);
            
            if(CollectionUtils.isNotEmpty(source.getDataFields())) {
                
                Map<DataFieldSectionVO, List<DataFieldVO>> sectioned = new HashMap<>();
                for (DataField dataField : source.getDataFields()) {
                    
                    DataFieldVO data = new DataFieldVO();
                    getDataFieldDao().toDataFieldVO(dataField, data);

                    FormSection section = dataField.getFormField().getFormSection();

                    DataFieldSectionVO sec = new DataFieldSectionVO();
                    sec.setPosition(section.getPosition());
                    sec.setSectionLabel(section.getSectionLabel());
                    sec.setSectionId(section.getSectionId());

                    if(!sectioned.containsKey(sec)) {
                        sectioned.put(sec, new ArrayList<>());
                    }

                    sectioned.get(sec).add(data);
                }
                
                Collection<DataFieldSectionVO> sections = new ArrayList<>();
                
                for(Map.Entry<DataFieldSectionVO, List<DataFieldVO>> entry : sectioned.entrySet()) {
                    DataFieldSectionVO sec = entry.getKey();
                    sec.setDataFields(entry.getValue());
                    // Collections.sort((List<DataFieldVO>) sec.getDataFields(), (d1, d2) -> {
                    //     return (int) (d1.getFormField().getId() - d2.getFormField().getId());
                    // });
                    sections.add(sec);
                }

                target.setSections(sections);
            }
        }

        if(source.getLicensee() != null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);
            target.setLicensee(licensee);
        }

        if(source.getPeriod() != null) {
            PeriodVO period = new PeriodVO();
            getPeriodDao().toPeriodVO(source.getPeriod(), period);
            target.setPeriod(period);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormSubmissionVO toFormSubmissionVO(final FormSubmission entity)
    {
        // TODO verify behavior of toFormSubmissionVO
        return super.toFormSubmissionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private FormSubmission loadFormSubmissionFromFormSubmissionVO(FormSubmissionVO formSubmissionVO)
    {
        if (formSubmissionVO.getId() == null)
        {
            return  FormSubmission.Factory.newInstance();
        }
        else
        {
            return this.load(formSubmissionVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public FormSubmission formSubmissionVOToEntity(FormSubmissionVO formSubmissionVO)
    {
        // TODO verify behavior of formSubmissionVOToEntity
        FormSubmission entity = this.loadFormSubmissionFromFormSubmissionVO(formSubmissionVO);
        this.formSubmissionVOToEntity(formSubmissionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void formSubmissionVOToEntity(
        FormSubmissionVO source,
        FormSubmission target,
        boolean copyIfNull)
    {
        // TODO verify behavior of formSubmissionVOToEntity
        super.formSubmissionVOToEntity(source, target, copyIfNull);

        if(source.getForm() != null && source.getForm().getId() != null) {
            Form form = formDao.load(source.getForm().getId());
            target.setForm(form);
        } else {
            throw new IllegalArgumentException(
                "FormSubmissionDao.formSubmissionVOToEntity - 'form' or its id can not be null"
            );
        }

        if(source.getLicensee() != null && source.getLicensee().getId() != null) {
            Licensee licensee = getLicenseeDao().load(source.getLicensee().getId());
            target.setLicensee(licensee);
        } else {
            throw new IllegalArgumentException(
                "FormSubmissionDao.formSubmissionVOToEntity - 'licensee' or its id can not be null"
            );
        }

        if(source.getPeriod() != null && source.getPeriod().getId() != null) {

            Period period = getPeriodDao().load(source.getPeriod().getId());
            target.setPeriod(period);
        } else {
            throw new IllegalArgumentException(
                "FormSubmissionDao.formSubmissionVOToEntity - 'period' or its id can not be null"
            );
        }

        if(source.getPeriod() != null && source.getPeriod().getId() != null) {

            Period period = getPeriodDao().load(source.getPeriod().getId());
            target.setPeriod(period);
        } else {
            throw new IllegalArgumentException(
                "FormSubmissionDao.formSubmissionVOToEntity - 'period' or its id can not be null"
            );
        }

        target.setDataFields(new ArrayList<>());

        for(DataFieldSectionVO section : source.getSections()) {
            for (DataFieldVO dataField : section.getDataFields()) {
                if(dataField.getId() != null){
                    DataField data = getDataFieldDao().load(dataField.getId());
                    data.setValue(dataField.getValue());
                    //getDataFieldDao().update(data);
                    target.getDataFields().add(data);
                } else {
                    DataField data = DataField.Factory.newInstance();
                    getDataFieldDao().dataFieldVOToEntity(dataField, data, copyIfNull);
                    //data = getDataFieldRepository().save(data);
                    target.getDataFields().add(data);
                }
            }
        }
    }

    @Override
    protected Collection<FormSubmission> handleFindByCriteria(FormSubmissionCriteria criteria) throws Exception {
        Specification<FormSubmission> specifications = null;
        
        if(criteria.getStartDate() != null) {
            specifications = BocraportalSpecifications.<FormSubmission, LocalDateTime>findByAttributeGreaterThanEqual("submissionDate", criteria.getStartDate().atStartOfDay());
        }

        if(criteria.getEndDate() != null) {
            LocalDateTime end = criteria.getEndDate().plusDays(1).atStartOfDay();
            if(specifications == null) {
                specifications = BocraportalSpecifications.<FormSubmission, LocalDateTime>findByAttributeLessThan("submissionDate", end);
            } else {
                specifications = specifications.and(BocraportalSpecifications.<FormSubmission, LocalDateTime>findByAttributeLessThan("submissionDate", end));
            }
        }

        if(criteria.getForm() != null) {
            if(specifications == null) {
                specifications = FormSubmissionSpecifications.findByFormId(criteria.getForm());
            } else {
                specifications = specifications.and(FormSubmissionSpecifications.findByFormId(criteria.getForm()));
            }
        }

        if(criteria.getSubmissionStatus() != null) {
            if(specifications == null) {
                specifications = BocraportalSpecifications.<FormSubmission, FormSubmissionStatus>findByAttribute("submissionStatus", criteria.getSubmissionStatus());
            } else {
                specifications = specifications.and(BocraportalSpecifications.<FormSubmission, FormSubmissionStatus>findByAttribute("submissionStatus", criteria.getSubmissionStatus()));
            }
        }

        if(criteria.getLicenseeId() != null) {
            if(specifications == null) {
                specifications = FormSubmissionSpecifications.findByLicenseeId(criteria.getLicenseeId());
            } else {
                specifications = specifications.and(FormSubmissionSpecifications.findByLicenseeId(criteria.getLicenseeId()));
            }
        }

        if(StringUtils.isNotBlank(criteria.getSubmittedBy())) {

            Specification<FormSubmission> tmp = BocraportalSpecifications.<FormSubmission, String>findByAttribute("submittedBy", criteria.getSubmittedBy());

            if(specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(tmp);
            }
        }

        if(StringUtils.isNotBlank(criteria.getLicenseeName())) {
            if(specifications == null) {
                specifications = BocraportalSpecifications.findByJoinAttributeContainingIgnoreCase("licensee", "licenseeName", criteria.getLicenseeName());
            } else {
                specifications = specifications.and(BocraportalSpecifications.findByJoinAttributeContainingIgnoreCase("licensee", "licenseeName", criteria.getLicenseeName()));
            }
        }

        if(criteria.getPeriodStartDate() != null) {

            Specification<FormSubmission> tmp = BocraportalSpecifications.<FormSubmission, Period, LocalDateTime>findByJoinAttributeLessThan("period", "startDate", criteria.getPeriodStartDate());

            if(specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(
                    tmp
                );
            }
        }

        if(criteria.getPeriodEndDate() != null) {

            Specification<FormSubmission> tmp = BocraportalSpecifications.<FormSubmission, Period, LocalDateTime>findByJoinAttributeLessThan("period", "endDate", criteria.getPeriodEndDate());

            if(specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(
                    tmp
                );
            }
        }

        if(CollectionUtils.isNotEmpty(criteria.getPeriodIds())) {

            Specification<FormSubmission> tmp = BocraportalSpecifications.findByJoinAttributeIn("period", "id", criteria.getPeriodIds());

            if(specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(tmp);
            }
        }

        return formSubmissionRepository.findAll(specifications, Sort.by(Direction.ASC, "submissionDate"));
    }
}