// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.submission;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormEntryType;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.form.activation.FormActivation;
import bw.org.bocra.portal.form.activation.FormActivationRepository;
import bw.org.bocra.portal.form.field.FormField;
import bw.org.bocra.portal.form.section.FormSection;
import bw.org.bocra.portal.form.submission.data.DataField;
import bw.org.bocra.portal.form.submission.data.DataFieldRepository;
import bw.org.bocra.portal.form.submission.data.DataFieldSectionVO;
import bw.org.bocra.portal.form.submission.data.DataFieldVO;
import bw.org.bocra.portal.form.submission.data.SubmissionDataRepository;
import bw.org.bocra.portal.form.submission.note.NoteRepository;
import bw.org.bocra.portal.form.submission.note.NoteVO;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.Period;
import bw.org.bocra.portal.period.PeriodRepository;
import bw.org.bocra.portal.period.PeriodVO;

/**
 * @see FormSubmission
 */
@Repository("formSubmissionDao")
// @Transactional
public class FormSubmissionDaoImpl
        extends FormSubmissionDaoBase {

    private final SubmissionDataRepository submissionDataRepository;

    public FormSubmissionDaoImpl(FormRepository formRepository, PeriodRepository periodRepository,
            DataFieldRepository dataFieldRepository, LicenseeRepository licenseeRepository,
            NoteRepository noteRepository, FormActivationRepository formActivationRepository,
            FormSubmissionRepository formSubmissionRepository, SubmissionDataRepository submissionDataRepository) {

        super(formRepository, periodRepository, dataFieldRepository, licenseeRepository, noteRepository,
                formActivationRepository, formSubmissionRepository);

        this.submissionDataRepository = submissionDataRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toFormSubmissionVO(
            FormSubmission source,
            FormSubmissionVO target) {
        // TODO verify behavior of toFormSubmissionVO
        super.toFormSubmissionVO(source, target);

        if (source.getForm() != null) {
            Form form = source.getForm();
            FormVO formVO = getFormDao().toFormVO(form);
            target.setForm(formVO);

            if (CollectionUtils.isNotEmpty(source.getDataFields())) {

                Collection<DataField> fields = source.getForm().getEntryType() == FormEntryType.SINGLE
                        ? source.getDataFields()
                        : submissionDataRepository.findByFormSubmissionIdOrderByRowAscFormFieldPositionAsc(source.getId(),
                                PageRequest.of(0, 10 * source.getForm().getFormFields().size())).getContent();

                if(source.getForm().getEntryType() == FormEntryType.SINGLE) {

                    Collection<DataFieldSectionVO> sections = new ArrayList<>();

                    Map<DataFieldSectionVO, List<DataFieldVO>> sectioned = new HashMap<>();
                    for (DataField dataField : fields) {
    
                        DataFieldVO data = new DataFieldVO();
                        getDataFieldDao().toDataFieldVO(dataField, data);
    
                        FormSection section = dataField.getFormField().getFormSection();
    
                        DataFieldSectionVO sec = new DataFieldSectionVO();
                        sec.setPosition(section.getPosition());
                        sec.setSectionLabel(section.getSectionLabel());
                        sec.setSectionId(section.getSectionId());
    
                        if (!sectioned.containsKey(sec)) {
                            sectioned.put(sec, new ArrayList<>());
                        }
    
                        sectioned.get(sec).add(data);
                    }

                    for (Map.Entry<DataFieldSectionVO, List<DataFieldVO>> entry : sectioned.entrySet()) {
                        DataFieldSectionVO sec = entry.getKey();
                        sec.setDataFields(entry.getValue());
                        sections.add(sec);
                    }
                    
                    target.setSections(sections);

                } else {
                    if(target.getDataFields() == null) {
                        target.setDataFields(new ArrayList<>());
                    }

                    fields.forEach(field -> {
                        DataFieldVO data = new DataFieldVO();
                        getDataFieldDao().toDataFieldVO(field, data);
                        target.getDataFields().add(data);
                    });
                }
            }
        }

        if (source.getLicensee() != null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);
            target.setLicensee(licensee);
        }

        if (source.getPeriod() != null) {
            PeriodVO period = new PeriodVO();
            getPeriodDao().toPeriodVO(source.getPeriod(), period);
            target.setPeriod(period);
        }

        if (source.getFormActivation() != null) {
            target.setFormActivation(getFormActivationDao().toFormActivationVO(source.getFormActivation()));

            target.getFormActivation().setForm(null);
            target.getFormActivation().setPeriod(null);
        }

        if (CollectionUtils.isNotEmpty(source.getNotes())) {
            List<NoteVO> notes = (List<NoteVO>) noteDao.toNoteVOCollection(source.getNotes());
            // sort by created date
            Collections.<NoteVO>sort(notes, new Comparator<NoteVO>() {
                @Override
                public int compare(NoteVO o1, NoteVO o2) {
                    return o2.getCreatedDate().compareTo(o1.getCreatedDate());
                }
            });
            target.setNotes(notes);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormSubmissionVO toFormSubmissionVO(final FormSubmission entity) {
        // TODO verify behavior of toFormSubmissionVO
        return super.toFormSubmissionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private FormSubmission loadFormSubmissionFromFormSubmissionVO(FormSubmissionVO formSubmissionVO) {
        if (formSubmissionVO.getId() == null) {
            return FormSubmission.Factory.newInstance();
        } else {
            return this.load(formSubmissionVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public FormSubmission formSubmissionVOToEntity(FormSubmissionVO formSubmissionVO) {
        // TODO verify behavior of formSubmissionVOToEntity
        FormSubmission entity = this.loadFormSubmissionFromFormSubmissionVO(formSubmissionVO);
        this.formSubmissionVOToEntity(formSubmissionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void formSubmissionVOToEntity(
            FormSubmissionVO source,
            FormSubmission target,
            boolean copyIfNull) {
        // TODO verify behavior of formSubmissionVOToEntity
        super.formSubmissionVOToEntity(source, target, copyIfNull);

        if (source.getForm() != null && source.getForm().getId() != null) {
            Form form = formDao.load(source.getForm().getId());
            target.setForm(form);
        } else {
            throw new IllegalArgumentException(
                    "FormSubmissionDao.formSubmissionVOToEntity - 'form' or its id can not be null");
        }

        if (source.getLicensee() != null && source.getLicensee().getId() != null) {
            Licensee licensee = getLicenseeDao().load(source.getLicensee().getId());
            target.setLicensee(licensee);
        } else {
            throw new IllegalArgumentException(
                    "FormSubmissionDao.formSubmissionVOToEntity - 'licensee' or its id can not be null");
        }

        if (source.getPeriod() != null && source.getPeriod().getId() != null) {

            Period period = getPeriodDao().load(source.getPeriod().getId());
            target.setPeriod(period);
        } else {
            throw new IllegalArgumentException(
                    "FormSubmissionDao.formSubmissionVOToEntity - 'period' or its id can not be null");
        }

        if (source.getFormActivation() != null && source.getFormActivation().getId() != null) {

            FormActivation activation = formActivationDao.load(source.getFormActivation().getId());
            target.setFormActivation(activation);
        } else {
            throw new IllegalArgumentException(
                    "FormSubmissionDao.formSubmissionVOToEntity - 'formActivation' or its id can not be null");
        }

        target.setDataFields(new ArrayList<>());

        for (DataFieldSectionVO section : source.getSections()) {
            for (DataFieldVO dataField : section.getDataFields()) {
                if (dataField.getId() != null) {
                    DataField data = getDataFieldDao().load(dataField.getId());
                    data.setValue(dataField.getValue());
                    // getDataFieldDao().update(data);
                    target.getDataFields().add(data);
                } else {
                    DataField data = DataField.Factory.newInstance();
                    getDataFieldDao().dataFieldVOToEntity(dataField, data, copyIfNull);
                    // data = getDataFieldRepository().save(data);
                    target.getDataFields().add(data);
                }
            }
        }
    }

    @Override
    protected Collection<FormSubmission> handleFindByCriteria(FormSubmissionCriteria criteria) throws Exception {
        Specification<FormSubmission> specifications = null;

        if (criteria.getStartDate() != null) {
            specifications = BocraportalSpecifications
                    .<FormSubmission, Period, LocalDate>findByJoinAttributeGreaterThan("period", "periodStart",
                            criteria.getStartDate().minusDays(1));
        }

        if (criteria.getEndDate() != null) {
            LocalDate end = criteria.getEndDate().plusDays(1);
            if (specifications == null) {
                specifications = BocraportalSpecifications
                        .<FormSubmission, Period, LocalDate>findByJoinAttributeLessThan("period", "periodEnd", end);
            } else {
                specifications = specifications.and(BocraportalSpecifications
                        .<FormSubmission, Period, LocalDate>findByJoinAttributeLessThan("period", "periodEnd", end));
            }
        }

        if (criteria.getForm() != null) {
            if (specifications == null) {
                specifications = FormSubmissionSpecifications.findByFormId(criteria.getForm());
            } else {
                specifications = specifications.and(FormSubmissionSpecifications.findByFormId(criteria.getForm()));
            }
        }

        if (criteria.getSubmissionStatus() != null) {
            if (specifications == null) {
                specifications = BocraportalSpecifications.<FormSubmission, FormSubmissionStatus>findByAttribute(
                        "submissionStatus", criteria.getSubmissionStatus());
            } else {
                specifications = specifications
                        .and(BocraportalSpecifications.<FormSubmission, FormSubmissionStatus>findByAttribute(
                                "submissionStatus", criteria.getSubmissionStatus()));
            }
        }

        if (criteria.getLicenseeId() != null) {
            if (specifications == null) {
                specifications = FormSubmissionSpecifications.findByLicenseeId(criteria.getLicenseeId());
            } else {
                specifications = specifications
                        .and(FormSubmissionSpecifications.findByLicenseeId(criteria.getLicenseeId()));
            }
        }

        if (StringUtils.isNotBlank(criteria.getSubmittedBy())) {

            Specification<FormSubmission> tmp = BocraportalSpecifications
                    .<FormSubmission, String>findByAttribute("submittedBy", criteria.getSubmittedBy());

            if (specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(tmp);
            }
        }

        if (StringUtils.isNotBlank(criteria.getLicenseeName())) {
            if (specifications == null) {
                specifications = BocraportalSpecifications.findByJoinAttributeContainingIgnoreCase("licensee",
                        "licenseeName", criteria.getLicenseeName());
            } else {
                specifications = specifications.and(BocraportalSpecifications.findByJoinAttributeContainingIgnoreCase(
                        "licensee", "licenseeName", criteria.getLicenseeName()));
            }
        }

        if (CollectionUtils.isNotEmpty(criteria.getPeriodIds())) {

            Specification<FormSubmission> tmp = BocraportalSpecifications.findByJoinAttributeIn("period", "id",
                    criteria.getPeriodIds());

            if (specifications == null) {
                specifications = tmp;
            } else {
                specifications = specifications.and(tmp);
            }
        }

        Specification<FormSubmission> tmp = BocraportalSpecifications.findByJoinAttributeIsEmpty("form", "roles");

        if (CollectionUtils.isNotEmpty(criteria.getRoles())) {

            for (String role : criteria.getRoles()) {
                tmp = tmp.or(BocraportalSpecifications.findByJoinAttributeIsMember("form", "roles", role));
            }
        } else {
            tmp = tmp.or(BocraportalSpecifications.findByJoinAttributeIsNotEmpty("form", "roles"));
        }

        if (specifications == null) {
            specifications = tmp;
        } else {
            specifications = specifications.and(tmp);
        }

        return formSubmissionRepository.findAll(specifications, Sort.by(Direction.ASC, "submissionDate"));
    }

    @Override
    protected Collection<FormSubmission> handleCreateNewSubmissions(Set<Long> licenseeIds, Long activationId)
            throws Exception {

        FormActivation activation = formActivationRepository.getReferenceById(activationId);

        Collection<FormSubmission> submissions = new ArrayList<>();

        for (Long licenseeId : licenseeIds) {

            Licensee licensee = licenseeRepository.getReferenceById(licenseeId);

            FormSubmission submission = FormSubmission.Factory.newInstance();
            submission.setCreatedBy(activation.getCreatedBy());
            submission.setCreatedDate(LocalDateTime.now());
            submission.setForm(activation.getForm());
            submission.setLicensee(licensee);
            submission.setFormActivation(activation);
            submission.setPeriod(activation.getPeriod());
            submission.setSubmissionStatus(FormSubmissionStatus.NEW);

            submission.setExpectedSubmissionDate(activation.getActivationDeadline());

            /**
             * If the for requires single entry, the we create the data fields
             */
            if (activation.getForm().getEntryType() == FormEntryType.SINGLE) {
                for (FormField field : activation.getForm().getFormFields()) {
                    DataField dataField = DataField.Factory.newInstance();
                    dataField.setFormSubmission(submission);
                    dataField.setFormField(field);
                    dataField.setValue(field.getDefaultValue());
                    dataField.setRow(0);

                    submission.getDataFields().add(dataField);
                }
            }
            submission = formSubmissionRepository.saveAndFlush(submission);

            submissions.add(submission);
        }

        return submissions;
    }
}