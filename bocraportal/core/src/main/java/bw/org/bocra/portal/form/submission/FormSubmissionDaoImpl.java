// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.submission;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.form.submission.data.FormData;
import bw.org.bocra.portal.form.submission.data.FormDataVO;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.Period;
import bw.org.bocra.portal.period.PeriodVO;

/**
 * @see FormSubmission
 */
@Repository("formSubmissionDao")
public class FormSubmissionDaoImpl
    extends FormSubmissionDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toFormSubmissionVO(
        FormSubmission source,
        FormSubmissionVO target)
    {
        // TODO verify behavior of toFormSubmissionVO
        super.toFormSubmissionVO(source, target);

        if(source.getForm() != null) {
            FormVO form = new FormVO();
            getFormDao().toFormVO(source.getForm(), form);
            target.setForm(form);
        }

        if(source.getLicensee() != null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);
            target.setLicensee(licensee);
        }

        if(source.getPeriod() != null) {
            PeriodVO period = new PeriodVO();
            getPeriodDao().toPeriodVO(source.getPeriod(), period);
            target.setPeriod(period);
        }

        if(CollectionUtils.isNotEmpty(source.getFormDatas())) {
            Collection<FormDataVO> datas = new HashSet<>();
            for (FormData formData : source.getFormDatas()) {
                FormDataVO data = new FormDataVO();
                getFormDataDao().toFormDataVO(formData, data);
                datas.add(data);
            }
            //target.setfor
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormSubmissionVO toFormSubmissionVO(final FormSubmission entity)
    {
        // TODO verify behavior of toFormSubmissionVO
        return super.toFormSubmissionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private FormSubmission loadFormSubmissionFromFormSubmissionVO(FormSubmissionVO formSubmissionVO)
    {
        if (formSubmissionVO.getId() == null)
        {
            return  FormSubmission.Factory.newInstance();
        }
        else
        {
            return this.load(formSubmissionVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public FormSubmission formSubmissionVOToEntity(FormSubmissionVO formSubmissionVO)
    {
        // TODO verify behavior of formSubmissionVOToEntity
        FormSubmission entity = this.loadFormSubmissionFromFormSubmissionVO(formSubmissionVO);
        this.formSubmissionVOToEntity(formSubmissionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void formSubmissionVOToEntity(
        FormSubmissionVO source,
        FormSubmission target,
        boolean copyIfNull)
    {
        // TODO verify behavior of formSubmissionVOToEntity
        super.formSubmissionVOToEntity(source, target, copyIfNull);

        if(source.getForm() != null) {
            Form form = Form.Factory.newInstance();
            getFormDao().formVOToEntity(source.getForm(), form, copyIfNull);
            target.setForm(form);
        }

        if(source.getLicensee() != null) {
            Licensee licensee = Licensee.Factory.newInstance();
            getLicenseeDao().licenseeVOToEntity(source.getLicensee(), licensee, copyIfNull);
            target.setLicensee(licensee);
        }

        if(source.getPeriod() != null) {
            Period period = Period.Factory.newInstance();
            getPeriodDao().periodVOToEntity(source.getPeriod(), period, copyIfNull);
            target.setPeriod(period);
        }

        if(CollectionUtils.isNotEmpty(source.getFormDatas())) {
            Collection<FormData> datas = new HashSet<>();
            for (FormDataVO formData : source.getFormDatas()) {
                FormData data = FormData.Factory.newInstance();
                getFormDataDao().formDataVOToEntity(formData, data, copyIfNull);
                datas.add(data);
            }
            target.setFormDatas(datas);
        }
    }
}