// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.shareholder;

import bw.org.bocra.portal.document.DocumentRepository;
import bw.org.bocra.portal.document.DocumentVO;
import bw.org.bocra.portal.BocraportalSpecifications;
import bw.org.bocra.portal.document.Document;
import bw.org.bocra.portal.document.DocumentDao;
import bw.org.bocra.portal.document.DocumentMetadataTarget;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholderRepository;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholderVO;
import bw.org.bocra.portal.licensee.shares.LicenseeShareholder;

import java.util.ArrayList;
import java.util.Collection;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @see Shareholder
 */
@Repository("shareholderDao")
@Transactional
public class ShareholderDaoImpl
        extends ShareholderDaoBase {

    private DocumentRepository documentRepository;
    private DocumentDao documentDao;

    public ShareholderDaoImpl(
            LicenseeShareholderRepository licenseeShareholderRepository,
            ShareholderRepository shareholderRepository, DocumentRepository documentRepository,
            DocumentDao documentDao) {

        super(
                licenseeShareholderRepository,
                shareholderRepository);

        this.documentRepository = documentRepository;
        this.documentDao = documentDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toShareholderVO(
            Shareholder source,
            ShareholderVO target) {
        // TODO verify behavior of toShareholderVO
        super.toShareholderVO(source, target);
        
        Specification<Document> specs = BocraportalSpecifications.<Document, DocumentMetadataTarget>findByAttribute("metadataTarget", DocumentMetadataTarget.SHAREHOLDER)
                                            .and(BocraportalSpecifications.<Document, Long>findByAttribute("metadataTargetId", source.getId()));

        Collection<Document> entities = documentRepository.findAll(specs, Sort.by("id").ascending());
        if(CollectionUtils.isNotEmpty(entities)) {
            Collection<DocumentVO> docs = entities.stream().map(d -> {
                DocumentVO dv = new DocumentVO();
                dv.setId(d.getId());
                dv.setContentType(d.getContentType());
                dv.setDocumentId(d.getDocumentId());
                dv.setDocumentName(d.getDocumentName());
                dv.setExtension(d.getExtension());
                dv.setMetadataTargetId(d.getMetadataTargetId());
                dv.setSize(d.getSize());
                return dv;
            }).collect(Collectors.toSet());
            target.setDocuments(docs);
        }

        target.setShares(new ArrayList<>());
        for (LicenseeShareholder holder : source.getLicenseeShareholders()) {
            LicenseeShareholderVO ls = new LicenseeShareholderVO();
            ls.setId(holder.getId());

            ls.setLicensee(new LicenseeVO());
            ls.getLicensee().setId(holder.getLicensee().getId());
            ls.getLicensee().setUin(holder.getLicensee().getUin());
            ls.getLicensee().setLicenseeName(holder.getLicensee().getLicenseeName());
            ls.setNumberOfShares(holder.getNumberOfShares());
            
            Specification<Document> lsSpecs = BocraportalSpecifications.<Document, DocumentMetadataTarget>findByAttribute("metadataTarget", DocumentMetadataTarget.LICENSEE_SHAREHOLDER)
                                            .and(BocraportalSpecifications.<Document, Long>findByAttribute("metadataTargetId", holder.getId()));

            Collection<Document> dEntities = documentRepository.findAll(lsSpecs, Sort.by("id").ascending());
            if (CollectionUtils.isNotEmpty(dEntities)) {

                Collection<DocumentVO> docs = dEntities.stream().map(d -> {
                    DocumentVO dv = new DocumentVO();
                    dv.setId(d.getId());
                    dv.setContentType(d.getContentType());
                    dv.setDocumentId(d.getDocumentId());
                    dv.setDocumentName(d.getDocumentName());
                    dv.setExtension(d.getExtension());
                    dv.setMetadataTargetId(d.getMetadataTargetId());
                    dv.setSize(d.getSize());
                    return dv;
                }).collect(Collectors.toSet());
                ls.setDocuments(docs);
            }

            target.getShares().add(ls);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShareholderVO toShareholderVO(final Shareholder entity) {
        // TODO verify behavior of toShareholderVO
        return super.toShareholderVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value
     * object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Shareholder loadShareholderFromShareholderVO(ShareholderVO shareholderVO) {
        // TODO implement loadShareholderFromShareholderVO
        // throw new UnsupportedOperationException(
        // "bw.org.bocra.portal.shareholder.loadShareholderFromShareholderVO(ShareholderVO)
        // not yet implemented.");

        if (shareholderVO.getId() == null) {
            return Shareholder.Factory.newInstance();
        } else {
            return this.load(shareholderVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Shareholder shareholderVOToEntity(ShareholderVO shareholderVO) {
        // TODO verify behavior of shareholderVOToEntity
        Shareholder entity = this.loadShareholderFromShareholderVO(shareholderVO);
        this.shareholderVOToEntity(shareholderVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void shareholderVOToEntity(
            ShareholderVO source,
            Shareholder target,
            boolean copyIfNull) {
        // TODO verify behavior of shareholderVOToEntity
        super.shareholderVOToEntity(source, target, copyIfNull);
        
    }
}