// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.section;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

import bw.org.bocra.portal.form.Form;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.form.field.FormField;
import bw.org.bocra.portal.form.field.FormFieldVO;

/**
 * @see FormSection
 */
@Repository("formSectionDao")
public class FormSectionDaoImpl
    extends FormSectionDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toFormSectionVO(
        FormSection source,
        FormSectionVO target)
    {
        // TODO verify behavior of toFormSectionVO
        super.toFormSectionVO(source, target);
        // WARNING! No conversion for target.form (can't convert source.getForm():bw.org.bocra.portal.form.Form to bw.org.bocra.portal.form.FormVO
        if(source.getForm() != null) {
            FormVO form = new FormVO();
            getFormDao().toFormVO(source.getForm(), form);
            target.setForm(form);
        }

        // WARNING! No conversion for target.formFields (can't convert source.getFormFields():bw.org.bocra.portal.form.field.FormField to bw.org.bocra.portal.form.field.FormFieldVO
        if(CollectionUtils.isNotEmpty(source.getFormFields())) {
            Collection<FormFieldVO> fields = new ArrayList<>();
            for(FormField field : source.getFormFields()) {
                FormFieldVO f = new FormFieldVO();
                getFormFieldDao().toFormFieldVO(field, f);
                fields.add(f);
            }

            target.setFormFields(fields);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormSectionVO toFormSectionVO(final FormSection entity)
    {
        // TODO verify behavior of toFormSectionVO
        return super.toFormSectionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private FormSection loadFormSectionFromFormSectionVO(FormSectionVO formSectionVO)
    {
        if (formSectionVO.getId() == null)
        {
            return  FormSection.Factory.newInstance();
        }
        else
        {
            return this.load(formSectionVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public FormSection formSectionVOToEntity(FormSectionVO formSectionVO)
    {
        // TODO verify behavior of formSectionVOToEntity
        FormSection entity = this.loadFormSectionFromFormSectionVO(formSectionVO);
        this.formSectionVOToEntity(formSectionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void formSectionVOToEntity(
        FormSectionVO source,
        FormSection target,
        boolean copyIfNull)
    {
        // TODO verify behavior of formSectionVOToEntity
        super.formSectionVOToEntity(source, target, copyIfNull);
        // WARNING! No conversion for target.form (can't convert source.getForm():bw.org.bocra.portal.form.Form to bw.org.bocra.portal.form.FormVO
        if(source.getForm() != null) {
            Form form = getFormDao().load(source.getForm().getId());
            target.setForm(form);
        }

        // WARNING! No conversion for target.formFields (can't convert source.getFormFields():bw.org.bocra.portal.form.field.FormField to bw.org.bocra.portal.form.field.FormFieldVO
        if(CollectionUtils.isNotEmpty(source.getFormFields())) {
            Collection<FormField> fields = new ArrayList<>();
            for(FormFieldVO field : source.getFormFields()) {
                FormField f = getFormFieldDao().get(field.getId());
                fields.add(f);
            }

            target.setFormFields(fields);
        }
    }

    @Override
    protected Collection<FormSection> handleFindByCriteria(String criteria) throws Exception {

        Specification<FormSection> specs = null;

        if(StringUtils.isNotBlank(criteria)) {
            specs = FormSectionSpecifications.findBySectionNameContainingIgnoreCase(criteria);
        }
        
        return formSectionRepository.findAll(specs, Sort.by("sectionName").ascending());
    }
}