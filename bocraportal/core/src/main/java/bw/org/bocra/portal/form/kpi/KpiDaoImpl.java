// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.kpi;

import bw.org.bocra.portal.form.FormCriteria;
import java.util.Collection;
import org.springframework.stereotype.Repository;

/**
 * @see Kpi
 */
@Repository("kpiDao")
public class KpiDaoImpl
    extends KpiDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Kpi> handleFindByCriteria(FormCriteria searchCriteria)
    {
        // TODO implement public Collection<Kpi> handleFindByCriteria(FormCriteria searchCriteria)
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toKpiVO(
        Kpi source,
        KpiVO target)
    {
        // TODO verify behavior of toKpiVO
        super.toKpiVO(source, target);
        // WARNING! No conversion for target.periodInstance (can't convert source.getPeriodInstance():bw.org.bocra.portal.period.instance.PeriodInstance to bw.org.bocra.portal.period.instance.PeriodInstanceVO
        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KpiVO toKpiVO(final Kpi entity)
    {
        // TODO verify behavior of toKpiVO
        return super.toKpiVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Kpi loadKpiFromKpiVO(KpiVO kpiVO)
    {
        // TODO implement loadKpiFromKpiVO
        throw new UnsupportedOperationException("bw.org.bocra.portal.form.kpi.loadKpiFromKpiVO(KpiVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (kpiVO.getId() == null)
        {
            return  Kpi.Factory.newInstance();
        }
        else
        {
            return this.load(kpiVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Kpi kpiVOToEntity(KpiVO kpiVO)
    {
        // TODO verify behavior of kpiVOToEntity
        Kpi entity = this.loadKpiFromKpiVO(kpiVO);
        this.kpiVOToEntity(kpiVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void kpiVOToEntity(
        KpiVO source,
        Kpi target,
        boolean copyIfNull)
    {
        // TODO verify behavior of kpiVOToEntity
        super.kpiVOToEntity(source, target, copyIfNull);
    }
}