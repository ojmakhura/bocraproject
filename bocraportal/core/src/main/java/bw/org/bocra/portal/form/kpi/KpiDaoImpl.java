// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.form.kpi;

import bw.org.bocra.portal.form.FormCriteria;
import bw.org.bocra.portal.licensee.Licensee;
import bw.org.bocra.portal.licensee.LicenseeVO;
import bw.org.bocra.portal.period.instance.PeriodInstance;
import bw.org.bocra.portal.period.instance.PeriodInstanceVO;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Date;

import javax.persistence.criteria.Join;

import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Repository;

/**
 * @see Kpi
 */
@Repository("kpiDao")
public class KpiDaoImpl
    extends KpiDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Kpi> handleFindByCriteria(FormCriteria searchCriteria)
    {
        Specification<Kpi> specs = null;

        if(searchCriteria.getLicenseeId() != null) {
            specs = KpiSpecifications.findByLicenseeId(searchCriteria.getLicenseeId())
                        .or(KpiSpecifications.findByLicenseeNull());
        }

        if(searchCriteria.getMonth() != null) {
            if(specs == null) {
                specs = findByPeriod(searchCriteria.getMonth());
            } else {
                specs.and(findByPeriod(searchCriteria.getMonth()));
            }
        }

        if(specs == null) {
            return kpiRepository.findAll(Sort.by("updatedDate").descending());
        } else {
            return kpiRepository.findAll(specs, Sort.by("updatedDate").descending());
        }
    }

    private Specification<Kpi> findByPeriod(LocalDate periodDate) {

        return (root, cq, cb) -> {
            cq.distinct(true);
            Join<Kpi, PeriodInstance> join = root.join("periodInstance");
            return cb.between(join.<LocalDate>get("periodStartDate"), periodDate, periodDate);
        };

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toKpiVO(
        Kpi source,
        KpiVO target)
    {
        // TODO verify behavior of toKpiVO
        super.toKpiVO(source, target);
        // WARNING! No conversion for target.periodInstance (can't convert source.getPeriodInstance():bw.org.bocra.portal.period.instance.PeriodInstance to bw.org.bocra.portal.period.instance.PeriodInstanceVO
        if(source.getPeriodInstance() != null) {
            PeriodInstanceVO vo = new PeriodInstanceVO();
            getPeriodInstanceDao().toPeriodInstanceVO(source.getPeriodInstance(), vo);
            target.setPeriodInstance(vo);
        }

        // WARNING! No conversion for target.licensee (can't convert source.getLicensee():bw.org.bocra.portal.licensee.Licensee to bw.org.bocra.portal.licensee.LicenseeVO
        if(source.getLicensee() == null) {
            LicenseeVO licensee = new LicenseeVO();
            getLicenseeDao().toLicenseeVO(source.getLicensee(), licensee);
            target.setLicensee(licensee);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KpiVO toKpiVO(final Kpi entity)
    {
        // TODO verify behavior of toKpiVO
        return super.toKpiVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Kpi loadKpiFromKpiVO(KpiVO kpiVO)
    {
        if (kpiVO.getId() == null)
        {
            return  Kpi.Factory.newInstance();
        }
        else
        {
            return this.load(kpiVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public Kpi kpiVOToEntity(KpiVO kpiVO)
    {
        // TODO verify behavior of kpiVOToEntity
        Kpi entity = this.loadKpiFromKpiVO(kpiVO);
        this.kpiVOToEntity(kpiVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void kpiVOToEntity(
        KpiVO source,
        Kpi target,
        boolean copyIfNull)
    {
        // TODO verify behavior of kpiVOToEntity
        super.kpiVOToEntity(source, target, copyIfNull);

        if(source.getPeriodInstance() != null) {
            PeriodInstance instance = PeriodInstance.Factory.newInstance();
            getPeriodInstanceDao().periodInstanceVOToEntity(source.getPeriodInstance(), instance, copyIfNull);
            target.setPeriodInstance(instance);
        }

        if(source.getLicensee() != null) {
            Licensee licensee = Licensee.Factory.newInstance();
            getLicenseeDao().licenseeVOToEntity(source.getLicensee(), licensee, copyIfNull);
            target.setLicensee(licensee);
        }
    }
}