// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.org.bocra.portal.guard;

import org.springframework.stereotype.Repository;

/**
 * @see UrlGuard
 */
@Repository("urlGuardDao")
public class UrlGuardDaoImpl
    extends UrlGuardDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toUrlGuardVO(
        UrlGuard source,
        UrlGuardVO target)
    {
        // TODO verify behavior of toUrlGuardVO
        super.toUrlGuardVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UrlGuardVO toUrlGuardVO(final UrlGuard entity)
    {
        // TODO verify behavior of toUrlGuardVO
        return super.toUrlGuardVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private UrlGuard loadUrlGuardFromUrlGuardVO(UrlGuardVO urlGuardVO)
    {
        if (urlGuardVO.getId() == null)
        {
            return  UrlGuard.Factory.newInstance();
        }
        else
        {
            return this.load(urlGuardVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public UrlGuard urlGuardVOToEntity(UrlGuardVO urlGuardVO)
    {
        // TODO verify behavior of urlGuardVOToEntity
        UrlGuard entity = this.loadUrlGuardFromUrlGuardVO(urlGuardVO);
        this.urlGuardVOToEntity(urlGuardVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void urlGuardVOToEntity(
        UrlGuardVO source,
        UrlGuard target,
        boolean copyIfNull)
    {
        // TODO verify behavior of urlGuardVOToEntity
        target.setRoles(new java.util.ArrayList<>());
        super.urlGuardVOToEntity(source, target, copyIfNull);
    }
}