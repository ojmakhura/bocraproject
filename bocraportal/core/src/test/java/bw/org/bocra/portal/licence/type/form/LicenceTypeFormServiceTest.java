// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.licence.type.form;

import bw.org.bocra.portal.form.FormDao;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.licence.type.LicenceTypeDao;
import bw.org.bocra.portal.licence.type.LicenceTypeRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class LicenceTypeFormServiceTest {

    protected Logger logger = LoggerFactory.getLogger(LicenceTypeFormServiceTest.class);
    
    @InjectMocks
    private LicenceTypeFormServiceImpl licenceTypeFormService;

    @Mock
    private LicenceTypeFormDao licenceTypeFormDao;

    @Mock
    private LicenceTypeFormRepository licenceTypeFormRepository;
    @Mock
    private LicenceTypeDao licenceTypeDao;

    @Mock
    private LicenceTypeRepository licenceTypeRepository;
    @Mock
    private FormDao formDao;

    @Mock
    private FormRepository formRepository;

    @Test
    public void checkInjects() {

        Assertions.assertNotNull(licenceTypeFormDao);
        Assertions.assertNotNull(licenceTypeFormRepository);
        Assertions.assertNotNull(licenceTypeDao);
        Assertions.assertNotNull(licenceTypeRepository);
        Assertions.assertNotNull(formDao);
        Assertions.assertNotNull(formRepository);
        Assertions.assertNotNull(licenceTypeFormService);

    }
    

    @Test
    public void findById_success() {
        
    }

    @Test
    public void findById_fail() {
        
    }


    @Test
    public void create_success() {
        
    }

    @Test
    public void create_fail() {
        
    }


    @Test
    public void remove_success() {
        
    }

    @Test
    public void remove_fail() {
        
    }


    @Test
    public void getAll_success() {
        
    }

    @Test
    public void getAll_fail() {
        
    }


    @Test
    public void findByLicenceType_success() {
        
    }

    @Test
    public void findByLicenceType_fail() {
        
    }


    @Test
    public void findByForm_success() {
        
    }

    @Test
    public void findByForm_fail() {
        
    }


    @Test
    public void updateLicenceType_success() {
        
    }

    @Test
    public void updateLicenceType_fail() {
        
    }


    @Test
    public void updateForm_success() {
        
    }

    @Test
    public void updateForm_fail() {
        
    }

}