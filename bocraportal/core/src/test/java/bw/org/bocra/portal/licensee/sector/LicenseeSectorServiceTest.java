// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.licensee.sector;

import bw.org.bocra.portal.licensee.LicenseeDao;
import bw.org.bocra.portal.licensee.LicenseeRepository;
import bw.org.bocra.portal.sector.SectorDao;
import bw.org.bocra.portal.sector.SectorRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class LicenseeSectorServiceTest {

    protected Logger logger = LoggerFactory.getLogger(LicenseeSectorServiceTest.class);
    
    @InjectMocks
    private LicenseeSectorServiceImpl licenseeSectorService;

    @Mock
    private LicenseeDao licenseeDao;

    @Mock
    private LicenseeRepository licenseeRepository;
    @Mock
    private SectorDao sectorDao;

    @Mock
    private SectorRepository sectorRepository;
    @Mock
    private LicenseeSectorDao licenseeSectorDao;

    @Mock
    private LicenseeSectorRepository licenseeSectorRepository;

    @Test
    public void checkInjects() {

        Assertions.assertNotNull(licenseeDao);
        Assertions.assertNotNull(licenseeRepository);
        Assertions.assertNotNull(sectorDao);
        Assertions.assertNotNull(sectorRepository);
        Assertions.assertNotNull(licenseeSectorDao);
        Assertions.assertNotNull(licenseeSectorRepository);
        Assertions.assertNotNull(licenseeSectorService);

    }
    

    @Test
    public void findById_success() {
        
    }

    @Test
    public void findById_fail() {
        
    }


    @Test
    public void create_success() {
        
    }

    @Test
    public void create_fail() {
        
    }


    @Test
    public void remove_success() {
        
    }

    @Test
    public void remove_fail() {
        
    }


    @Test
    public void getAll_success() {
        
    }

    @Test
    public void getAll_fail() {
        
    }


    @Test
    public void findByLicensee_success() {
        
    }

    @Test
    public void findByLicensee_fail() {
        
    }


    @Test
    public void findBySector_success() {
        
    }

    @Test
    public void findBySector_fail() {
        
    }


    @Test
    public void updateLicensee_success() {
        
    }

    @Test
    public void updateLicensee_fail() {
        
    }


    @Test
    public void updateSector_success() {
        
    }

    @Test
    public void updateSector_fail() {
        
    }

}