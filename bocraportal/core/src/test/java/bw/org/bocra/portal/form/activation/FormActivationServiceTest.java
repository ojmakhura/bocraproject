// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.form.activation;

import bw.org.bocra.portal.form.FormDao;
import bw.org.bocra.portal.form.FormRepository;
import bw.org.bocra.portal.form.submission.FormSubmissionDao;
import bw.org.bocra.portal.form.submission.FormSubmissionRepository;
import bw.org.bocra.portal.form.submission.data.DataFieldDao;
import bw.org.bocra.portal.form.submission.data.DataFieldRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class FormActivationServiceTest {

    protected Logger logger = LoggerFactory.getLogger(FormActivationServiceTest.class);
    
    @InjectMocks
    private FormActivationServiceImpl formActivationService;

    @Mock
    private FormActivationDao formActivationDao;

    @Mock
    private FormActivationRepository formActivationRepository;
    @Mock
    private FormDao formDao;

    @Mock
    private FormRepository formRepository;
    @Mock
    private FormSubmissionDao formSubmissionDao;

    @Mock
    private FormSubmissionRepository formSubmissionRepository;
    @Mock
    private DataFieldDao dataFieldDao;

    @Mock
    private DataFieldRepository dataFieldRepository;

    @Test
    public void checkInjects() {

        Assertions.assertNotNull(formActivationDao);
        Assertions.assertNotNull(formActivationRepository);
        Assertions.assertNotNull(formDao);
        Assertions.assertNotNull(formRepository);
        Assertions.assertNotNull(formSubmissionDao);
        Assertions.assertNotNull(formSubmissionRepository);
        Assertions.assertNotNull(dataFieldDao);
        Assertions.assertNotNull(dataFieldRepository);
        Assertions.assertNotNull(formActivationService);

    }
    

    @Test
    public void findById_success() {
        
    }

    @Test
    public void findById_fail() {
        
    }


    @Test
    public void save_success() {
        
    }

    @Test
    public void save_fail() {
        
    }

    @Test
    public void save_formActivation_null() {
        
    }

    @Test
    public void save_FormActivation_Id_null() {
        
    }

    @Test
    public void save_FormActivation_CreatedDate_null() {
        
    }

    @Test
    public void save_FormActivation_UpdatedBy_null() {
        
    }

    @Test
    public void save_FormActivation_UpdatedDate_null() {
        
    }

    @Test
    public void save_FormActivation_CreatedBy_null() {
        
    }

    @Test
    public void save_FormActivation_ActivationName_null() {
        
    }

    @Test
    public void save_FormActivation_Period_null() {
        
    }

    @Test
    public void save_FormActivation_Form_null() {
        
    }

    @Test
    public void save_FormActivation_FormSubmissions_null() {
        
    }

    @Test
    public void save_FormActivation_ActivationDeadline_null() {
        
    }


    @Test
    public void remove_success() {
        
    }

    @Test
    public void remove_fail() {
        
    }


    @Test
    public void getAll_success() {
        
    }

    @Test
    public void getAll_fail() {
        
    }


    @Test
    public void search_success() {
        
    }

    @Test
    public void search_fail() {
        
    }

    @Test
    public void search_criteria_null() {
        
    }

    @Test
    public void search_Criteria_ActivationName_null() {
        
    }

    @Test
    public void search_Criteria_PeriodId_null() {
        
    }

    @Test
    public void search_Criteria_FormId_null() {
        
    }
}