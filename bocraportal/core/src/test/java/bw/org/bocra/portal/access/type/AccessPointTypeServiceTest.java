// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringService.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.access.type;

import javax.transaction.Transactional;
import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

// @SpringBootTest
@ExtendWith(SpringExtension.class)
@DataJpaTest
@Transactional
public class AccessPointTypeServiceTest {

    protected Logger logger = LoggerFactory.getLogger(AccessPointTypeServiceTest.class);

    // @InjectMocks
    @Autowired
    private AccessPointTypeServiceImpl accessPointTypeService;

    // @Mock
    @Autowired
    private AccessPointTypeDao accessPointTypeDao;

    // @Mock
    @Autowired
    private AccessPointTypeRepository accessPointTypeRepository;

    // @Autowired
    // private DataSource dataSource;
    // @Autowired
    // private JdbcTemplate jdbcTemplate;
    // @Autowired
    // private EntityManager entityManager;

    // @Before
    // public void init() {
    // MockitoAnnotations.openMocks(this);
    // }

    @Test
    public void checkInjects() {

        Assertions.assertNotNull(accessPointTypeDao);
        Assertions.assertNotNull(accessPointTypeRepository);
        Assertions.assertNotNull(accessPointTypeService);

        Assertions.assertNotNull(accessPointTypeService.getAccessPointTypeDao());
        Assertions.assertNotNull(accessPointTypeService.getAccessPointTypeRepository());
        // assertThat(dataSource).isNotNull();
        // assertThat(jdbcTemplate).isNotNull();
        // assertThat(entityManager).isNotNull();

    }

    @Test
    public void findById_success() {

    }

    @Test
    public void findById_fail() {

    }

    @Test
    public void repository_save_success() {
        AccessPointType type = AccessPointType.Factory.newInstance();
        type.setId(1l);
        type.setCode("test");
        type.setName("Test Type");
        type.setDescription("This is a test");

        accessPointTypeRepository.save(type);

        assertNotNull(accessPointTypeRepository.getReferenceById(1l));
    }

    @Test
    public void save_success() {

        AccessPointTypeVO type = new AccessPointTypeVO();

        type.setId(1l);
        type.setCode("test");
        type.setName("Test Type");
        type.setDescription("This is a test");
        // Mockito.when(accessPointTypeService.save(type)).thenReturn(type);
        type.setId(null);
        type = accessPointTypeService.save(type);
        
        Assertions.assertNotNull(type);
        Assertions.assertNotNull(type.getId());
    }

    @Test
    public void save_fail() {

    }

    @Test
    public void save_accessPointType_null() {

    }

    @Test
    public void save_AccessPointType_Id_null() {

    }

    @Test
    public void save_AccessPointType_Code_null() {

    }

    @Test
    public void save_AccessPointType_Name_null() {

    }

    @Test
    public void save_AccessPointType_Description_null() {

    }

    @Test
    public void remove_success() {

    }

    @Test
    public void remove_fail() {

    }

    @Test
    public void getAll_success() {

    }

    @Test
    public void getAll_fail() {

    }

    @Test
    public void search_success() {

    }

    @Test
    public void search_fail() {

    }
}