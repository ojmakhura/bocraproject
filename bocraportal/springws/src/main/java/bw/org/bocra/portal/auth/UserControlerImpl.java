// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.auth;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import javax.ws.rs.core.Response;

import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;
import org.keycloak.OAuth2Constants;
import org.keycloak.admin.client.CreatedResponseUtil;
import org.keycloak.admin.client.Keycloak;
import org.keycloak.admin.client.KeycloakBuilder;
import org.keycloak.admin.client.resource.RealmResource;
import org.keycloak.admin.client.resource.UserResource;
import org.keycloak.admin.client.resource.UsersResource;
import org.keycloak.authorization.client.AuthzClient;
import org.keycloak.authorization.client.Configuration;
import org.keycloak.representations.AccessTokenResponse;
import org.keycloak.representations.idm.CredentialRepresentation;
import org.keycloak.representations.idm.RoleRepresentation;
import org.keycloak.representations.idm.UserRepresentation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/users")
@CrossOrigin()
public class UserControlerImpl extends UserControlerBase {

    protected static Logger log = LoggerFactory.getLogger(UserControlerImpl.class);


    @Override
    public ResponseEntity<UserVO> handleCreateUser(UserVO userVO) {

        Keycloak keycloak = KeycloakBuilder.builder().serverUrl(getAuthServerUrl())
                            .grantType(OAuth2Constants.PASSWORD).realm("master").clientId("admin-cli")
                            .username("junior").password("rxh4ulom")
                            .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(20).build()).build();

        keycloak.tokenManager().getAccessToken();

        UserRepresentation user = new UserRepresentation();
        user.setEnabled(true);
        user.setUsername(userVO.getUsername());
        user.setEmail(userVO.getEmail());
        user.setFirstName(userVO.getFirstname());
        user.setLastName(userVO.getLastname());

        RealmResource realmResource = keycloak.realm(getRealm());
        UsersResource usersResource = realmResource.users();

        Response response = usersResource.create(user);

        if(response.getStatus() == 201) {
            String userId = CreatedResponseUtil.getCreatedId(response);
            log.info("Created userId {}", userId);

            // Create password credential
            CredentialRepresentation passwordCred = new CredentialRepresentation();
            passwordCred.setTemporary(false);
            passwordCred.setType(CredentialRepresentation.PASSWORD);
            passwordCred.setValue(userVO.getPassword());

            UserResource userResource = usersResource.get(userId);
            userResource.resetPassword(passwordCred);

            RoleRepresentation realmRoleUser = realmResource.roles().get("ADMIN_L").toRepresentation();

            userResource.roles().realmLevel().add(Arrays.asList(realmRoleUser));
        }

        return ResponseEntity.ok(userVO);
    }

    @Override
    public ResponseEntity<String> handleGetEmail() {

        return ResponseEntity.ok("Hello, this api is protected");
    }

    @Override
    public ResponseEntity<String> handleGetName() {
    
        return ResponseEntity.ok("Hello, this api is not protected");
    }

    @Override
    public ResponseEntity<Object> handleSignin(UserVO userVO) {

        Map<String, Object> clientCredentials = new HashMap<>();
        clientCredentials.put("secret", getClientSecret());
        clientCredentials.put("grant_type", "password");

        Configuration configuration = new Configuration(
            getAuthServerUrl(), getRealm(), getClientId(),
            clientCredentials, null
        );

        AuthzClient authzClient = AuthzClient.create(configuration);

        AccessTokenResponse response = authzClient.obtainAccessToken(userVO.getUsername(), userVO.getPassword());

        return ResponseEntity.ok(response);
    }
}