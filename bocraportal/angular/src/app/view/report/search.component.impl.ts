// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Inject, Injector } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatRadioChange } from '@angular/material/radio';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { SearchComponent } from '@app/view/report/search.component';
import { select } from '@ngrx/store';
import { Observable } from 'rxjs';
import * as FormSelectors from '@app/store/form/form.selectors';
import * as FormActions from '@app/store/form/form.actions';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.scss']
})
export class SearchComponentImpl extends SearchComponent {

  forms$: Observable<FormVO[]>;
  formSearchField: FormControl = new FormControl();
  formSelect: FormVO = new FormVO();
  formModalColumns = ['actions', 'id', 'code', 'formName', 'entryType'];
  formControl: FormGroup = this.createFormVOGroup(new FormVO());
  addUnrestricted: boolean = true;

    constructor(@Inject(MAT_DIALOG_DATA) data: any, private injector: Injector) {
        super(data, injector);
      this.forms$ = this.store.pipe(select(FormSelectors.selectForms));
    }

    doNgOnDestroy(): void {
    }
    formSelected(event: MatRadioChange, data: FormVO): void {
      this.formSelect = data;
    }
  
    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedForm(): void {
      this.criteriaControl.patchValue({ form: this.formSelect.id });
      this.searchForm.patchValue({ submissionForm: this.formSelect });
    }
  
    formSearch(): void {
      let criteria: FormCriteria = new FormCriteria();
      criteria.code = this.formSearchField.value;
      criteria.formName = this.formSearchField.value;
      this.store.dispatch(FormActions.searchForms({ criteria: criteria, loading: true, loaderMessage: 'Searching forms ...' }));
    }
  
    formAddDialog(): void {}
  
    formClear(): void {
      this.criteriaControl.patchValue({form: new FormVO()});
    }

    get submissionFormControl(): FormGroup {
        return this.searchForm.get('submissionForm') as FormGroup;
    }
  
    get submissionForm(): FormVO {
        return this.submissionFormControl?.value;
    }
}