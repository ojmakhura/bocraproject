// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { AfterViewInit, Component, Injector, Input, OnDestroy, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { ReportRestController } from '@app/service/bw/org/bocra/portal/report/report-rest-controller';
import { ReportElement } from './report-element.component';
import { saveAs } from 'file-saver';

export class FormReport {
  formName: string = '';
  formCode: string = '';
  formSubmissions: FormSubmissionVO[] = [];
  reportElements: ReportElement[] = [];
}

@Component({
  selector: 'app-form-report',
  templateUrl: './form-report.component.html',
})
export class FormReportComponent implements OnInit, AfterViewInit, OnDestroy {
  @Input() formReportGroup: FormGroup | any;
  protected formBuilder: FormBuilder;
  reportController: ReportRestController;

  constructor(private injector: Injector) {
    this.formBuilder = this.injector.get(FormBuilder);
    this.reportController = this.injector.get(ReportRestController)
  }

  ngOnInit(): void { }

  ngAfterViewInit(): void { }

  ngOnDestroy(): void { }

  clearReport() { }

  get reportElementsControl(): FormArray {
    return this.formReportGroup.get('reportElements') as FormArray;
  }

  get reportElements(): ReportElement[] {
    return this.reportElementsControl.value;
  }

  get formSubmissionsControl(): FormArray {
    return this.formReportGroup.get('formSubmissions') as FormArray;
  }

  get formSubmissions(): FormSubmissionVO[] {
    return this.formSubmissionsControl.value;
  }

  get formNameControl(): FormArray {
    return this.formReportGroup.get('formName') as FormArray;
  }

  get formName(): string {
    return this.formNameControl.value;
  }

  removeReportElement(elementIndex: number) {
    this.reportElementsControl.removeAt(elementIndex);
  }

  addReportElement() {
    this.reportElementsControl.push(this.createReportElementGroup(new ReportElement()));
  }

  createReportElementGroup(reportElement: ReportElement): FormGroup {
    return this.formBuilder.group({
      groupBy: [reportElement?.groupBy],
      reportType: [reportElement?.reportType],
      selectAllLicensees: [reportElement?.selectAllLicensees],
      selectAllPeriods: [reportElement?.selectAllPeriods],
      selectAllForms: [reportElement?.selectAllForms],
      dataColumns: [reportElement?.dataColumns],
      dataRows: [reportElement?.dataRows],
      licenseeSelections: this.formBuilder.array([]),
      periodSelections: this.formBuilder.array([]),
      fieldSelections: this.formBuilder.array([]),
      charts: this.formBuilder.array([]),
    });
  }

  createFormReportGroup(formReport: FormReport): FormGroup {
    return this.formBuilder.group({
      formName: [{ value: formReport?.formName, disabled: false }],
      formCode: [{ value: formReport?.formCode, disabled: false }],
      licensees: this.formBuilder.array([
        ...new Set(formReport?.formSubmissions?.map((sub) => sub?.licensee?.licenseeName)),
      ]),
      formSubmissions: this.formBuilder.array(formReport?.formSubmissions),
      reportElements: this.formBuilder.array([]),
    });
  }
  dataURItoBlob(dataURI: string) {
    const byteString = window.atob(dataURI);
    const arrayBuffer = new ArrayBuffer(byteString.length);
    const int8Array = new Uint8Array(arrayBuffer);
    for (let i = 0; i < byteString.length; i++) {
      int8Array[i] = byteString.charCodeAt(i);
    }
    const blob = new Blob([int8Array], { type: 'image/png' });
    return blob;
  }

  downloadFormReport() {
    console.log(this.formReportGroup.value);

    let value = this.formReportGroup.value;

    let d: any = {};

    d.formName = value.formName;
    d.reportElements = []
    value.reportElements.forEach((element: any) => {
      let el: any = {
        charts: []
      }

      console.log(element)
      element.charts.forEach((ch: any) => {

        const imageName = 'name.png';
        const imageBlob = this.dataURItoBlob(ch.chartImage);
        const imageFile = new File([imageBlob], imageName, { type: 'image/png' });
        
        console.log(imageFile)
        
        el.charts.push({
          caption: ch.chartCaption,
          type: ch.chartType,
          image: imageFile
        });
      });

      console.log(element)

      d.reportElements.push(el);
    });

    this.reportController.createWordDocument(d).subscribe(file => {
      if (file) {
        let blob: any = file as Blob;
        const url = window.URL.createObjectURL(blob);
        saveAs(blob, "documentName.docx");
      }
    });
  }
}
