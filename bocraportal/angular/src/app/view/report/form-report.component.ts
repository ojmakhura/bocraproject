// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { AfterViewInit, Component, EventEmitter, Injector, Input, OnDestroy, OnInit, Output, QueryList, ViewChildren } from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import { ReportComponent } from '@app/view/report/report.component';
import { select } from '@ngrx/store';
import { ChartData } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';
import { Observable, of } from 'rxjs';
import { ReportElement } from './report-element.component';

export class FormReport {
  formName: string = '';
  formCode: string = '';
  formSubmissions: FormSubmissionVO[] = [];
  reportElements: ReportElement[] = [];
}

@Component({
  selector: 'app-form-report',
  templateUrl: './form-report.component.html',
})
export class FormReportComponent  implements OnInit, AfterViewInit, OnDestroy {

  @Input() formReportGroup: FormGroup | any;
  protected formBuilder: FormBuilder;
  
  constructor(private injector: Injector) {
    this.formBuilder = this.injector.get(FormBuilder);
  }

  ngOnInit(): void {
    console.log(this.formReportGroup.value);
  }

  ngAfterViewInit(): void {
  }

  ngOnDestroy(): void {
  }


  clearReport() {
    
  }

  get reportElementsControl(): FormArray {
    return this.formReportGroup.get('reportElements') as FormArray;
  }

  get reportElements(): ReportElement[] {
    return this.reportElementsControl.value;
  }

  get formSubmissionsControl(): FormArray {
    return this.formReportGroup.get('formSubmissions') as FormArray;
  }

  get formSubmissions(): FormSubmissionVO[] {
    return this.formSubmissionsControl.value;
  }

  get formNameControl(): FormArray {
    return this.formReportGroup.get('formName') as FormArray;
  }

  get formName(): string {
    return this.formNameControl.value;
  }

  removeReportElement(elementIndex: number) {
    this.reportElementsControl.removeAt(elementIndex);
  }

  addReportElement() {
    this.reportElementsControl.push(this.createReportElementGroup(new ReportElement()));
  }

  createReportElementGroup(reportElement: ReportElement): FormGroup {
    
    return this.formBuilder.group({
      groupBy: [reportElement?.groupBy],
      reportType: [reportElement?.reportType],
      selectAllLicensees: [reportElement?.selectAllLicensees],
      selectAllPeriods: [reportElement?.selectAllPeriods],
      selectAllForms: [reportElement?.selectAllForms],
      reportLabels: [reportElement?.reportLabels],
      licenseeSelections: this.formBuilder.array([]),
      periodSelections: this.formBuilder.array([]),
      fieldSelections: this.formBuilder.array([]),
      charts: this.formBuilder.array([]),
    });
  }

  createFormReportGroup(formReport: FormReport): FormGroup {
    return this.formBuilder.group({
      formName: [{ value: formReport?.formName, disabled: false }],
      formCode: [{ value: formReport?.formCode, disabled: false }],
      licensees: this.formBuilder.array([...new Set(formReport?.formSubmissions?.map(sub => sub?.licensee?.licenseeName))]),
      formSubmissions: this.formBuilder.array(formReport?.formSubmissions),
      reportElements: this.formBuilder.array([]),
    });
  }
}
