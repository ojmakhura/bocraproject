// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { AfterViewInit, Component, EventEmitter, Injector, Input, OnDestroy, OnInit, Output, QueryList, ViewChildren } from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import { ReportComponent } from '@app/view/report/report.component';
import { select } from '@ngrx/store';
import { ChartData } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';
import { Observable, of } from 'rxjs';
import { ReportChart } from './report-chart.component';

export class ReportElement {
  groupBy: string = '';
  reportType: string = '';
  reportLabels: string = '';
  selectAll: string = '';
  formSubmissions: FormSubmissionVO[] = [];
  selectedLicensees: any[] = [];
  selectedPeriods: string[] = [];
  selectedForms: string[] = [];
  charts: ReportChart[] = []
}

@Component({
  selector: 'app-report-element',
  templateUrl: './report-element.component.html',
})
export class ReportElementComponent  implements OnInit, AfterViewInit, OnDestroy {

  reportElementGroup: FormGroup | any;
  protected formBuilder: FormBuilder;
  @Input() formSubmissions: FormSubmissionVO[];
  @Input() elementIndex: number;
  @Input() reportElement: ReportElement;
  @Output() actionIndexEvent = new EventEmitter<number>()
  licensees: string[] = [];
  periods: string[] = []
  forms: string[] = []
  
  constructor(private injector: Injector) {
    this.formBuilder = this.injector.get(FormBuilder);
  }

  ngOnInit(): void {
    this.licensees = [...new Set(this.formSubmissions?.map(sub => sub?.licensee?.licenseeName))];
    this.periods = [...new Set(this.formSubmissions?.map(sub => sub?.period?.periodName))];
    this.forms = [...new Set(this.formSubmissions?.map(sub => sub?.form.formName))];
    this.reportElementGroup = this.newForm(this.reportElement);
  }

  newForm(reportElement: ReportElement): FormGroup {
    
    return this.formBuilder.group({
      groupBy: [reportElement?.groupBy],
      reportType: [reportElement?.reportType],
      selectAll: [reportElement?.selectAll],
      reportLabels: [reportElement?.reportLabels],
      licenseeSelections: this.createLicenseeSelectionArray(reportElement?.selectedLicensees),
      periodSelections: this.createPeriodSelectionArray(reportElement?.selectedPeriods),
      formSelections: this.createFormSelectionArray(reportElement?.selectedForms)
    });
  }

  ngAfterViewInit(): void {
  }

  ngOnDestroy(): void {
  }

  test(){
    console.log(this.reportElementGroup?.value);
  }

  createLicenseeSelectionArray(licensees: any[]): FormArray {

    let selections: FormArray = this.formBuilder.array([]);
    this.licensees.forEach(licensee => {
      selections.push(this.formBuilder.group({
        selected: [licensees.find(lic => lic === licensee) ? true : false],
        licensee: [licensee]
      }));
    });
    return selections;
  }

  createPeriodSelectionArray(periods: any[]): FormArray {

    let selections: FormArray = this.formBuilder.array([]);
    this.periods.forEach(period => {
      selections.push(this.formBuilder.group({
        selected: [periods.find(p => p === period) ? true : false],
        period: [period]
      }));
    });
    return selections;
  }

  createFormSelectionArray(forms: any[]): FormArray {

    let selections: FormArray = this.formBuilder.array([]);
    this.forms.forEach(form => {
      selections.push(this.formBuilder.group({
        selected: [forms.find(f => f === form) ? true : false],
        form: [form]
      }));
    });
    return selections;
  }

  selectedChartType() {
    // this.report = this.reportForm.value
    // this.formReports = this.report.formReports;

    // this.chart.forEach((c, index) => {
    //   c.type = this.getReportElement(i, j).chartType
    //   c.update();
    // });
    // return this.getReportElement(i, j).chartType ? this.getReportElement(i, j).chartType : 'bar';
  }

  addReportChart() {
    this.reportElement.charts.push(new ReportChart());
  }

  get reportTypeControl() {
    return this.reportElementGroup.get('reportType') as FormControl;
  }

  get reportType() {
    return this.reportTypeControl.value
  }

  get reportLabelsControl() {
    return this.reportElementGroup.get('reportLabels') as FormControl;
  }

  get reportLabels() {
    return this.reportLabelsControl.value
  }

  get groupByControl() {
    return this.reportElementGroup.get('groupBy') as FormControl;
  }

  get groupBy() {
    return this.groupByControl.value
  }

  get licenseeSelectionsArray(): FormArray {
    return this.reportElementGroup.get('licenseeSelections') as FormArray;

  }

  get licenseeSelections() {
    return this.licenseeSelectionsArray.value
  }

  get periodSelectionsArray(): FormArray {
    return this.reportElementGroup.get('periodSelections') as FormArray;

  }

  get periodSelections() {
    return this.licenseeSelectionsArray.value
  }

  get formSelectionsArray(): FormArray {
    return this.reportElementGroup.get('formSelections') as FormArray;

  }

  get formSelections() {
    return this.licenseeSelectionsArray.value
  }

  removeReportChart(chartIndex: number) {
    this.reportElement.charts.forEach((element, index) => {
      if(index == chartIndex) this.reportElement.charts.splice(index, 1);
    });
  }

  selectAllChange(event: any) {

    let arrayControls: FormArray = this.licenseeSelectionsArray;

    if(this.reportLabels === 'periods') {
      arrayControls = this.periodSelectionsArray;
    } else if(this.reportLabels === 'forms') {
      arrayControls = this.formSelectionsArray;
    }

    if(event?.target?.checked) {
      arrayControls.controls.forEach(value => {
        value.get('selected')?.patchValue(true);
      });
    } else {

      arrayControls.controls.forEach(value => {
        value.get('selected')?.patchValue(false);
      });
    }
  }
}
