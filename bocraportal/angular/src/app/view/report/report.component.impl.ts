// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { ReportComponent } from '@app/view/report/report.component';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import * as ViewActions from '@app/store/view/view.actions';
import * as ViewSelectors from '@app/store/view/view.selectors';
import { Observable } from 'rxjs';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { select } from '@ngrx/store';
import { FormArray, FormGroup } from '@angular/forms';
import { ChartData } from 'chart.js';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';

export class ReportElement {
  chartType = '';
  datasets: ChartData[] = [];
}

export class FormReport {
  formName: string = '';
  formCode: string = '';
  submissions: FormSubmissionVO[] = [];
  licensees: string[] = [];
  reportElements: ReportElement[] = [];
}

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.scss'],
})
export class ReportComponentImpl extends ReportComponent {

  submissions$: Observable<FormSubmissionVO[]>;
  submissions: FormSubmissionVO[] = [];
  licensees: string[] = [];
  forms: FormVO[] = [];
  fullReport: FormReport[] = [];
  // formReportArrayControl: FormArray;

  constructor(private injector: Injector) {
    super(injector);
    this.submissions$ = this.store.pipe(select(SubmissionSelectors.selectFormSubmissions));
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit() {

    this.route.queryParams.subscribe((queryParams: any) => {
      let ids = queryParams.submissions.map((id: string) => +id);
      this.store.dispatch(
        SubmissionActions.findByIds({
          ids: ids,
          loaderMessage: `Loading ${ids.length} submissions for report generation ....`,
          loading: true,
        })
      );
    });

    this.submissions$.subscribe(submissions => {
      this.submissions = submissions;
      this.licensees = [...new Set(submissions.map(submission => submission.licensee.licenseeName))];
      this.forms = [...new Set(submissions.map(submission => submission.form))];

      this.forms.forEach(form => {
        console.log(form, submissions.filter(submission => submission.form.formName === form.formName));
        let rep: FormReport = new FormReport();
        rep.submissions = submissions.filter(submission => submission.form.formName === form.formName);
        rep.formName = form.formName;
        rep.formCode = form.code;
        rep.licensees = [...new Set(rep.submissions.map(submission => submission.licensee.licenseeName))];
        this.fullReport.push(rep);

      })
    });
  }

  override afterOnInit(): void {
  }

  getReportElementControl(): FormGroup {
    return this.formBuilder.group({
      element: []
    });
  }

  addReportElement() {
    this.reportElements.push(
      this.getReportElementControl()
    );
  }

  createSubmissionsControl(submission: FormSubmissionVO): FormGroup {

    return this.formBuilder.group({
      id: submission.id,
    })
  }

  createSubmissionsArrayControl(submissions: FormSubmissionVO[]) {
    let formArray: FormArray = this.formBuilder.array([]);
    submissions.forEach(sub => {
      formArray.push(this.createSubmissionsControl(sub));
    })

    return formArray;
  }

  createFormReportGroup(formReport: FormReport): FormGroup {

    return this.formBuilder.group({
      formName: [{value: formReport?.formName, disabled: false}],
      formCode: [{value: formReport?.formCode, disabled: false}],
      submissions: this.createSubmissionsArrayControl(formReport?.submissions),
    });
  }

  override newForm(): FormGroup {
      return this.formBuilder.group({
        reportElements: this.formBuilder.array([this.getReportElementControl()])
      });
  }

  get reportElements(): FormArray {
    return this.reportForm.get('reportElements') as FormArray;
  }

  removeReportElement(i: number) {
    this.reportElements.removeAt(i);
  }
}
