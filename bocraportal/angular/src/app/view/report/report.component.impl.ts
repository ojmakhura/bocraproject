// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, QueryList, ViewChildren } from '@angular/core';
import { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import { ReportComponent } from '@app/view/report/report.component';
import { select } from '@ngrx/store';
import { ChartData } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';
import { Observable, of } from 'rxjs';
import { FormReport } from './form-report.component';
import { ReportElement } from './report-element.component';

export class GraphData {
  chartType: string = '';
  reportType: string = '';
  reportLabels: string = '';
  reportHeader: string = '';
  labels: string[] = [];
  data: number[] = [];
}


@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.scss'],
})
export class ReportComponentImpl extends ReportComponent {
  submissions$: Observable<FormSubmissionVO[]>;
  submissions: FormSubmissionVO[] = [];
  // reportElements: ReportElement[] = [];
  licensees: string[] = [];
  forms: FormVO[] = [];
  fullReport: FormReport[] = [];
  report: any = {};
  // formReports: any[] = [];
  // @ViewChildren(BaseChartDirective) chart: QueryList<BaseChartDirective>;
  // chartTypeControl: FormControl;

  submissionSearchForm: FormGroup;

  constructor(private injector: Injector) {
    super(injector);
    this.submissions$ = this.store.pipe(select(SubmissionSelectors.selectFormSubmissions));
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit() {
    this.route.queryParams.subscribe((queryParams: any) => {
      let ids = queryParams?.submissions?.map((id: string) => +id);
      this.store.dispatch(
        SubmissionActions.findByIds({
          ids: ids,
          loaderMessage: `Loading ${ids?.length} submissions for report generation ....`,
          loading: true,
        })
      );
    });

    this.submissions$.subscribe((submissions) => {
      this.submissions = submissions;
      this.licensees = [...new Set(submissions.map((submission) => submission.licensee.licenseeName))];

      submissions
        .map((submission) => submission.form)
        .forEach((form) => {
          let fs: FormVO[] = this.forms.filter((f) => f.code === form.code);
          if (!fs || fs.length === 0) {
            this.forms.push(form);
          }
        });

      this.forms.forEach((form) => {
        let rep: FormReport = new FormReport();

        rep.formSubmissions = submissions.filter((submission) => submission.form.formName === form.formName);
        rep.formName = form.formName;
        rep.formCode = form.code;
        // rep.licensees = [...new Set(rep.submissions.map((submission) => submission.licensee.licenseeName))];
        this.fullReport.push(rep);
        this.formReportsControl.push(this.createFormReportGroup(rep));
        console.log(this.formReportsControl.value);
      });

      this.report = this.reportForm.value
      // this.formReports = this.report.formReports;
    });
  }

  override afterOnInit(): void {}

  get formReportsControl(): FormArray {
    return this.reportForm.get('formReports') as FormArray;
  }

  get formReports(): FormReport[] {
    return this.formReportsControl.value
  }

  actionOnElement(index: number) {
      console.log(`Action on ${index}`);
      // console.log(this.reportElements)
  }

  createSubmissionsControl(submission: FormSubmissionVO): FormGroup {
    return this.formBuilder.group({
      id: submission.id,
    });
  }

  createSubmissionsArrayControl(submissions: FormSubmissionVO[]) {
    let formArray: FormArray = this.formBuilder.array([]);
    submissions.forEach((sub) => {
      formArray.push(new FormControl(sub.id));
    });

    return formArray;
  }

  createFormReportGroup(formReport: FormReport): FormGroup {
    return this.formBuilder.group({
      formName: [{ value: formReport?.formName, disabled: false }],
      formCode: [{ value: formReport?.formCode, disabled: false }],
      licensees: this.formBuilder.array([...new Set(formReport?.formSubmissions?.map(sub => sub?.licensee?.licenseeName))]),
      formSubmissions: this.formBuilder.array(formReport?.formSubmissions),
      reportElements: this.formBuilder.array([]),
    });
  }

  override newForm(): FormGroup {
    return this.formBuilder.group({
      formReports: this.formBuilder.array([]),
    });
  }

  getLabels(index: number, element: AbstractControl) {
    this.report = this.reportForm.value
    // this.formReports = this.report.formReports;
    const reportElement = element?.value;

    if(reportElement?.reportLabels === 'licensees') {

      let el: FormGroup = element as FormGroup;
      // el.setControl()

    } else if(reportElement?.reportLabels === 'periods') {

      // console.log([...new Set(this.submissions.filter(sub => this.getFormReport(index)?.submissions.find(id => id === sub.id))?.map(sub => sub?.period?.periodName))])
    }
  }

  generateReport(formIndex: number, elementIndex: number) {

    this.report = this.reportForm.value
    // this.formReports = this.report.formReports;
    const reportType = this.formReports[formIndex]?.reportElements[elementIndex]?.reportType;

    if(reportType === 'default') {
      this.generateDefaultReport(formIndex, elementIndex);
      
    }
  }

  // reportElementsControl(): FormArray {
  //   ret
  // } 

  clearReport(formIndex: number, elementIndex: number) {
    // this.getReportElementsControl(formIndex).setControl(elementIndex, this.createReportElementControl([], [], 'bar', ''))
  }

  generateDefaultReport(formIndex: number, elementIndex: number) {
    // let submissions: FormSubmissionVO[] = this.submissions.filter((sub) =>
    //   this.getFormReportSubmissions(formIndex).find((val) => val === sub.id)
    // );

    // const periods = [...new Set(submissions.map(sub => sub.period.periodName))];

    // periods.forEach((period, index) => {
    //   let periodSubmissions: FormSubmissionVO[] = submissions.filter(sub => sub.period.periodName === period);
    //   let submission: FormSubmissionVO = periodSubmissions[0];
    //   let sectionDatasets: any = {};

    //   submission?.sections.forEach((section: DataFieldSectionVO, index: number) => {
    //     let sectionDataset = sectionDatasets[section.sectionId];
    //     if(!sectionDataset) {
    //       sectionDataset = []
    //       sectionDatasets[section.sectionId] = sectionDataset;
    //     }
  
    //     periodSubmissions.forEach((sub, index: number) => {
    //       let sec: DataFieldSectionVO = sub.sections.find((sc: DataFieldSectionVO, index: number) => section.sectionLabel === sc.sectionLabel);
    //       sectionDataset.push({
    //         label: sub.licensee.licenseeName,
    //         data: sec.dataFields.map(field => +field.value)
    //       });
    //     });
    //   });

    //   this.report = this.reportForm.value
    //   this.formReports = this.report.formReports;
    //   let elementControl: FormGroup = this.createReportElementControl(
    //     submission?.sections, 
    //     sectionDatasets, 
    //     this.formReports[formIndex]?.reportElements[elementIndex]?.chartType,
    //     'default',
    //     period
    //   );

    //   if(index == 0)
    //     this.getReportElementsControl(formIndex).setControl(elementIndex, elementControl)
    //   else 
    //     this.getReportElementsControl(formIndex).push(elementControl)
    //   this.report = this.reportForm.value
    //   this.formReports = this.report.formReports;
    // });
    
  }

}
