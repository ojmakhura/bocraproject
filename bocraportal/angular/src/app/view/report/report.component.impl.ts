// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, QueryList, ViewChildren } from '@angular/core';
import { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import { ReportComponent } from '@app/view/report/report.component';
import { select } from '@ngrx/store';
import { ChartData } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';
import { Observable, of } from 'rxjs';
import { FormReport } from './form-report.component';
import { ReportElement } from './report-element.component';

export class GraphData {
  chartType: string = '';
  reportType: string = '';
  reportLabels: string = '';
  reportHeader: string = '';
  labels: string[] = [];
  data: number[] = [];
}

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.scss'],
})
export class ReportComponentImpl extends ReportComponent {
  submissions$: Observable<FormSubmissionVO[]>;
  submissions: FormSubmissionVO[] = [];
  licensees: string[] = [];
  forms: FormVO[] = [];
  fullReport: FormReport[] = [];
  report: any = {};

  submissionSearchForm: FormGroup;

  constructor(private injector: Injector) {
    super(injector);
    this.submissions$ = this.store.pipe(select(SubmissionSelectors.selectFormSubmissions));
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit() {
    this.route.queryParams.subscribe((queryParams: any) => {
      let ids = queryParams?.submissions?.map((id: string) => +id);
      this.store.dispatch(
        SubmissionActions.findByIds({
          ids: ids,
          loaderMessage: `Loading ${ids?.length} submissions for report generation ....`,
          loading: true,
        })
      );
    });

    this.submissions$.subscribe((submissions) => {
      this.submissions = submissions;
      this.licensees = [...new Set(submissions.map((submission) => submission.licensee.licenseeName))];

      submissions
        .map((submission) => submission.form)
        .forEach((form) => {
          let fs: FormVO[] = this.forms.filter((f) => f.code === form.code);
          if (!fs || fs.length === 0) {
            this.forms.push(form);
          }
        });

      this.forms.forEach((form) => {
        let rep: FormReport = new FormReport();

        rep.formSubmissions = submissions.filter((submission) => submission.form.formName === form.formName);
        rep.formName = form.formName;
        rep.formCode = form.code;
        this.fullReport.push(rep);
        this.formReportsControl.push(this.createFormReportGroup(rep));
      });

      this.report = this.reportForm.value
    });
  }

  override afterOnInit(): void {}

  get formReportsControl(): FormArray {
    return this.reportForm.get('formReports') as FormArray;
  }

  get formReports(): FormReport[] {
    return this.formReportsControl.value
  }

  actionOnElement(index: number) {
  }

  createSubmissionsControl(submission: FormSubmissionVO): FormGroup {
    return this.formBuilder.group({
      id: submission.id,
    });
  }

  createSubmissionsArrayControl(submissions: FormSubmissionVO[]) {
    let formArray: FormArray = this.formBuilder.array([]);
    submissions.forEach((sub) => {
      formArray.push(new FormControl(sub.id));
    });

    return formArray;
  }

  createFormReportGroup(formReport: FormReport): FormGroup {
    return this.formBuilder.group({
      formName: [{ value: formReport?.formName, disabled: false }],
      formCode: [{ value: formReport?.formCode, disabled: false }],
      licensees: this.formBuilder.array([...new Set(formReport?.formSubmissions?.map(sub => sub?.licensee?.licenseeName))]),
      formSubmissions: this.formBuilder.array(formReport?.formSubmissions),
      reportElements: this.formBuilder.array([]),
    });
  }

  override newForm(): FormGroup {
    return this.formBuilder.group({
      formReports: this.formBuilder.array([]),
    });
  }

  getLabels(index: number, element: AbstractControl) {
    this.report = this.reportForm.value
    const reportElement = element?.value;

    if(reportElement?.reportLabels === 'licensees') {

      let el: FormGroup = element as FormGroup;

    } else if(reportElement?.reportLabels === 'periods') {
    }
  }

  generateReport(formIndex: number, elementIndex: number) {

    this.report = this.reportForm.value
    const reportType = this.formReports[formIndex]?.reportElements[elementIndex]?.reportType;

    if(reportType === 'default') {
      
    }
  }
}
