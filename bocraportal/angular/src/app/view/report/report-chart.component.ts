// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { AfterViewInit, Component, Injector, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { ChartDataset } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';

export class ReportChart {
  chartLabel: string = '';
  chartType: string = '';
  labels: string[] = [];
  data: number[] = [];
  chartCaption: string = '';
}

@Component({
  selector: 'app-report-chart',
  templateUrl: './report-chart.component.html',
})
export class ReportChartComponent implements OnInit, AfterViewInit, OnDestroy {
  @Input() reportChartGroup: FormGroup | any;
  protected formBuilder: FormBuilder;

  @Input() selectedFields: any[];
  @Input() selectedLicensees: any[];
  @Input() selectedPeriods: any[];

  @Input() reportType: string;
  @Input() dataColumns: string;
  @Input() dataRows: string;
  @Input() colors: any;
  @Input() chartIndex: number;
  @Input() grid: any;

  sections: any[] = [];
  periods: any[] = [];
  labelNames: string[] = [];
  chartData: any = [];

  @ViewChild(BaseChartDirective) chart: BaseChartDirective;

  datasets: ChartDataset[] = [];

  constructor(private injector: Injector) {
    this.formBuilder = this.injector.get(FormBuilder);
  }

  ngOnInit(): void {
    this.reportChartGroup.addControl('period', this.formBuilder.control([]));
    this.reportChartGroup.addControl('section', this.formBuilder.control([]));
    this.chartTypeControl.patchValue('bar');
    this.periodControl.patchValue('all');

    this.datasets = this.basicDatasets();
  }

  ngAfterViewInit(): void {}

  ngOnDestroy(): void {}

  basicDatasets() {
    let tset = {};
    this.labelNames = [];
    this.periods = [];

    let columns = this.dataColumns === 'licensees' ? this.selectedLicensees : this.selectedFields;
    let rows = this.dataColumns === 'licensees' ? this.selectedFields : this.selectedLicensees;

    let colSelector = this.dataColumns === 'licensees' ? 'licensee' : 'alias';
    let rowSelector = this.dataColumns === 'licensees' ? 'alias' : 'licensee';
    let colourSelector = this.dataColumns === 'licensees' ? 'licensee' : 'fieldId';

    let periods =
      this.period === 'all' ? this.selectedPeriods : this.selectedPeriods.filter((p) => this.period === p?.period);

    periods?.forEach((pr) => {
      let gridValues = Object.values(this.grid);

      rows.forEach((row) => {
        let found: any = gridValues.find((gv: any) => gv?.label === row[rowSelector]);
        let key = periods.length > 1 ? `${pr.alias}: ${row[rowSelector]}` : row[rowSelector];

        if (tset[key]?.data === undefined) {
          tset[key] = {
            label: key,
            backgroundColor: this.colors[row[colourSelector]],
            data: [],
          };
        }

        let fvalues = Object.values(found);
        columns?.forEach((col) => {
          let foundData: any = fvalues.find((fv: any) => fv?.period === pr.period && fv?.label === col[colSelector]);
          tset[key]?.data.push(foundData ? foundData.value : '0');
        });
      });
    });

    let dset: any[] = [];

    periods.forEach((pr) => {
      rows.forEach((row) => {
        let key = periods.length > 1 ? `${pr.alias}: ${row[rowSelector]}` : row[rowSelector];

        if (tset[key]) {
          if (this.dataRows === 'licensees') {
            tset[key].backgroundColor = this.colors[row[rowSelector]];
          }
          dset.push(tset[key]);
        }
      });
    });

    this.labelNames =
      this.dataColumns === 'licensees'
        ? this.selectedLicensees?.map((lic) => lic.licensee)
        : this.selectedFields?.map((fl) => fl.alias);

    this.periods = this.selectedPeriods?.map((per) => per.alias);

    return dset;
  }

  newForm(chart: ReportChart): FormGroup {
    return this.formBuilder.group({
      chartLabel: [chart?.chartLabel],
      chartType: [chart?.chartType],
      chartCaption: [chart?.chartCaption],
      labels: this.formBuilder.array(chart?.labels),
      data: this.formBuilder.array(chart?.data),
    });
  }

  selectedPeriod() {
    this.datasets = this.basicDatasets();
  }

  selectedFormSection() {}

  get chartTypeControl() {
    return this.reportChartGroup.get('chartType') as FormControl;
  }

  get chartType() {
    return this.chartTypeControl.value;
  }

  get periodControl() {
    return this.reportChartGroup.get('period') as FormControl;
  }

  get period() {
    return this.periodControl.value;
  }

  get sectionControl() {
    return this.reportChartGroup.get('section') as FormControl;
  }

  get section() {
    return this.sectionControl.value;
  }

  selectedChartType() {
    if (this.chartType === 'bar') {
      this.datasets = this.basicDatasets();
    }
  }

  clearReport() {}

  refreshChart() {
    this.datasets = this.basicDatasets();
  }
}
