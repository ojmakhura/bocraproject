// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import {
  AfterViewInit,
  Component, Injector,
  Input,
  OnDestroy,
  OnInit, ViewChild
} from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { ChartDataset } from 'chart.js';
import { i } from 'mathjs';
import { BaseChartDirective } from 'ng2-charts';

export class ReportChart {
  chartLabel: string = '';
  chartType: string = '';
  labels: string[] = [];
  data: number[] = [];
  chartCaption: string = '';
}

@Component({
  selector: 'app-report-chart',
  templateUrl: './report-chart.component.html',
})
export class ReportChartComponent implements OnInit, AfterViewInit, OnDestroy {
  @Input() reportChartGroup: FormGroup | any;
  protected formBuilder: FormBuilder;

  @Input() selectedFields: any[];
  @Input() selectedLicensees: any[];
  @Input() selectedPeriods: any[];

  @Input() reportType: string;
  @Input() dataColumns: string;
  @Input() dataRows: string;
  @Input() colors: any;
  @Input() chartIndex: number;
  @Input() grid: any;

  sections: any[] = [];
  periods: any[] = [];
  labelNames: string[] = [];
  chartData: any = [];

  @ViewChild(BaseChartDirective) chart: BaseChartDirective;

  datasets: ChartDataset[] = [];

  constructor(private injector: Injector) {
    this.formBuilder = this.injector.get(FormBuilder);
  }

  ngOnInit(): void {
    this.reportChartGroup.addControl('period', this.formBuilder.control([]));
    this.reportChartGroup.addControl('section', this.formBuilder.control([]));
    this.chartTypeControl.patchValue('bar');
    this.periodControl.patchValue('all');

    this.datasets = this.basicDatasets();

  }

  ngAfterViewInit(): void {
  }

  ngOnDestroy(): void {}

  basicDatasets() {
    let tset = {};
    this.labelNames = [];
    this.periods = [];
    console.log(this.grid);

    Object.keys(this.grid)?.forEach(g => {

      let tmp = this.grid[g];

      let rowMatch = undefined;

      if(this.dataRows === 'fields') {
        rowMatch = this.selectedFields.find(fd => fd.fieldName === tmp.label);
      } else {
        rowMatch = this.selectedLicensees.find(lic => lic.licensee === tmp.label);
      }

      if(rowMatch === undefined) {
        return;
      }
      
      Object.keys(tmp)?.forEach(h => {

        let key = `${tmp[h].period}: ${tmp.label}`;
        

        if(tmp[h].period) {

          if(this.labelNames.find(name => name === tmp[h].label) === undefined) {
            this.labelNames.push(tmp[h].label)
          }

          if(this.periods.find(per => per === tmp[h].period) === undefined) {
            this.periods.push(tmp[h].period);
          }

          if(tset[key]?.data === undefined) {
            tset[key] = {
              label: key,
              backgroundColor: this.colors[tmp.elementId],
              data: []
            };
          }

          tset[key].data.push(tmp[h]?.value)
        }
      });
    });

    console.log(tset)

    let dset: any[] = [];

    this.selectedPeriods.forEach(period => {
      // console.log(period);

      if(this.dataRows === 'licensees') {
        
        this.selectedLicensees.forEach(lic => {
          // console.log(lic);
          let key = `${period.period}: ${lic.licensee}`;

          if(tset[key]) {
            tset[key].backgroundColor = this.colors[lic.licensee];
            dset.push(tset[key]);
          }
          
        });
      } else {
        this.selectedFields.forEach(field => {
          let key = `${period.period}: ${field.fieldName}`;
          if(tset[key]) {
            // console.log(key, tset[key]);
            dset.push(tset[key]);
          }
        });
      }

    });

    console.log(dset)
    return dset;
  }

  newForm(chart: ReportChart): FormGroup {
    return this.formBuilder.group({
      chartLabel: [chart?.chartLabel],
      chartType: [chart?.chartType],
      chartCaption: [chart?.chartCaption],
      labels: this.formBuilder.array(chart?.labels),
      data: this.formBuilder.array(chart?.data),
    });
  }

  selectedPeriod() {
    this.datasets = this.basicDatasets();
  }

  selectedFormSection() {}

  get chartTypeControl() {
    return this.reportChartGroup.get('chartType') as FormControl;
  }

  get chartType() {
    return this.chartTypeControl.value;
  }

  get periodControl() {
    return this.reportChartGroup.get('period') as FormControl;
  }

  get period() {
    return this.periodControl.value;
  }

  get sectionControl() {
    return this.reportChartGroup.get('section') as FormControl;
  }

  get section() {
    return this.sectionControl.value;
  }

  selectedChartType() {
    if (this.chartType === 'bar') {
      this.datasets = this.basicDatasets();
    }
  }

  clearReport() {}

  refreshChart() {
    this.datasets = this.basicDatasets();
  }
}
