// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { LicenseeGroupVO } from '@app/model/bw/org/bocra/portal/group/licensee-group-vo';
import { LicenseeGroupCriteria } from '@app/model/bw/org/bocra/portal/group/licensee-group-criteria';
import * as GroupActions from './group.action';

export const groupKey = "group";

export interface GroupState {
    licenseeGroup: LicenseeGroupVO;
    licenseeGroups: LicenseeGroupVO[];
    searchCriteria: LicenseeGroupCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: GroupState = {
    licenseeGroup: new LicenseeGroupVO,
    licenseeGroups: [],
    searchCriteria: new LicenseeGroupCriteria,
    loading: false,
    id: 0,
    error: null
};

export const groupReducer = createReducer(
    initialState,
    on(GroupActions.saveGroup, (state, action) => ({
        ...state,
        licenseeGroup: action.group
    })),
    on(GroupActions.saveGroupSuccess, (state, action) => ({
        ...state,
        licenseeGroup: action.group,
        licenseeGroups: [...state.licenseeGroups, action.group]
    })),
    on(GroupActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(GroupActions.findByIdSuccess, (state, action) => ({
        ...state,
        licenseeGroup: action.group,
        licenseeGroups: [...state.licenseeGroups, action.group]
    })),
    on(GroupActions.loadAll, (state, action) => ({
        ...state
    })),
    on(GroupActions.loadAllSuccess, (state, action) => ({
        ...state,
        licenseeGroup: new LicenseeGroupVO,
        licenseeGroupArray: action.groups
    })),
    on(GroupActions.searchGroups, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(GroupActions.searchGroupsSuccess, (state, action) => ({
        ...state,
        licenseeGroup: new LicenseeGroupVO,
        searchCriteria: new LicenseeGroupCriteria,
        licenseeGroupArray: action.groups
    })),
    on(GroupActions.actionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const groupFeature = createFeature(
    {
        name: groupKey,
        reducer: groupReducer
    }
);
