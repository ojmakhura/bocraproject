// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { LicenseeGroupRestControllerImpl } from '@app/service/bw/org/bocra/portal/group/licensee-group-rest-controller-impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as GroupActions from './group.action';

@Injectable()
export class GroupEffects {
  constructor(private actions$: Actions, private licenseeGroupService: LicenseeGroupRestControllerImpl) {}

  saveGroup$ = createEffect(() => 
    this.actions$.pipe(
      ofType(GroupActions.saveGroup),
      mergeMap(({group}) => this.licenseeGroupService.save(group).pipe(
        map(group => GroupActions.saveGroupSuccess({group})),
        catchError(({error}) => [GroupActions.groupActionFailure(error)])
      ))
    )
  );

  findById$ = createEffect(() => 
    this.actions$.pipe(
      ofType(GroupActions.findById),
      mergeMap(({id}) => this.licenseeGroupService.findById(id).pipe(
        map(group => GroupActions.findByIdSuccess({group})),
        catchError(({error}) => [GroupActions.groupActionFailure(error)])
      ))
    )
  );

  loadAll$ = createEffect(() => 
    this.actions$.pipe(
      ofType(GroupActions.loadAll),
      mergeMap(() => this.licenseeGroupService.getAll().pipe(
        map(groups => GroupActions.loadAllSuccess({groups})),
        catchError(({error}) => [GroupActions.groupActionFailure(error)])
      ))
    )
  );

  searchGroups$ = createEffect(() => 
    this.actions$.pipe(
      ofType(GroupActions.searchGroups),
      mergeMap(({searchCriteria}) => this.licenseeGroupService.search(searchCriteria).pipe(
        map(groups => GroupActions.searchGroupsSuccess({groups})),
        catchError(({error}) => [GroupActions.groupActionFailure(error)])
      ))
    )
  );
}
