// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-licensee-vo';
import { LicenseeCriteria } from '@app/model/bw/org/bocra/portal/licensee/licensee-criteria';
import * as LicenseeActions from './licensee.action';

export const licenseeKey = "licensee";

export interface LicenseeState {
    licensee: LicenseeVO;
    licensees: LicenseeVO[];
    searchCriteria: LicenseeCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: LicenseeState = {
    licensee: new LicenseeVO,
    licensees: [],
    searchCriteria: new LicenseeCriteria,
    loading: false,
    id: 0,
    error: null
};

export const licenseeReducer = createReducer(
    initialState,
    on(LicenseeActions.saveLicensee, (state, action) => ({
        ...state,
        licensee: action.licensee
    })),
    on(LicenseeActions.saveLicenseeSuccess, (state, action) => ({
        ...state,
        licensee: action.licensee,
        licensees: [...state.licensees, action.licensee]
    })),
    on(LicenseeActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(LicenseeActions.findByIdSuccess, (state, action) => ({
        ...state,
        licensee: action.licensee,
        licensees: [...state.licensees, action.licensee]
    })),
    on(LicenseeActions.loadAll, (state, action) => ({
        ...state
    })),
    on(LicenseeActions.loadAllSuccess, (state, action) => ({
        ...state,
        licensee: new LicenseeVO,
        licenseeArray: action.licensees
    })),
    on(LicenseeActions.searchLicensees, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(LicenseeActions.searchLicenseesSuccess, (state, action) => ({
        ...state,
        licensee: new LicenseeVO,
        searchCriteria: new LicenseeCriteria,
        licenseeArray: action.licensees
    })),
    on(LicenseeActions.actionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const licenseeFeature = createFeature(
    {
        name: licenseeKey,
        reducer: licenseeReducer
    }
);
