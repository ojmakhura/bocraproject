// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { EditLicenseeComponent, EditLicenseeDeleteForm, EditLicenseeVarsForm } from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSaveForm } from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSearchForm } from '@app/view/licensee/edit-licensee.component';
import * as licenseeSelectors from '@app/store/licensee/licensee.selector';
import * as licenseeActions from '@app/store/licensee/licensee.action';
import { Observable } from 'rxjs';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { select } from '@ngrx/store';

@Component({
  selector: 'app-edit-licensee',
  templateUrl: './edit-licensee.component.html',
  styleUrls: ['./edit-licensee.component.scss']
})
export class EditLicenseeComponentImpl extends EditLicenseeComponent {

  licensee$: Observable<LicenseeVO>;
  licensees$: Observable<LicenseeVO[]>;
  id$: Observable<number>;

    constructor(private injector: Injector) {
        super(injector);
        this.licensee$ = this.store.pipe(select(licenseeSelectors.selectLicensee))
        this.licensees$ = this.store.pipe(select(licenseeSelectors.selectLicensees))
        this.id$ = this.store.pipe(select(licenseeSelectors.selectId))
    }

    beforeOnInit(){
    }
	
    afterOnInit() {
      if(this.useCaseScope.pageVariables['id']) {
        this.store.dispatch(licenseeActions.findById({id: this.useCaseScope.pageVariables['id']}));
      }
  
      this.licensee$.subscribe(licensee => {
        this.setEditLicenseeSaveForm({licenseeVO: licensee} as EditLicenseeSaveForm);
      });
    }

    doNgAfterViewInit() {
    }

    handleFormChanges(change: any) {
    }

    /**
     * This method may be overwritten
     */
    afterSetEditLicenseeSaveForm(form: EditLicenseeSaveForm): void {

    }

    /**
     * This method may be overwritten
     */
    beforeEditLicenseeSave(form: EditLicenseeSaveForm): void {
      this.store.dispatch(licenseeActions.saveLicensee({licensee: form.licenseeVO}));
    }

    /**
     * This method may be overwritten
     */
    afterEditLicenseeSave(form: EditLicenseeSaveForm): void {

    }
    
    /**
     * This method may be overwritten
     */
    // afterSetEditLicenseeNewForm(form: EditLicenseeNewForm): void {

    // }

    /**
     * This method may be overwritten
     */
    // beforeEditLicenseeNew(form: EditLicenseeNewForm): void {
    //   this.store.dispatch(licenseeActions.reset());
    // }

    /**
     * This method may be overwritten
     */
    // afterEditLicenseeNew(form: EditLicenseeNewForm): void {

    // }
    
    /**
     * This method may be overwritten
     */
    afterSetEditLicenseeSearchForm(form: EditLicenseeSearchForm): void {

    }

    /**
     * This method may be overwritten
     */
    beforeEditLicenseeSearch(form: EditLicenseeSearchForm): void {

    }

    /**
     * This method may be overwritten
     */
    afterEditLicenseeSearch(form: EditLicenseeSearchForm): void {

    }
    
  afterSetEditLicenseeDeleteForm(form: EditLicenseeDeleteForm): void {
  }

  beforeEditLicenseeDelete(form: EditLicenseeDeleteForm): void {
  }

  afterEditLicenseeDelete(form: EditLicenseeDeleteForm): void {
  }

  afterSetEditLicenseeVarsForm(form: EditLicenseeVarsForm): void {
  }
  
}