// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import {
  EditLicenseeComponent,
  EditLicenseeDeleteForm,
  EditLicenseeDocumentsForm,
  EditLicenseeNewDocumentForm,
  EditLicenseeNewShareholderForm,
  EditLicenseeVarsForm,
} from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSaveForm } from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSearchForm } from '@app/view/licensee/edit-licensee.component';
import * as licenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as licenseeActions from '@app/store/licensee/licensee.actions';
import { Observable } from 'rxjs';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { UserVO } from '@app/model/bw/org/bocra/portal/user/user-vo';
import { LicenceTypeVO } from '@app/model/bw/org/bocra/portal/licence/type/licence-type-vo';
import { LicenceTypeCriteria } from '@app/model/bw/org/bocra/portal/licence/type/licence-type-criteria';
import * as LicenceTypeActions from '@app/store/licence/type/licence-type.actions';
import * as LicenceTypeSelectors from '@app/store/licence/type/licence-type.selectors';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { LicenceVO } from '@app/model/bw/org/bocra/portal/licence/licence-vo';

@Component({
  selector: 'app-edit-licensee',
  templateUrl: './edit-licensee.component.html',
  styleUrls: ['./edit-licensee.component.scss'],
})
export class EditLicenseeComponentImpl extends EditLicenseeComponent {
  protected keycloakService: KeycloakService;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
    this.licenceTypes$ = this.store.pipe(select(LicenceTypeSelectors.selectLicenceTypes));
  }

  beforeOnInit() {}

  afterOnInit() {
    if (this.useCaseScope.pageVariables['id']) {
      this.store.dispatch(licenseeActions.findById({
        id: this.useCaseScope.pageVariables['id'],
        loading: true
      }));
    }

    this.licensee$.subscribe((licensee) => {
      this.setEditLicenseeSaveForm({ licensee: licensee } as EditLicenseeSaveForm);
    });
  }

  doNgAfterViewInit() {}

  handleFormChanges(change: any) {}

  doNgOnDestroy(){}

  /**
   * This method may be overwritten
   */
  afterSetEditLicenseeSaveForm(form: EditLicenseeSaveForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditLicenseeSave(form: EditLicenseeSaveForm): void {
    if(form.licensee?.id) {

      form.licensee.updatedBy = this.keycloakService.getUsername();
      form.licensee.updatedDate = new Date();
    } else {
      form.licensee.createdBy = this.keycloakService.getUsername();
      form.licensee.createdDate = new Date();
    }
    
    this.store.dispatch(licenseeActions.save({
      licensee: form.licensee,
      loading: true
    }));
  }

  /**
   * This method may be overwritten
   */
  afterEditLicenseeSave(form: EditLicenseeSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditLicenseeSearchForm(form: EditLicenseeSearchForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditLicenseeSearch(form: EditLicenseeSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditLicenseeSearch(form: EditLicenseeSearchForm): void {}

  afterSetEditLicenseeDeleteForm(form: EditLicenseeDeleteForm): void {}

  beforeEditLicenseeDelete(form: EditLicenseeDeleteForm): void {}

  afterEditLicenseeDelete(form: EditLicenseeDeleteForm): void {}

  afterSetEditLicenseeVarsForm(form: EditLicenseeVarsForm): void {}

  handleLicenseeLicenceTypesAddDialog(): void {}

  handleLicenseeUsersAddDialog(): void {}

  handleLicenseeUsersSearch(): void {
  }

  handleLicenseeUsersSelected(event: MatCheckboxChange, element: UserVO): void {
  }

  handleLicenseeLicenceTypesSearch(): void {
    let criteria: LicenceTypeCriteria = new LicenceTypeCriteria();
    criteria.typeSearch = this.licenseeLicenceTypesSearchField.value;
    this.store.dispatch(LicenceTypeActions.search({
      criteria: criteria,
      loading: true
    }));
  }
  
  handleLicenseeLicenceTypesSelected(event: MatCheckboxChange, element: LicenceTypeVO): void {
  }

  afterSetEditLicenseeDocumentsForm(form: EditLicenseeDocumentsForm): void {
  }

  beforeEditLicenseeDocuments(form: EditLicenseeDocumentsForm): void {
  }

  afterEditLicenseeDocuments(form: EditLicenseeDocumentsForm): void {
  }

  afterSetEditLicenseeNewShareholderForm(form: EditLicenseeNewShareholderForm): void {
  }

  beforeEditLicenseeNewShareholder(form: EditLicenseeNewShareholderForm): void {
  }

  afterEditLicenseeNewShareholder(form: EditLicenseeNewShareholderForm): void {
  }

  afterSetEditLicenseeNewDocumentForm(form: EditLicenseeNewDocumentForm): void {
  }

  beforeEditLicenseeNewDocument(): void {
  }

  afterEditLicenseeNewDocument(): void {
  }

  handleLicenseeLicencesAddDialog(): void {
  }

  handleLicenseeLicencesSearch(): void {
  }

  handleLicenseeLicencesSelected(event: MatCheckboxChange, data: LicenceVO): void {
  }

  handleLicenseeDocumentsAddDialog(): void {
  }

  handleLicenseeDocumentsSearch(): void {
  }

  handleLicenseeDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {
  }
}
