// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import {
  EditLicenseeComponent,
  EditLicenseeDeleteForm,
  EditLicenseeDocumentsForm,
  EditLicenseeNewDocumentForm,
  EditLicenseeNewShareholderForm,
  EditLicenseeVarsForm,
} from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSaveForm } from '@app/view/licensee/edit-licensee.component';
import { EditLicenseeSearchForm } from '@app/view/licensee/edit-licensee.component';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import { Observable } from 'rxjs';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { UserVO } from '@app/model/bw/org/bocra/portal/user/user-vo';
import * as SectorActions from '@app/store/sector/sector.actions';
import * as SectorSelectors from '@app/store/sector/sector.selectors';
import * as DocumentActions from '@app/store/document/document.actions';
import * as DocumentSelectors from '@app/store/document/document.selectors';
import * as LicenceActions from '@app/store/licence/licence.actions';
import * as LicenceSelectors from '@app/store/licence/licence.selectors';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { LicenceVO } from '@app/model/bw/org/bocra/portal/licence/licence-vo';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { SectorVO } from '@app/model/bw/org/bocra/portal/sector/sector-vo';

@Component({
  selector: 'app-edit-licensee',
  templateUrl: './edit-licensee.component.html',
  styleUrls: ['./edit-licensee.component.scss'],
})
export class EditLicenseeComponentImpl extends EditLicenseeComponent {

  protected keycloakService: KeycloakService;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
    this.licenseeSectors$ = this.store.pipe(select(SectorSelectors.selectSectors))
    this.licenseeDocuments$ = this.store.pipe(select(DocumentSelectors.selectDocuments))
    this.licenseeLicences$ = this.store.pipe(select(LicenceSelectors.selectLicences))
  }

  beforeOnInit(form: EditLicenseeVarsForm): EditLicenseeVarsForm {
    return form;
  }

  afterOnInit() {
    if (this.useCaseScope.pageVariables['id']) {
      this.store.dispatch(
        LicenseeActions.findById({
          id: this.useCaseScope.pageVariables['id'],
          loading: true,
        })
      );
    }

    this.licensee$.subscribe((licensee) => {
      this.setEditLicenseeSaveForm({ licensee: licensee } as EditLicenseeSaveForm);
    });
  }

  doNgAfterViewInit() {}

  handleFormChanges(change: any) {}

  doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
  afterSetEditLicenseeSaveForm(form: EditLicenseeSaveForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditLicenseeSave(form: EditLicenseeSaveForm): void {
    if (form.licensee?.id) {
      form.licensee.updatedBy = this.keycloakService.getUsername();
      form.licensee.updatedDate = new Date();
    } else {
      form.licensee.createdBy = this.keycloakService.getUsername();
      form.licensee.createdDate = new Date();
    }

    this.store.dispatch(
      LicenseeActions.save({
        licensee: form.licensee,
        loading: true,
      })
    );
  }

  /**
   * This method may be overwritten
   */
  afterEditLicenseeSave(form: EditLicenseeSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditLicenseeSearchForm(form: EditLicenseeSearchForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditLicenseeSearch(form: EditLicenseeSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditLicenseeSearch(form: EditLicenseeSearchForm): void {}

  afterSetEditLicenseeDeleteForm(form: EditLicenseeDeleteForm): void {}

  beforeEditLicenseeDelete(form: EditLicenseeDeleteForm): void {}

  afterEditLicenseeDelete(form: EditLicenseeDeleteForm): void {}

  afterSetEditLicenseeVarsForm(form: EditLicenseeVarsForm): void {}

  handleLicenseeUsersAddDialog(): void {}

  handleLicenseeUsersSearch(): void {}

  handleLicenseeUsersSelected(event: MatCheckboxChange, element: UserVO): void {}

  afterSetEditLicenseeDocumentsForm(form: EditLicenseeDocumentsForm): void {}

  beforeEditLicenseeDocuments(form: EditLicenseeDocumentsForm): void {}

  afterEditLicenseeDocuments(form: EditLicenseeDocumentsForm): void {}

  afterSetEditLicenseeNewShareholderForm(form: EditLicenseeNewShareholderForm): void {}

  beforeEditLicenseeNewShareholder(form: EditLicenseeNewShareholderForm): void {}

  afterEditLicenseeNewShareholder(form: EditLicenseeNewShareholderForm): void {}

  afterSetEditLicenseeNewDocumentForm(form: EditLicenseeNewDocumentForm): void {}

  beforeEditLicenseeNewDocument(): void {}

  afterEditLicenseeNewDocument(): void {}

  handleLicenseeLicencesAddDialog(): void {}

  handleLicenseeLicencesSearch(): void {

    let criteria: string = '';
    criteria = this.licenseeLicencesSearchField.value;
    this.store.dispatch(LicenceActions.search({
      criteria: { licenceNumber: criteria },
      loading: true
    }));
  }

  handleLicenseeLicencesSelected(event: MatCheckboxChange, data: LicenceVO): void {}

  handleLicenseeDocumentsAddDialog(): void {}

  handleLicenseeDocumentsSearch(): void {

    let criteria: string = '';
    criteria = this.licenseeDocumentsSearchField.value;
    this.store.dispatch(DocumentActions.search({
      criteria:  criteria,
      loading: true
    }));
  }

  handleLicenseeDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {}

  handleLicenseeFormsAddDialog(): void {}
  handleLicenseeFormsSearch(): void {

    let criteria: string = '';
    criteria = this.licenseeFormsSearchField.value;
    this.store.dispatch(FormActions.searchForms({
      criteria: {code: criteria, formName: criteria},
      loading: true
    }));
  }
  handleLicenseeFormsSelected(event: MatCheckboxChange, data: FormVO): void {}

  handleLicenseeSectorsAddDialog(): void {
  }
  handleLicenseeSectorsSearch(): void {

    let criteria: string = '';
    criteria = this.licenseeSectorsSearchField.value;
    this.store.dispatch(SectorActions.search({
      criteria: criteria,
      loading: true
    }));
  }
  handleLicenseeSectorsSelected(event: MatCheckboxChange, data: SectorVO): void {
  }
}
