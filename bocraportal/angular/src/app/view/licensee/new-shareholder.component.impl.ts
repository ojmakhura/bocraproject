// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, Inject } from '@angular/core';
import {
  EditShareholderNewDocumentForm,
  NewShareholderComponent,
  NewShareholderVarsForm,
} from '@app/view/licensee/new-shareholder.component';
import { LicenseeState } from '@app/store/licensee/licensee.state';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import * as ShareholderSelectors from '@app/store/shareholder/shareholder.selectors';
import * as ShareholderActions from '@app/store/shareholder/shareholder.actions';
import * as DocumentActions from '@app/store/document/document.actions';
import * as DocumentSelectors from '@app/store/document/document.selectors';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { SelectItem } from '@app/utils/select-item';
import { select } from '@ngrx/store';
import { DocumentMetadataTarget } from '@app/model/bw/org/bocra/portal/document/document-metadata-target';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { Observable } from 'rxjs';
import { FormGroup } from '@angular/forms';
import { saveAs } from 'file-saver';
import { LicenseeShareholderVO } from '@app/model/bw/org/bocra/portal/licensee/shares/licensee-shareholder-vo';

@Component({
  selector: 'app-new-shareholder',
  templateUrl: './new-shareholder.component.html',
  styleUrls: ['./new-shareholder.component.scss'],
})
export class NewShareholderComponentImpl extends NewShareholderComponent {
  shareholderDocument$: Observable<DocumentVO>;
  file$: Observable<Blob>;

  constructor(@Inject(MAT_DIALOG_DATA) data: any, private injector: Injector) {
    super(data, injector);
    this.shareholderLicensees$ = this.store.pipe(select(LicenseeSelectors.selectLicensees));
    this.shareholderShareholders$ = this.store.pipe(select(ShareholderSelectors.selectShareholders));
    this.shareholderDocument$ = this.store.pipe(select(DocumentSelectors.selectDocument));
    this.shareholderLicenseeBackingList = [];
    this.shareholderShareholderBackingList = [];
    this.file$ = this.store.pipe(select(DocumentSelectors.selectFile));
  }

  override beforeOnInit(form: NewShareholderVarsForm): NewShareholderVarsForm {
    this.store.dispatch(LicenseeActions.getAll({ loading: true, loaderMessage: 'Loading all licensees ...' }));
    this.shareholderLicensees$.subscribe((licensees) => {
      licensees.forEach((licensee) => {
        let item: SelectItem = new SelectItem();
        item.label = licensee.licenseeName;
        item.value = licensee.id;
        this.shareholderLicenseeBackingList.push(item);
      });
    });

    this.store.dispatch(ShareholderActions.getAll({ loading: true, loaderMessage: 'Loading all shareholders ...' }));
    this.shareholderShareholders$.subscribe((shareholders) => {
      shareholders.forEach((shareholder) => {
        let item: SelectItem = new SelectItem();
        item.label = shareholder.name;
        item.value = shareholder.id;
        this.shareholderShareholderBackingList.push(item);
      });
    });

    if (this.useCaseScope.pageVariables['shareholder']) {
      form.shareholder = this.useCaseScope.pageVariables['shareholder'];
    } else {
      if (!form?.shareholder) {
        form.shareholder = new LicenseeShareholderVO();
      }
      form.shareholder.form = this.dialogData?.form;
    }

    return form;
  }

  override ngAfterViewInit(): void {
    this.shareholderDocument$.subscribe((document) => {
      if (document?.id) {
        this.addToShareholderDocuments(document);
      }
    });
  }

  doNgOnDestroy(): void {}

  override afterEditShareholderNewDocument(form: EditShareholderNewDocumentForm, dialogData: any): void {
    if (dialogData) {
      this.addToShareholderDocuments(dialogData.document);
    }
  }

  override createDocumentVOGroup(value: DocumentVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      documentType: [value?.documentType],
      documentName: [value?.documentName],
      file: [value?.file],
      documentId: [value?.documentId],
      extension: [value?.extension],
      size: [value?.size],
      metadataTarget: [value?.metadataTarget],
      metadataTargetId: [value?.metadataTargetId],
    });
  }

  fileDownload(documentId: number, documentName: string) {
    this.store.dispatch(
      DocumentActions.downloadFile({
        documentId: documentId,
        loading: true,
        loaderMessage: 'Downloading document ...',
      })
    );

    this.file$.subscribe((file: any) => {
      if (file) {
        let blob: any = file as Blob;
        const url = window.URL.createObjectURL(blob);
        saveAs(blob, documentName);
      }
    });
  }
}
