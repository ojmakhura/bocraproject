// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, Inject } from '@angular/core';
import { NewShareholderComponent, NewShareholderVarsForm } from '@app/view/licensee/new-shareholder.component';
import { LicenseeState } from '@app/store/licensee/licensee.state';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import * as ShareholderSelectors from '@app/store/shareholder/shareholder.selectors';
import * as ShareholderActions from '@app/store/shareholder/shareholder.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { SelectItem } from '@app/utils/select-item';
import { select } from '@ngrx/store';

@Component({
  selector: 'app-new-shareholder',
  templateUrl: './new-shareholder.component.html',
  styleUrls: ['./new-shareholder.component.scss']
})
export class NewShareholderComponentImpl extends NewShareholderComponent {

  constructor(@Inject(MAT_DIALOG_DATA) data: any, private injector: Injector) {
    super(data, injector);
    this.shareholderLicensees$ = this.store.pipe(select(LicenseeSelectors.selectLicensees));
    this.shareholderShareholders$ = this.store.pipe(select(ShareholderSelectors.selectShareholders));
    this.shareholderLicenseeBackingList = [];
    this.shareholderShareholderBackingList = [];
  }

  override beforeOnInit(form: NewShareholderVarsForm): NewShareholderVarsForm {

    this.store.dispatch(LicenseeActions.getAll({loading: true, loaderMessage: 'Loading all licensees ...'}));
    this.shareholderLicensees$.subscribe(licensees => {
      licensees.forEach(licensee => {
        let item: SelectItem = new SelectItem;
        item.label = licensee.licenseeName
        item.value = licensee.id
        this.shareholderLicenseeBackingList.push(item);
      });
    });

    this.store.dispatch(ShareholderActions.getAll({loading: true, loaderMessage: 'Loading all shareholders ...'}));
    this.shareholderShareholders$.subscribe(shareholders => {
      shareholders.forEach(shareholder => {
        let item: SelectItem = new SelectItem;
        item.label = shareholder.name
        item.value = shareholder.id
        this.shareholderShareholderBackingList.push(item);
      });
    });

    return form;
  }

  doNgOnDestroy(): void {
  }
}