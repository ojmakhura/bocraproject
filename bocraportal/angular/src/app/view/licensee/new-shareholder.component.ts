// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    Injector, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    Inject,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import {MatDialogRef} from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { LicenseeState } from '@app/store/licensee/licensee.state';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';

import { LicenseeShareholderRestController } from '@app/service/bw/org/bocra/portal/licensee/shares/licensee-shareholder-rest-controller';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { LicenseeShareholderVO } from '@app/model/bw/org/bocra/portal/licensee/shares/licensee-shareholder-vo';
import { DocumentRestController } from '@app/service/bw/org/bocra/portal/document/document-rest-controller';
import { ShareholderVO } from '@app/model/bw/org/bocra/portal/shareholder/shareholder-vo';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { LicenseeControllerImpl } from '@app/controller/licensee/licensee-controller.impl';
import { LicenseeRestController } from '@app/service/bw/org/bocra/portal/licensee/licensee-rest-controller';
import { NewShareholderComponentImpl } from '@app/view/licensee/new-shareholder.component.impl';
import { NewDocumentComponentImpl } from './new-document.component.impl';
export class NewShareholderVarsForm {
    shareholder: LicenseeShareholderVO | any;
}

export class EditShareholderNewDocumentForm {
    document: DocumentVO | any;
}

@Component({
  selector: 'app-new-shareholder-base',
  template: ''
})
export abstract class NewShareholderComponent implements OnInit, AfterViewInit, OnDestroy {

    public dialogRef: MatDialogRef<NewShareholderComponentImpl>;
    dialogData: any;
	newShareholderForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<LicenseeState>;
    dialog: MatDialog;
    licenseeController: LicenseeControllerImpl;
    licenseeShareholderRestController: LicenseeShareholderRestController;
    documentRestController: DocumentRestController;
    licenseeRestController: LicenseeRestController;
    shareholderDocumentsColumns = [
        'id',
        'documentId',
        'documentType.name',
        'documentName',
    ];

    shareholderDocumentsModalColumns = [
        'actions',
        ...this.shareholderDocumentsColumns
    ];

    @ViewChild('shareholderDocumentsPaginator', {static: true}) shareholderDocumentsPaginator: MatPaginator;
    @ViewChild('shareholderDocumentsSort', {static: true}) shareholderDocumentsSort: MatSort;

    @ViewChild('shareholderDocumentsModalPaginator', {static: true}) shareholderDocumentsModalPaginator: MatPaginator;
    @ViewChild('shareholderDocumentsModalSort', {static: true}) shareholderDocumentsModalSort: MatSort;

    shareholderDocuments$: Observable<DocumentVO[]>;
    shareholderDocumentsDataSource = new MatTableDataSource<DocumentVO>([]);
    shareholderDocumentsSearchField: FormControl;
    shareholderDocumentsSelect: DocumentVO[] = [];

    @ViewChild('shareholderLicenseeModalPaginator', {static: true}) shareholderLicenseeModalPaginator: MatPaginator;
    @ViewChild('shareholderLicenseeModalSort', {static: true}) shareholderLicenseeModalSort: MatSort;
    
    shareholderLicensees$: Observable<Array<LicenseeVO>>;
    shareholderLicenseesDataSource = new MatTableDataSource<LicenseeVO>([]);
    shareholderLicenseeSelect: LicenseeVO = new LicenseeVO();
    shareholderLicenseeSearchField: FormControl = new FormControl();

    shareholderLicenseeModalColumns = [
        'actions',
        'id',
        'uin',
        'licenseeName',
    ];

    @ViewChild('shareholderShareholderModalPaginator', {static: true}) shareholderShareholderModalPaginator: MatPaginator;
    @ViewChild('shareholderShareholderModalSort', {static: true}) shareholderShareholderModalSort: MatSort;
    
    shareholderShareholders$: Observable<Array<ShareholderVO>>;
    shareholderShareholdersDataSource = new MatTableDataSource<ShareholderVO>([]);
    shareholderShareholderSelect: ShareholderVO = new ShareholderVO();
    shareholderShareholderSearchField: FormControl = new FormControl();

    shareholderShareholderModalColumns = [
        'actions',
        'type',
        'shareholderId',
        'name',
    ];

    shareholderLicenseeBackingList: Array<SelectItem> = [];
    shareholderShareholderBackingList: Array<SelectItem> = [];
    shareholder$: Observable<LicenseeShareholderVO>;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    loaderMessage: Observable<string>;
    error: Observable<boolean>;
    selected: any = null;

    constructor(@Inject(MAT_DIALOG_DATA) data: any, injector: Injector) {
        
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.dialogRef = injector.get(MatDialogRef);
        this.dialogData = data
        this.licenseeController = injector.get(LicenseeControllerImpl);
        this.licenseeShareholderRestController = injector.get(LicenseeShareholderRestController);
        this.documentRestController = injector.get(DocumentRestController);
        this.licenseeRestController = injector.get(LicenseeRestController);
        this._injector = injector;
        this.shareholder$ = this.store.pipe(select(LicenseeSelectors.selectShareholder));
        this.loading = this.store.pipe(select(LicenseeSelectors.selectLoading));
        this.loaderMessage = this.store.pipe(select(LicenseeSelectors.selectLoaderMessage));
        this.success = this.store.pipe(select(LicenseeSelectors.selectSuccess));
        this.error = this.store.pipe(select(LicenseeSelectors.selectError));
        this.messages = this.store.pipe(select(LicenseeSelectors.selectMessages));
        this.shareholderDocumentsSearchField = new FormControl();
    }

    beforeOnInit(form: NewShareholderVarsForm): NewShareholderVarsForm {
        return form;
    }
	
    ngOnInit() {
        let form: NewShareholderVarsForm = this.beforeOnInit(new NewShareholderVarsForm);
        this.newShareholderForm = this.newForm(form);

        this.newShareholderForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );

        this.shareholderDocuments$?.subscribe(data => {
            this.shareholderDocumentsDataSource.data = data;
            this.shareholderDocumentsDataSource.paginator = this.shareholderDocumentsModalPaginator;
            this.shareholderDocumentsDataSource.sort = this.shareholderDocumentsModalSort;
        });

        this.shareholderLicensees$?.subscribe(data => {
            this.shareholderLicenseesDataSource.data = data;
            this.shareholderLicenseesDataSource.paginator = this.shareholderLicenseeModalPaginator;
            this.shareholderLicenseesDataSource.sort = this.shareholderLicenseeModalSort;
        });

        this.shareholderShareholders$?.subscribe(data => {
            this.shareholderShareholdersDataSource.data = data;
            this.shareholderShareholdersDataSource.paginator = this.shareholderShareholderModalPaginator;
            this.shareholderShareholdersDataSource.sort = this.shareholderShareholderModalSort;
        });

        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    newShareholderFormReset() {

        this.store.dispatch(LicenseeActions.licenseeReset());

        this.newShareholderForm.reset()
        this.newShareholderForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.licenseeController.resetUseCaseScope();
    }

    newForm(newShareholderVarsForm$: NewShareholderVarsForm): FormGroup {
        return this.formBuilder.group({
            shareholder: this.createShareholderForm(newShareholderVarsForm$?.shareholder),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
    }

    get newShareholderVarsFormControl(): FormGroup {
        return this.getGroupControl('newShareholderVarsForm');
    }

    /**
     * This method may be overwritten
     */
    afterSetNewShareholderVarsForm(form: NewShareholderVarsForm): void {}

    setNewShareholderVarsForm(form: NewShareholderVarsForm) {

        this.newShareholderVarsFormControl.setControl('shareholder', this.createShareholderForm(form.shareholder));

        this.afterSetNewShareholderVarsForm(form);
    }

    createShareholderForm(shareholder: LicenseeShareholderVO): FormGroup {
        return this.formBuilder.group({
            id: [{value: shareholder?.id, disabled: false}],
            licensee: this.createLicenseeVOGroup(shareholder?.licensee),
            shareholder: this.createShareholderVOGroup(shareholder?.shareholder),
            numberOfShares: [{value: shareholder?.numberOfShares, disabled: false}],
            documents: this.createDocumentVOArray(shareholder?.documents),
        });
    }

    get shareholderControl(): FormGroup {
        return this.getGroupControl('shareholder') as FormGroup;
    }

    get shareholder(): LicenseeShareholderVO {
        return this.shareholderControl.value;
    }

    get shareholderIdControl(): FormControl {
        return this.shareholderControl.get('id') as FormControl;
    }

    get shareholderId(): number {
        return this.shareholderIdControl.value;
    }

    get shareholderLicenseeControl(): FormGroup {
        return this.shareholderControl.get('licensee') as FormGroup;
    }

    get shareholderLicensee(): LicenseeVO {
        return this.shareholderLicenseeControl.value;
    }

    get shareholderShareholderControl(): FormGroup {
        return this.shareholderControl.get('shareholder') as FormGroup;
    }

    get shareholderShareholder(): ShareholderVO {
        return this.shareholderShareholderControl.value;
    }

    get shareholderNumberOfSharesControl(): FormControl {
        return this.shareholderControl.get('numberOfShares') as FormControl;
    }

    get shareholderNumberOfShares(): number {
        return this.shareholderNumberOfSharesControl.value;
    }

    get shareholderDocumentsControl(): FormArray {
        return this.shareholderControl.get('documents') as FormArray;
    }

    get shareholderDocuments(): DocumentVO[] {
        return this.shareholderDocumentsControl.value;
    }


    shareholderDocumentsAddDialog(): void {
    }

    
    shareholderDocumentsSearch(): void {
    }

    handleDeleteFromShareholderDocuments(documents: DocumentVO): void {}
    
    deleteFromShareholderDocuments(index: number) {
        this.handleDeleteFromShareholderDocuments(this.shareholderDocuments[index]);
        this.shareholderDocumentsControl.removeAt(index);
    }

    doEditShareholderDocuments(documents: DocumentVO) {
    }

    handleShareholderDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {}
    
    shareholderDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {
        if(event.checked) {
            this.shareholderDocumentsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.shareholderDocumentsSelect.filter(d => d[key] !== data[key]);
            this.shareholderDocumentsSelect = tmp;
        }

        this.handleShareholderDocumentsSelected(event, data);
    }

    addToShareholderDocuments(data: DocumentVO) {
        this.shareholderDocumentsControl.push(this.createDocumentVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedShareholderDocuments(): void {
        this.shareholderDocumentsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.shareholderDocuments.find((d: DocumentVO) => d[key] === data[key])
            if(!found) {
                this.addToShareholderDocuments(data);
            }
        });
    }

    getItemControl(name: string): FormControl {
        return this.newShareholderForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.newShareholderForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.newShareholderForm.get(name) as FormArray;
    }

    setNewShareholderFormValue(form: any) {
        if(form.shareholder) {
            this.newShareholderForm.setControl('shareholder', this.createShareholderForm(form.shareholder));
        }
    }

    createDocumentVOGroup(value: DocumentVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            documentName: [value?.documentName],
            file: [value?.file],
            documentId: [value?.documentId],
            extension: [value?.extension],
            size: [value?.size],
            metadataTarget: [value?.metadataTarget],
            metadataTargetId: [value?.metadataTargetId],
        });
    }

    createDocumentVOArray(values: DocumentVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createDocumentVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenseeShareholderVOGroup(value: LicenseeShareholderVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            numberOfShares: [value?.numberOfShares],
        });
    }

    createLicenseeShareholderVOArray(values: LicenseeShareholderVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeShareholderVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createShareholderVOGroup(value: ShareholderVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            shareholderId: [value?.shareholderId],
            type: [value?.type],
            name: [value?.name],
            address: [value?.address],
        });
    }

    createShareholderVOArray(values: ShareholderVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createShareholderVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenseeVOGroup(value: LicenseeVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            status: [value?.status],
            uin: [value?.uin],
            licenseeName: [value?.licenseeName],
            alias: [value?.alias],
            address: [value?.address],
        });
    }

    createLicenseeVOArray(values: LicenseeVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    handleDialogDone(data: any): any {
        return data;
    }

    dialogDone() {
        this.dialogRef.close({
            dialogData: this.handleDialogDone(this.newShareholderForm.value)
        });
    }

    /**
     * This method may be overwritten
     */
    beforeEditShareholderNewDocument(form: EditShareholderNewDocumentForm): void {}

    /**
     * This method may be overwritten
     */
    getEditShareholderNewDocumentFormDialogConfig(data: any): any{
        return {
            data: {
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    afterEditShareholderNewDocument(form: EditShareholderNewDocumentForm, dialogData: any): void {
        
    }

    editShareholderNewDocument(): void {
        let form: EditShareholderNewDocumentForm = this.editShareholderNewDocumentForm;
        this.beforeEditShareholderNewDocument(form);

        this.licenseeController.editLicenseeNewDocument(form);
        let dialogConfig = this.getEditShareholderNewDocumentFormDialogConfig(form);
        const dialogRef = this.dialog.open(NewDocumentComponentImpl, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.afterEditShareholderNewDocument(form, result?.dialogData);
        });
    }

    getEditShareholderNewDocumentForm(value: any): EditShareholderNewDocumentForm {
        
        let form: EditShareholderNewDocumentForm = new EditShareholderNewDocumentForm();

        return form;

    }

    get editShareholderNewDocumentForm(): EditShareholderNewDocumentForm {

        let form: EditShareholderNewDocumentForm = new EditShareholderNewDocumentForm();

        return form;
    }

}
