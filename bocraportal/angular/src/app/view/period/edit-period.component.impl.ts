// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { MatRadioChange } from '@angular/material/radio';
import { EditPeriodComponent } from '@app/view/period/edit-period.component';
import { EditPeriodSaveForm } from '@app/view/period/edit-period.component';
import { EditPeriodSearchForm } from '@app/view/period/edit-period.component';
import { EditPeriodDeleteForm } from '@app/view/period/edit-period.component';
import { EditPeriodVarsForm } from '@app/view/period/edit-period.component';
import { PeriodVO } from '@app/model/bw/org/bocra/portal/period/period-vo';
import { KeycloakService } from 'keycloak-angular';
import * as PeriodActions from '@app/store/period/period.actions';
import * as PeriodSelectors from '@app/store/period/period.selectors';
import * as PeriodConfigActions from '@app/store/period/config/period-config.actions';
import * as PeriodConfigSelectors from '@app/store/period/config/period-config.selectors';
import { select } from '@ngrx/store';
import { of } from 'rxjs';
import { RepeatPeriod } from '@app/model/bw/org/bocra/portal/period/config/repeat-period';

@Component({
  selector: 'app-edit-period',
  templateUrl: './edit-period.component.html',
  styleUrls: ['./edit-period.component.scss']
})
export class EditPeriodComponentImpl extends EditPeriodComponent {

    protected keycloakService: KeycloakService;

    constructor(private injector: Injector) {
        super(injector);
        this.keycloakService = injector.get(KeycloakService);
        this.periodPeriodConfigs$ = this.store.pipe(select(PeriodConfigSelectors.selectPeriodConfigs));
        this.periodNexts$ = this.store.pipe(select(PeriodSelectors.selectPeriods));
        this.periodPreviouses$ = this.store.pipe(select(PeriodSelectors.selectPeriods));
    }

    override beforeOnInit(form: EditPeriodVarsForm): EditPeriodVarsForm {
      return form;
    }

    override doNgOnDestroy(){}

    override doNgAfterViewInit() {
      
      this.route.queryParams.subscribe((queryParams: any) => {
        if (queryParams?.id) {
          this.store.dispatch(
            PeriodActions.findById({
              id: queryParams?.id,
              loading: true,
            })
          );
        }
      });
  
      this.period$.subscribe((period) => {
        this.setEditPeriodFormValue({period: period});
      });

      this.periodPeriodConfigControl.valueChanges.subscribe(change => {
        
        if(change?.id) {
          let current  = new Date();
          console.log(current.toISOString());

          if(change.repeatPeriod === RepeatPeriod.DAYS) {
            current.setDate(current.getDate() + 1);
            console.log(current);
          } else if(change.repeatPeriod === RepeatPeriod.WEEKS) {
            current.setDate(current.getDate() + 7);
          } else if(change.repeatPeriod === RepeatPeriod.MONTHS) {
            current.setMonth(current.getMonth() + 1); 
          } else if(change.repeatPeriod === RepeatPeriod.YEARS) {
            current.setMonth(current.getMonth() + 12); 
          }

          let str = current.toLocaleString('en-bw',{month:'short', year:'numeric'})
          this.periodPeriodNameControl.patchValue(change.periodConfigName + ': ' + str);
        }
      });
    }

    /**
     * This method may be overwritten
     */
    override beforeEditPeriodSave(form: EditPeriodSaveForm): void {
      
      if(this.periodControl.valid) {
        if(form.period.id) {
          form.period.updatedBy = this.keycloakService.getUsername();
          form.period.updatedDate = new Date();
        } else {
  
          form.period.createdBy = this.keycloakService.getUsername();
          form.period.createdDate = new Date();
        }
        this.store.dispatch(PeriodActions.save({
          period: form.period,
          loading: true
        }));
      }

    }

    override handlePeriodPeriodConfigSearch(): void {
      this.store.dispatch(PeriodConfigActions.search({
        criteria: {periodConfigName: this.periodPeriodConfigSearchField.value}, loading: true
      }));
    }
}