// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { SearchURLGuardsComponent, SearchURLGuardsVarsForm } from '@app/view/guard/search-url-guards.component';
import { SearchURLGuardsSearchForm } from '@app/view/guard/search-url-guards.component';
import { Observable } from 'rxjs/internal/Observable';
import { UrlGuardVO } from '@app/model/bw/org/bocra/portal/guard/url-guard-vo';
import * as guardSelectors from '@app/store/guard/guard.selector';
import * as guardActions from '@app/store/guard/guard.action';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { HttpClient } from '@angular/common/http';
import { environment } from '@env/environment';
import { SelectItem } from '@app/utils/select-item';

@Component({
  selector: 'app-search-url-guards',
  templateUrl: './search-url-guards.component.html',
  styleUrls: ['./search-url-guards.component.scss'],
})
export class SearchURLGuardsComponentImpl extends SearchURLGuardsComponent {
  urlGuards$: Observable<UrlGuardVO[]>;
  protected keycloakService: KeycloakService;
  protected http: HttpClient;

  constructor(private injector: Injector) {
    super(injector);
    this.urlGuards$ = this.store.pipe(select(guardSelectors.selectGuards));
    this.keycloakService = this._injector.get(KeycloakService);
    this.http = this._injector.get(HttpClient);
  }

  beforeOnInit() {
    this.store.dispatch(guardActions.reset());

    this.http.get<any[]>(environment.keycloakClientRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.searchCriteriaRolesBackingList.push(item);
      });
    });

    this.http.get<any[]>(environment.keycloakRealmRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.searchCriteriaRolesBackingList.push(item);
      });
    });
  }

  afterOnInit() {}

  doNgAfterViewInit() {
    this.urlGuards$.subscribe((guards) => {
      this.setUrlGuards(guards);
    });
  }

  handleFormChanges(change: any) {}

  /**
   * This method may be overwritten
   */
  afterSetSearchURLGuardsSearchForm(form: SearchURLGuardsSearchForm): void {}

  /**
   * This method may be overwritten
   */
  beforeSearchURLGuardsSearch(form: SearchURLGuardsSearchForm): void {
    this.store.dispatch(guardActions.searchGuards({searchCriteria: form.searchCriteria}));
    
  }

  /**
   * This method may be overwritten
   */
  afterSearchURLGuardsSearch(form: SearchURLGuardsSearchForm): void {}

  afterSetSearchURLGuardsVarsForm(form: SearchURLGuardsVarsForm): void {
  }
}
