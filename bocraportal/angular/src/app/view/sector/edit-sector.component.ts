// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    Injector, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { SectorState } from '@app/store/sector/sector.state';
import * as SectorSelectors from '@app/store/sector/sector.selectors';
import * as SectorActions from '@app/store/sector/sector.actions';
import * as LicenseeSectorActions from '@app/store/licensee/sector/licensee-sector.actions';
import * as LicenseeSectorSelectors from '@app/store/licensee/sector/licensee-sector.selectors';
import * as SectorFormActions from '@app/store/sector/form/sector-form.actions';
import * as SectorFormSelectors from '@app/store/sector/form/sector-form.selectors';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';

import { SectorVO } from '@app/model/bw/org/bocra/portal/sector/sector-vo';
import { SectorFormVO } from '@app/model/bw/org/bocra/portal/sector/form/sector-form-vo';
import { SectorRestController } from '@app/service/bw/org/bocra/portal/sector/sector-rest-controller';
import { LicenseeSectorVO } from '@app/model/bw/org/bocra/portal/licensee/sector/licensee-sector-vo';
import { SectorControllerImpl } from '@app/controller/sector/sector-controller.impl';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';

export class EditSectorSaveForm {
    sector: SectorVO | any;
}

export class EditSectorSearchForm {
    sectors: Array<SectorVO>[] | any[];
    criteria: String | any;
    id: number | any;
}

export class EditSectorDeleteForm {
    sector: SectorVO | any;
}
export class EditSectorVarsForm {
    sector: SectorVO | any;
}

@Component({
  selector: 'app-edit-sector-base',
  template: ''
})
export abstract class EditSectorComponent implements OnInit, AfterViewInit, OnDestroy {

	editSectorForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<SectorState>;
    dialog: MatDialog;
    sectorController: SectorControllerImpl;
    sectorRestController: SectorRestController;
    sectorLicenseesColumns = [
        'id',
        'uin',
        'licenseeName',
    ];

    sectorLicenseesModalColumns = [
        'actions',
        ...this.sectorLicenseesColumns
    ];

    @ViewChild('sectorLicenseesPaginator', {static: true}) sectorLicenseesPaginator: MatPaginator;
    @ViewChild('sectorLicenseesSort', {static: true}) sectorLicenseesSort: MatSort;

    @ViewChild('sectorLicenseesModalPaginator', {static: true}) sectorLicenseesModalPaginator: MatPaginator;
    @ViewChild('sectorLicenseesModalSort', {static: true}) sectorLicenseesModalSort: MatSort;

    sectorLicensees$: Observable<SectorVO[]>;
    sectorLicensee$: Observable<LicenseeSectorVO>;
    sectorLicenseesSearchField: FormControl;
    sectorLicenseesSelect: SectorVO[] = [];

    sectorFormsColumns = [
        'id',
        'code',
        'formName',
    ];

    sectorFormsModalColumns = [
        'actions',
        ...this.sectorFormsColumns
    ];

    @ViewChild('sectorFormsPaginator', {static: true}) sectorFormsPaginator: MatPaginator;
    @ViewChild('sectorFormsSort', {static: true}) sectorFormsSort: MatSort;

    @ViewChild('sectorFormsModalPaginator', {static: true}) sectorFormsModalPaginator: MatPaginator;
    @ViewChild('sectorFormsModalSort', {static: true}) sectorFormsModalSort: MatSort;

    sectorForms$: Observable<FormVO[]>;
    sectorForm$: Observable<SectorFormVO>;
    sectorFormsSearchField: FormControl;
    sectorFormsSelect: FormVO[] = [];

    sector$: Observable<SectorVO>;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    error: Observable<boolean>;
    selected: any = null;
    formRemoved$: Observable<boolean>;

    constructor(injector: Injector) {
        
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.sectorController = injector.get(SectorControllerImpl);
        this.sectorRestController = injector.get(SectorRestController);
        this._injector = injector;
        this.sectorForm$ = this.store.pipe(select(SectorFormSelectors.selectSectorForm));
        this.sectorForms$ = this.store.pipe(select(FormSelectors.selectForms));
        this.formRemoved$ = this.store.pipe(select(SectorFormSelectors.selectRemoved));
        this.sector$ = this.store.pipe(select(SectorSelectors.selectSector));
        this.loading = this.store.pipe(select(SectorSelectors.selectLoading));
        this.success = this.store.pipe(select(SectorSelectors.selectSuccess));
        this.error = this.store.pipe(select(SectorSelectors.selectError));
        this.messages = this.store.pipe(select(SectorSelectors.selectMessages));
        this.sectorLicenseesSearchField = new FormControl();
        this.sectorFormsSearchField = new FormControl();
    }

    abstract beforeOnInit(form: EditSectorVarsForm): EditSectorVarsForm;
	
    ngOnInit() {
        let form: EditSectorVarsForm = this.beforeOnInit(new EditSectorVarsForm);
        this.editSectorForm = this.newForm(form);

        this.editSectorForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    editSectorFormReset() {

        this.store.dispatch(SectorActions.sectorReset());
        this.editSectorForm.reset()
        this.editSectorForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.sectorController.resetUseCaseScope();
    }

    newForm(editSectorVarsForm$: EditSectorVarsForm): FormGroup {
        return this.formBuilder.group({
            sector: this.createSectorForm(editSectorVarsForm$?.sector),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
        this.store.dispatch(SectorActions.sectorReset());
    }

    get editSectorSaveForm(): EditSectorSaveForm {

        let form: EditSectorSaveForm = new EditSectorSaveForm();
        form.sector = this.sector;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorSave(form: EditSectorSaveForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditSectorSave(form: EditSectorSaveForm): void {}

    editSectorSave(): void {
        let form: EditSectorSaveForm = this.editSectorSaveForm;
        this.beforeEditSectorSave(form);

        this.sectorController.editSectorSave(form);
        this.afterEditSectorSave(form);
    }

    getEditSectorSaveForm(value: any): EditSectorSaveForm {
        
        let form: EditSectorSaveForm = new EditSectorSaveForm();

        if(value?.sector) {
            form.sector = value?.sector;
        }

        return form;

    }

    get editSectorSearchForm(): EditSectorSearchForm {

        let form: EditSectorSearchForm = new EditSectorSearchForm();

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorSearch(form: EditSectorSearchForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditSectorSearch(form: EditSectorSearchForm): void {}

    editSectorSearch(): void {
        let form: EditSectorSearchForm = this.editSectorSearchForm;
        this.beforeEditSectorSearch(form);

        this.sectorController.editSectorSearch(form);
        this.afterEditSectorSearch(form);
    }

    getEditSectorSearchForm(value: any): EditSectorSearchForm {
        
        let form: EditSectorSearchForm = new EditSectorSearchForm();

        return form;

    }

    get editSectorDeleteForm(): EditSectorDeleteForm {

        let form: EditSectorDeleteForm = new EditSectorDeleteForm();
        form.sector = this.sector;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorDelete(form: EditSectorDeleteForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditSectorDelete(form: EditSectorDeleteForm): void {}

    editSectorDelete(): void {
        let form: EditSectorDeleteForm = this.editSectorDeleteForm;
        this.beforeEditSectorDelete(form);

        this.sectorController.editSectorDelete(form);
        this.afterEditSectorDelete(form);
    }

    getEditSectorDeleteForm(value: any): EditSectorDeleteForm {
        
        let form: EditSectorDeleteForm = new EditSectorDeleteForm();

        if(value?.sector) {
            form.sector = value?.sector;
        }

        return form;

    }

    get editSectorVarsFormControl(): FormGroup {
        return this.getGroupControl('editSectorVarsForm');
    }

    /**
     * This method may be overwritten
     */
    afterSetEditSectorVarsForm(form: EditSectorVarsForm): void {}

    setEditSectorVarsForm(form: EditSectorVarsForm) {

        this.editSectorVarsFormControl.setControl('sector', this.createSectorForm(form.sector));

        this.afterSetEditSectorVarsForm(form);
    }

    createSectorForm(sector: SectorVO): FormGroup {
        return this.formBuilder.group({
            id: [{value: sector?.id, disabled: false}],
            createdBy: [{value: sector?.createdBy, disabled: false}],
            updatedBy: [{value: sector?.updatedBy, disabled: false}],
            createdDate: [{value: sector?.createdDate, disabled: false}],
            updatedDate: [{value: sector?.updatedDate, disabled: false}],
            code: [{value: sector?.code, disabled: false}, [Validators.required, ]],
            name: [{value: sector?.name, disabled: false}, [Validators.required, ]],
            themeColour: [{value: sector?.themeColour, disabled: false}, [Validators.required, ]],
            description: [{value: sector?.description, disabled: false}],
            licensees: this.createLicenseeSectorVOArray(sector?.licensees),
            forms: this.createSectorFormVOArray(sector?.forms),
        });
    }

    get sectorControl(): FormGroup {
        return this.getGroupControl('sector') as FormGroup;
    }

    get sector(): SectorVO {
        return this.sectorControl.value;
    }

    get sectorIdControl(): FormControl {
        return this.sectorControl.get('id') as FormControl;
    }

    get sectorId(): number {
        return this.sectorIdControl.value;
    }

    get sectorCreatedByControl(): FormControl {
        return this.sectorControl.get('createdBy') as FormControl;
    }

    get sectorCreatedBy(): string {
        return this.sectorCreatedByControl.value;
    }

    get sectorUpdatedByControl(): FormControl {
        return this.sectorControl.get('updatedBy') as FormControl;
    }

    get sectorUpdatedBy(): string {
        return this.sectorUpdatedByControl.value;
    }

    get sectorCreatedDateControl(): FormControl {
        return this.sectorControl.get('createdDate') as FormControl;
    }

    get sectorCreatedDate(): Date {
        return this.sectorCreatedDateControl.value;
    }

    get sectorUpdatedDateControl(): FormControl {
        return this.sectorControl.get('updatedDate') as FormControl;
    }

    get sectorUpdatedDate(): Date {
        return this.sectorUpdatedDateControl.value;
    }

    get sectorCodeControl(): FormControl {
        return this.sectorControl.get('code') as FormControl;
    }

    get sectorCode(): string {
        return this.sectorCodeControl.value;
    }

    get sectorNameControl(): FormControl {
        return this.sectorControl.get('name') as FormControl;
    }

    get sectorName(): string {
        return this.sectorNameControl.value;
    }

    get sectorThemeColourControl(): FormControl {
        return this.sectorControl.get('themeColour') as FormControl;
    }

    get sectorThemeColour(): string {
        return this.sectorThemeColourControl.value;
    }

    get sectorDescriptionControl(): FormControl {
        return this.sectorControl.get('description') as FormControl;
    }

    get sectorDescription(): string {
        return this.sectorDescriptionControl.value;
    }

    get sectorLicenseesControl(): FormArray {
        return this.sectorControl.get('licensees') as FormArray;
    }

    get sectorLicensees(): LicenseeSectorVO[] {
        return this.sectorLicenseesControl.value;
    }


    sectorLicenseesAddDialog(): void {
    }

    
    sectorLicenseesSearch(): void {
    }

    handleDeleteFromSectorLicensees(licensees: LicenseeSectorVO): void {}
    
    deleteFromSectorLicensees(index: number) {
        this.handleDeleteFromSectorLicensees(this.sectorLicensees[index]);
        this.sectorLicenseesControl.removeAt(index);
    }

    doEditSectorLicensees(licensees: SectorVO) {
    }

    handleSectorLicenseesSelected(event: MatCheckboxChange, data: SectorVO): void {}
    
    sectorLicenseesSelected(event: MatCheckboxChange, data: SectorVO): void {
        if(event.checked) {
            this.sectorLicenseesSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.sectorLicenseesSelect.filter(d => d[key] !== data[key]);
            this.sectorLicenseesSelect = tmp;
        }

        this.handleSectorLicenseesSelected(event, data);
    }

    addToSectorLicensees(data: LicenseeSectorVO) {
        this.sectorLicenseesControl.push(this.createLicenseeSectorVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedSectorLicensees(): void {
        this.sectorLicenseesSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.sectorLicensees.find((d: LicenseeSectorVO) => d?.sector?.id === data.id)
            if(!found) {
                this.store.dispatch(
                    LicenseeSectorActions.create({
                        licenseeId: data.id,
                        sectorId: this.sectorId,
                        loading: true
                    })
                );
            }
        });
    }

    get sectorFormsControl(): FormArray {
        return this.sectorControl.get('forms') as FormArray;
    }

    get sectorForms(): SectorFormVO[] {
        return this.sectorFormsControl.value;
    }


    sectorFormsAddDialog(): void {
    }

    
    sectorFormsSearch(): void {
    }

    handleDeleteFromSectorForms(forms: SectorFormVO): void {}
    
    deleteFromSectorForms(index: number) {
        if(confirm('Are you sure you want to remoge the from this licensee?')) {
            this.store.dispatch(
                SectorFormActions.remove({
                    id: this.sectorForms[index].id,
                    loading: true
                })
            );

            this.formRemoved$.subscribe(removed => {
                if(removed) {

                    this.handleDeleteFromSectorForms(this.sectorForms[index]);
                    this.sectorFormsControl.removeAt(index);
                }
            });
        }
    }

    doEditSectorForms(forms: SectorFormVO) {
    }

    handleSectorFormsSelected(event: MatCheckboxChange, data: FormVO): void {}
    
    sectorFormsSelected(event: MatCheckboxChange, data: FormVO): void {
        if(event.checked) {
            this.sectorFormsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.sectorFormsSelect.filter(d => d[key] !== data[key]);
            this.sectorFormsSelect = tmp;
        }

        this.handleSectorFormsSelected(event, data);
    }

    addToSectorForms(data: SectorFormVO) {
        this.sectorFormsControl.push(this.createSectorFormVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedSectorForms(): void {
        this.sectorFormsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.sectorForms.find((d: SectorFormVO) => d[key] === data[key])
            if(!found) {
                //this.addToSectorForms(data);
                this.store.dispatch(
                    SectorFormActions.create({
                        sectorId: this.sectorId,
                        formId: data.id,
                        loading: true
                    })
                );
            }
        });
    }

    getItemControl(name: string): FormControl {
        return this.editSectorForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.editSectorForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.editSectorForm.get(name) as FormArray;
    }

    setEditSectorFormValue(form: any) {
        if(form.sector) {
            this.editSectorForm.setControl('sector', this.createSectorForm(form.sector));
        }
    }

    createSectorVOGroup(value: SectorVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            name: [value?.name],
            themeColour: [value?.themeColour],
            description: [value?.description],
        });
    }

    createSectorVOArray(values: SectorVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createSectorVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createSectorFormVOGroup(value: SectorFormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            form: {
                id: value.form.id,
                code: value.form.code,
                formName: value.form.formName
            }
        });
    }

    createSectorFormVOArray(values: SectorFormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createSectorFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenseeSectorVOGroup(value: LicenseeSectorVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
        });
    }

    createLicenseeSectorVOArray(values: LicenseeSectorVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeSectorVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

}
