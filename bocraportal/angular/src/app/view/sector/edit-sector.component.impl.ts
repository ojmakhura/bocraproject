// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { EditSectorComponent } from '@app/view/sector/edit-sector.component';
import { EditSectorSaveForm } from '@app/view/sector/edit-sector.component';
import { EditSectorSearchForm } from '@app/view/sector/edit-sector.component';
import { EditSectorDeleteForm } from '@app/view/sector/edit-sector.component';
import { EditSectorVarsForm } from '@app/view/sector/edit-sector.component';
import { SectorState } from '@app/store/sector/sector.state';
import * as SectorSelectors from '@app/store/sector/sector.selectors';
import * as SectorActions from '@app/store/sector/sector.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';

@Component({
  selector: 'app-edit-sector',
  templateUrl: './edit-sector.component.html',
  styleUrls: ['./edit-sector.component.scss']
})
export class EditSectorComponentImpl extends EditSectorComponent {

    constructor(private injector: Injector) {
        super(injector);
    }

    beforeOnInit(){     
    }
	
    afterOnInit() {
    }

    doNgAfterViewInit() {
    }

    doNgOnDestroy(){}

    handleFormChanges(change: any) {
    }

    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: number): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: string): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: string): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: Date): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: Date): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: string): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: string): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }
    
    handle$stringUtils.capitalize($propertyId)Selected(event: MatRadioChange, data: string): void {

    }

    handle$stringUtils.capitalize($propertyId)Search(): void {
        
    }

    /**
     * This method may be overwritten
     */
    afterSetEditSectorVarsForm(form: EditSectorVarsForm): void {

    }

    /**
     * This method may be overwritten
     */
    afterSetEditSectorSaveForm(form: EditSectorSaveForm): void {

    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorSave(form: EditSectorSaveForm): void {

    }

    /**
     * This method may be overwritten
     */
    afterEditSectorSave(form: EditSectorSaveForm): void {

    }
    
    /**
     * This method may be overwritten
     */
    afterSetEditSectorSearchForm(form: EditSectorSearchForm): void {

    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorSearch(form: EditSectorSearchForm): void {

    }

    /**
     * This method may be overwritten
     */
    afterEditSectorSearch(form: EditSectorSearchForm): void {

    }
    
    /**
     * This method may be overwritten
     */
    afterSetEditSectorDeleteForm(form: EditSectorDeleteForm): void {

    }

    /**
     * This method may be overwritten
     */
    beforeEditSectorDelete(form: EditSectorDeleteForm): void {

    }

    /**
     * This method may be overwritten
     */
    afterEditSectorDelete(form: EditSectorDeleteForm): void {

    }
    
}