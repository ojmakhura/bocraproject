// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { EditSectorComponent } from '@app/view/sector/edit-sector.component';
import { EditSectorSaveForm } from '@app/view/sector/edit-sector.component';
import { EditSectorSearchForm } from '@app/view/sector/edit-sector.component';
import { EditSectorDeleteForm } from '@app/view/sector/edit-sector.component';
import { EditSectorVarsForm } from '@app/view/sector/edit-sector.component';
import { SectorState } from '@app/store/sector/sector.state';
import * as SectorSelectors from '@app/store/sector/sector.selectors';
import * as SectorActions from '@app/store/sector/sector.actions';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { KeycloakService } from 'keycloak-angular';
import * as FormActions from '@app/store/form/form.actions';
import { select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { LicenseeSectorVO } from '@app/model/bw/org/bocra/portal/licensee/sector/licensee-sector-vo';
import * as ViewActions from '@app/store/view/view.actions';
import * as ViewSelectors from '@app/store/view/view.selectors';
import { FormGroup } from '@angular/forms';
import * as LicenseeSectorActions from '@app/store/licensee/sector/licensee-sector.actions';
import * as LicenseeSectorSelectors from '@app/store/licensee/sector/licensee-sector.selectors';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { SectorVO } from '@app/model/bw/org/bocra/portal/sector/sector-vo';

@Component({
  selector: 'app-edit-sector',
  templateUrl: './edit-sector.component.html',
  styleUrls: ['./edit-sector.component.scss'],
})
export class EditSectorComponentImpl extends EditSectorComponent {
  protected keycloakService: KeycloakService;
  protected licensees$: Observable<LicenseeVO[]>;
  protected licensee$: Observable<LicenseeVO>;
  unauthorisedUrls$: Observable<string[]>;
  deleteUnrestricted: boolean = true;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
    this.sectorLicensees$ = this.store.pipe(select(SectorSelectors.selectSectors));
    this.sectorLicensee$ = this.store.pipe(select(LicenseeSectorSelectors.selectLicenseeSector));
    this.licensees$ = this.store.pipe(select(LicenseeSelectors.selectLicensees));
    this.licensee$ = this.store.pipe(select(LicenseeSelectors.selectLicensee));
    this.sectorLicensee$ = this.store.pipe(select(SectorSelectors.selectLicensee));
    this.unauthorisedUrls$ = this.store.pipe(select(ViewSelectors.selectUnauthorisedUrls));
  }

  override beforeOnInit(form: EditSectorVarsForm): EditSectorVarsForm {
    form.sector = new SectorVO;
    form.sector.themeColour = "#000000";
    return form;
  }

  override doNgAfterViewInit() {

    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          SectorActions.findById({
            id: queryParams?.id,
            loading: true,
          })
        );
      }
    });

    this.sector$.subscribe((sector) => {
      this.setEditSectorFormValue({ sector: sector });
    });

    this.licensees$.subscribe((licensees) => {
      licensees.forEach((lc) => {
        this.store.dispatch(SectorActions.addLicenseeSuccess({ licensee: lc, messages: [''], success: true }));
      });
    });

    this.sectorLicensee$.subscribe(ls => {
      if (ls?.id)
        this.addToSectorLicensees(ls);
    });

    this.store.dispatch(
      ViewActions.loadViewAuthorisations({
        viewUrl: "/sector/edit-sector",
        roles: this.keycloakService.getUserRoles(),
        loading: true
      })
    );

    this.unauthorisedUrls$.subscribe(restrictedItems => {
      restrictedItems.forEach(item => {
        if (item === '/sector/edit-sector/{button:delete}') {
          this.deleteUnrestricted = false;
        }
      });
    });
  }

  override addToSectorLicensees(licensee: LicenseeSectorVO) {
    this.store.dispatch(
      SectorActions.addLicensee({
        sectorId: this.sectorId,
        licenseeId: licensee.id,
        loading: true
      })
    );

    // this.sectorLicenseesControl.push(this.createLicenseeSectorVOGroup(tmp));
  }

  override doNgOnDestroy() { }

  override sectorLicenseesAddDialog(): void {

  }

  override sectorLicenseesSearch(): void {
    this.store.dispatch(SectorActions.setLicensees({ licensees: [] }));
    let criteria: string = '';
    criteria = this.sectorLicenseesSearchField.value;
    this.store.dispatch(
      LicenseeActions.search({
        criteria: { uin: criteria, licenseeName: criteria },
        loading: true,
      })
    );
  }
  override beforeEditSectorDelete(form: EditSectorDeleteForm): void {
    if (form?.sector?.id && confirm("Are you sure you want to delete the period?")) {
      this.store.dispatch(
        SectorActions.remove({
          id: form?.sector?.id,
          loading: false,
        })
      );
      this.editSectorFormReset();
    } else {
      this.store.dispatch(SectorActions.sectorFailure({ messages: ['Please select something to delete'] }));
    }
  }

  /**
   * This method may be overwritten
   */
  override beforeEditSectorSave(form: EditSectorSaveForm): void {
    if (this.editSectorForm.valid && this.editSectorForm.dirty) {
      if (form.sector?.id) {
        form.sector.updatedBy = this.keycloakService.getUsername();
        form.sector.updatedDate = new Date();
      } else {
        form.sector.createdBy = this.keycloakService.getUsername();
        form.sector.createdDate = new Date();
      }

      this.store.dispatch(
        SectorActions.save({
          sector: form.sector,
          loading: true,
        })
      );
    } else {
      let messages: string[] = []
      if(!this.sectorControl.valid) {
        messages.push("Sector has errors, Please fill in the required form fields.")
      }
      if(!this.sectorNameControl.valid) {
        messages.push("Sector name is missing")
      }
      if(!this.sectorCodeControl.valid) {
        messages.push("Sector code is missing")
      }
      this.store.dispatch(SectorActions.sectorFailure({ messages: messages }));
    }
  }

  override createLicenseeSectorVOGroup(value: LicenseeSectorVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      licensee: {
        id: value?.licensee?.id,
        uin: value?.licensee?.uin,
        licenseeName: value?.licensee?.licenseeName
      }
    });
  }

  override sectorFormsSearch() {

    let criteria: FormCriteria = new FormCriteria()

    criteria.code = this.sectorFormsSearchField.value
    criteria.formName = this.sectorFormsSearchField.value

    this.store.dispatch(
      FormActions.searchForms({
        criteria: criteria,
        loading: true
      })
    );

  }
}

