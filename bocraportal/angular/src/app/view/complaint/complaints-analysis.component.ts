// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
    Component,
    OnInit,
    Injector,
    ViewChild,
    Input,
    Output,
    EventEmitter,
    AfterViewInit,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import {
    FormGroup,
    FormControl,
    FormArray,
    FormBuilder,
    ReactiveFormsModule,
    Validators
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { ComplaintState } from '@app/store/complaint/complaint.state';
import * as ComplaintSelectors from '@app/store/complaint/complaint.selectors';
import * as ComplaintActions from '@app/store/complaint/complaint.actions';

import { ComplaintControllerImpl } from '@app/controller/complaint/complaint-controller.impl';
import { ComplaintRestController } from '@app/service/bw/org/bocra/portal/complaint/complaint-rest-controller';
import { ComplaintVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-vo';
import { ChartConfiguration, ChartData, ChartEvent, ChartType } from 'chart.js';
import { BaseChartDirective } from 'ng2-charts';

import DataLabelsPlugin from 'chartjs-plugin-datalabels';

export class ComplaintsDummmy {
    id: number | any = null;
    status: string | any = null;
    licenseeName: string | any = null;
    createdDate: Date | any = null;
}

export class YearlyAnalysis {
    year: number | any = null;
    total: number | any = null;
}

@Component({
    selector: 'app-complaints-analysis-base',
    template: ''
})
export abstract class ComplaintsAnalysisComponent implements OnInit, AfterViewInit, OnDestroy {
    @ViewChild(BaseChartDirective) chart: BaseChartDirective | undefined;

    complaintsAnalysisForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<ComplaintState>;
    dialog: MatDialog;
    complaintController: ComplaintControllerImpl;
    complaintRestController: ComplaintRestController;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    loaderMessage: Observable<string>;
    error: Observable<boolean>;
    selected: any = null;
    complaints: ComplaintsDummmy[] = [
        { id: 1, status: "NEW", licenseeName: "BTC", createdDate: '2022-11-16 09:31:45' },
        { id: 2, status: "NEW", licenseeName: "BTC", createdDate: "2022-11-16 09:31:45" },
        { id: 3, status: "NEW", licenseeName: "BTC", createdDate: "2022-11-16 09:31:45" },
        { id: 4, status: "NEW", licenseeName: "Mascom", createdDate: "2021-11-16 09:31:45" },
        { id: 5, status: "NEW", licenseeName: "Mascom", createdDate: "2021-11-16 09:31:45" },
        { id: 6, status: "NEW", licenseeName: "Mascom", createdDate: "2021-11-16 09:31:45" },
        { id: 7, status: "NEW", licenseeName: "Mascom", createdDate: "2021-11-16 09:31:45" },
        { id: 8, status: "NEW", licenseeName: "Orange", createdDate: "2021-11-16 09:31:45" },
        { id: 9, status: "NEW", licenseeName: "Orange", createdDate: "2020-11-16 09:31:45" },
        { id: 10, status: "NEW", licenseeName: "Orange", createdDate: "2020-11-16 09:31:45" },
        { id: 11, status: "NEW", licenseeName: "Orange", createdDate: "2020-11-16 09:31:45" },
        { id: 12, status: "NEW", licenseeName: "BTC", createdDate: "2020-11-16 09:31:45" },
        { id: 13, status: "NEW", licenseeName: "BTC", createdDate: "2019-11-16 09:31:45" },
        { id: 14, status: "NEW", licenseeName: "BTC", createdDate: "2019-11-16 09:31:45" },
        { id: 15, status: "NEW", licenseeName: "BTC", createdDate: "2021-11-16 09:31:45" },

    ]

    reportLabel: string[] = ['2022', '2021', '2020'];
    reportData: number[] = [];

    constructor(injector: Injector) {

        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.complaintController = injector.get(ComplaintControllerImpl);
        this.complaintRestController = injector.get(ComplaintRestController);
        this._injector = injector;
        this.loading = this.store.pipe(select(ComplaintSelectors.selectLoading));
        this.loaderMessage = this.store.pipe(select(ComplaintSelectors.selectLoaderMessage));
        this.success = this.store.pipe(select(ComplaintSelectors.selectSuccess));
        this.error = this.store.pipe(select(ComplaintSelectors.selectError));
        this.messages = this.store.pipe(select(ComplaintSelectors.selectMessages));
    }

    beforeOnInit(): void {
    }

    ngOnInit() {
        this.beforeOnInit();
        this.complaintsAnalysisForm = this.newForm();

        this.complaintsAnalysisForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        this.reportData.push(this.complaints.filter(entry => entry.createdDate.includes('2022')).length, this.complaints.filter(entry => entry.createdDate.includes('2021')).length, this.complaints.filter(entry => entry.createdDate.includes('2020')).length);
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {

    }

    complaintsAnalysisFormReset() {

        this.store.dispatch(ComplaintActions.complaintReset());

        this.complaintsAnalysisForm.reset()
        this.complaintsAnalysisForm.markAsPristine();

        if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void { }

    doNgAfterViewInit(): void { }

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.complaintController.resetUseCaseScope();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() {
        this.doNgOnDestroy();
        this.store.dispatch(ComplaintActions.complaintReset());
    }

    getItemControl(name: string): FormControl {
        return this.complaintsAnalysisForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.complaintsAnalysisForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.complaintsAnalysisForm.get(name) as FormArray;
    }

    setComplaintsAnalysisFormValue(form: any) {
    }

    public barChartOptions: ChartConfiguration['options'] = {
        responsive: true,
        // We use these empty structures as placeholders for dynamic theming.
        scales: {
            x: {},
            y: {
                min: 0
            }
        },
        plugins: {
            legend: {
                display: true,
            },
            datalabels: {
                anchor: 'end',
                align: 'end'
            }
        }
    };
    public barChartType: ChartType = 'bar';
    public barChartPlugins = [
        DataLabelsPlugin
    ];

    public barChartData: ChartData<'bar'> = {
        labels: this.reportLabel,
        datasets: [
            { data: this.reportData, label: 'Complaints Report Analysis' }
        ]
    };

    // events
    public chartClicked({ event, active }: { event?: ChartEvent, active?: {}[] }): void {
        console.log(event, active);
    }

    public chartHovered({ event, active }: { event?: ChartEvent, active?: {}[] }): void {
        console.log(event, active);
    }

}
