// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Component, OnInit, ViewChild, Injector, Input, OnDestroy } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable, of } from 'rxjs';
import { ComplaintState } from '@app/store/complaint/complaint.state';
import * as ComplaintSelectors from '@app/store/complaint/complaint.selectors';

import { ComplaintVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-vo';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { ComplaintStatus } from '@app/model/bw/org/bocra/portal/complaint/complaint-status';
import { ComplaintSeachCriteria } from '@app/model/bw/org/bocra/portal/complaint/complaint-seach-criteria';
import { ComplaintReplyVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-reply-vo';
import { SearchComplaintsComponentImpl } from '@app/view/complaint/search-complaints.component.impl';
import { ComplaintControllerImpl } from '@app/controller/complaint/complaint-controller.impl';
import { KeycloakService } from 'keycloak-angular';
import { MatTableExporterDirective } from 'mat-table-exporter';

@Component({
  selector: 'search-complaints-complaints-base',
  template: '',
})
export abstract class SearchComplaintsComplaintsComponent implements OnInit, OnDestroy {
  isLoggedIn: Observable<boolean> = of(false);
  complaintsColumns = ['id', 'createdDate', 'firstName', 'surname', 'status'];

  complaints$: Observable<Array<ComplaintVO>>;

  complaintsDataSource = new MatTableDataSource<ComplaintVO>([]);
  @ViewChild('complaintsPaginator', { static: true }) complaintsPaginator: MatPaginator;
  @ViewChild('complaintsSort', { static: true }) complaintsSort: MatSort;
  @ViewChild(MatTableExporterDirective) matTableExporter: MatTableExporterDirective;

  @Input() protected pageVariables: any;
  protected route: ActivatedRoute;
  protected router: Router;
  protected useCaseScope: UseCaseScope;
  protected store: Store<ComplaintState>;
  protected complaintController: ComplaintControllerImpl;
  protected searchComplaintsComponent: SearchComplaintsComponentImpl;
  protected _injector: Injector;

  constructor(injector: Injector, public keycloakService: KeycloakService) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.complaintController = injector.get(ComplaintControllerImpl);
    this.searchComplaintsComponent = injector.get(SearchComplaintsComponentImpl);
    this._injector = injector;
    this.complaints$ = this.store.pipe(select(ComplaintSelectors.selectComplaints));
  }

  ngOnInit(): void {}

  ngOnDestroy() {}

  ngAfterViewInit() {
    this.complaints$.subscribe((complaints) => {
      this.complaintsDataSource.data = complaints;
    });
    this.complaintsDataSource.paginator = this.complaintsPaginator;
    this.complaintsDataSource.sort = this.complaintsSort;
    this.keycloakService.isLoggedIn().then((loggedIn) => {
      if (loggedIn) {
        this.isLoggedIn = of(loggedIn);
      }
    });
  }

  doSearchComplaintsEdit(form: any): any {}

  searchComplaintsEdit(complaintId: string) {
    let form = {
      complaintId: complaintId,
    };
    let queryParams: any = {
      complaintId: complaintId,
    };
    this.complaintController.setQueryParams(Object.assign({}, queryParams));
    let params = this.doSearchComplaintsEdit(form);
    this.useCaseScope.pageVariables = Object.assign({}, params);
    this.complaintController.searchComplaintsEdit(params);
  }

  getComplaintsExportData(): any {
    return this.complaintsDataSource?.data?.map((row) => {
      return {
        id: row?.id,
        createdDate: row?.createdDate,
        firstName: row?.firstName,
        surname: row?.surname,
        status: row?.status,
      };
    });
  }
}
