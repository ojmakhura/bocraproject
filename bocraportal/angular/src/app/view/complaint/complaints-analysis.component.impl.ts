// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, ViewChildren } from '@angular/core';
import { ComplaintsAnalysisComponent } from '@app/view/complaint/complaints-analysis.component';
import { ComplaintState } from '@app/store/complaint/complaint.state';
import * as ComplaintSelectors from '@app/store/complaint/complaint.selectors';
import * as ComplaintActions from '@app/store/complaint/complaint.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { ComplaintVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-vo';
import { ReportElementComponent } from '../report/report-element.component';
import { ReportRestController } from '@app/service/bw/org/bocra/portal/report/report-rest-controller';
import { saveAs } from 'file-saver';

@Component({
  selector: 'app-complaints-analysis',
  templateUrl: './complaints-analysis.component.html',
  styleUrls: ['./complaints-analysis.component.scss'],
})
export class ComplaintsAnalysisComponentImpl extends ComplaintsAnalysisComponent {
  @ViewChildren('reportElement')
  reportElementComponents!: ReportElementComponent[];
  complaintsDataSource = new Array<ComplaintVO>();
  reportController!: ReportRestController;
  constructor(private injector: Injector) {
    super(injector);
    this.reportController = this.injector.get(ReportRestController)
  }
  errorMessage = '';
  showChart = false;
  yearFilter: string[] = [];
  licenseeFilter: string[] = [];
  typeFilter: string[] = [];
  statusFilter: string[] = [];
  sectorFilter: string[] = [];
  borderColor = [
    'rgba(255, 99, 132)',
    'rgba(255, 159, 64)',
    'rgba(54, 162, 235)',
    'rgba(153, 102, 255)',
    'rgba(201, 203, 207)',
    'rgba(0, 172, 230)',
    'rgba(230, 0, 115)',
    'rgba(255, 51, 102)',
    'rgba(255, 51, 204)',
    'rgba(255, 140, 26)',
    'rgba(255, 140, 102)',
    'rgba(0, 204, 102)',
  ]
  backgroundColor = [
    'rgba(255, 99, 132, 0.7)',
    'rgba(255, 159, 64, 0.7)',
    'rgba(54, 162, 235, 0.7)',
    'rgba(153, 102, 255, 0.7)',
    'rgba(201, 203, 207, 0.7)',
    'rgba(0, 172, 230, 0.7)',
    'rgba(230, 0, 115, 0.7)',
    'rgba(255, 51, 102, 0.7)',
    'rgba(255, 51, 204, 0.7)',
    'rgba(255, 140, 26, 0.7)',
    'rgba(255, 140, 102, 0.7)',
    'rgba(0, 204, 102, 0.7)',
  ]

  override doNgAfterViewInit(): void {

    for (let complaint of this.useCaseScope.pageVariables) {
      if (complaint.status.includes('RESOLVED')) {
        this.complaintsDataSource.push(complaint);
      }
    }

    this.yearFilter.push(
      this.useCaseScope.pageVariables.map((entry: { createdDate: string; }) => entry.createdDate.substring(0, 4))
    )

    this.reportYearLabel = [...new Set(this.yearFilter[0])];

    for (let year of this.reportYearLabel) {
      let data = this.useCaseScope.pageVariables.filter((entry: { createdDate: string; }) => entry.createdDate.substring(0, 4).includes(year)).length;
      this.reportYearData.push(data);
    }

    this.chartYearData.labels = this.reportYearLabel;
    this.chartYearData.datasets = [
      {
        data: this.reportYearData,
        label: '',
        backgroundColor: this.backgroundColor,
        borderColor: this.backgroundColor,
        hoverBackgroundColor: this.borderColor,
        hoverBorderColor: this.borderColor
      },
    ];

    this.licenseeFilter.push(
      this.useCaseScope.pageVariables.map((entry: { licensee: { licenseeName: any } }) => entry.licensee.licenseeName)
    );
    this.reportLicenseesLabel = [...new Set(this.licenseeFilter[0])];
    for (let licensee of this.reportLicenseesLabel) {
      let data = this.useCaseScope.pageVariables.filter((entry: { licensee: { licenseeName: string | string[] } }) =>
        entry.licensee.licenseeName.includes(licensee)
      ).length;
      this.reportLicenseesData.push(data);
    }

    this.chartLicenseeData.labels = this.reportLicenseesLabel;
    this.chartLicenseeData.datasets = [
      {
        data: this.reportLicenseesData,
        label: '',
        backgroundColor: this.backgroundColor,
        borderColor: this.backgroundColor,
        hoverBackgroundColor: this.borderColor,
        hoverBorderColor: this.borderColor
      },
    ];

    this.typeFilter.push(
      this.useCaseScope.pageVariables.map((entry: { complaintType: { typeName: any } }) => entry.complaintType.typeName)
    );
    this.reportTypeLabel = [...new Set(this.typeFilter[0])];

    for (let type of this.reportTypeLabel) {
      let data = this.useCaseScope.pageVariables.filter((entry: { complaintType: { typeName: any } }) =>
        entry.complaintType.typeName.includes(type)
      ).length;
      this.reportTypeData.push(data);
    }

    this.chartTypeData.labels = this.reportTypeLabel;
    this.chartTypeData.datasets = [
      {
        data: this.reportTypeData,
        label: '',
        backgroundColor: this.backgroundColor,
        borderColor: this.backgroundColor,
        hoverBackgroundColor: this.borderColor,
        hoverBorderColor: this.borderColor
      },
    ];

    this.reportStatusLabel = ['NEW', 'PENDING', 'RESOLVED'];
    for (let status of this.reportStatusLabel) {
      let data = this.useCaseScope.pageVariables.filter((entry: { status: string | string[] }) =>
        entry.status.includes(status)).length;
      this.reportStatusData.push(data);
      console.log(this.reportStatusData);
    }

    let selectiveBackgroundColor = ['rgba(255, 194, 0, 0.7)', 'rgba(255, 0, 0, 0.7)', 'rgba(0, 128, 0, 0.7)'];
    let selectiveBorderColor = ['rgba(255, 194, 0)', 'rgba(255, 0, 0)', 'rgba(0, 128, 0)'];

    this.chartStatusData.labels = this.reportStatusLabel;
    this.chartStatusData.datasets = [
      {
        data: this.reportStatusData,
        label: '',
        backgroundColor: selectiveBackgroundColor,
        borderColor: selectiveBackgroundColor,
        hoverBackgroundColor: selectiveBorderColor,
        hoverBorderColor: selectiveBorderColor
      },
    ];

    for (let complaint of this.useCaseScope.pageVariables) {
      for (let sector of complaint.licensee.sectors) {
        this.sectorFilter.push(sector.sector.name);
      }
    }
    this.reportSectorLabel = [...new Set(this.sectorFilter)];

    for (let sectorName of this.reportSectorLabel) {
      let total = 0;
      for (let complaint of this.useCaseScope.pageVariables) {
        for (let sector of complaint.licensee.sectors) {
          if (sector.sector.name.includes(sectorName)) {
            total = total + 1;
          }
        }
      }
      this.reportSectorData.push(total);
    }

    this.chartSectorData.labels = this.reportSectorLabel;
    this.chartSectorData.datasets = [
      {
        data: this.reportSectorData,
        label: '',
        backgroundColor: this.backgroundColor,
        borderColor: this.backgroundColor,
        hoverBackgroundColor: this.borderColor,
        hoverBorderColor: this.borderColor
      },
    ];

    this.reportResolutionLabel = ['60 plus days', '30 to 60 days', '20 to 30 days', 'Within 20 days'];
    for (let period of this.reportResolutionLabel) {
      let total = 0;
      if (period.includes('60 plus days')) {
        for (let complaint of this.complaintsDataSource) {
          let resolvedDate = new Date(complaint.resolvedDate);
          let createdDate = new Date(complaint.createdDate);
          var diff = Math.abs(resolvedDate.getTime() - createdDate.getTime());
          var days = Math.ceil(diff / (1000 * 3600 * 24));
          if (days > 60) {
            total = total + 1;
          }
        }
        this.reportResolutionData.push(total);
      } else if (period.includes('30 to 60 days')) {
        for (let complaint of this.complaintsDataSource) {
          let resolvedDate = new Date(complaint.resolvedDate);
          let createdDate = new Date(complaint.createdDate);
          var diff = Math.abs(resolvedDate.getTime() - createdDate.getTime());
          var days = Math.ceil(diff / (1000 * 3600 * 24));
          if (days > 30 && days <= 60) {
            total = total + 1;
          }
        }
        this.reportResolutionData.push(total);
      } else if (period.includes('20 to 30 days')) {
        for (let complaint of this.complaintsDataSource) {
          let resolvedDate = new Date(complaint.resolvedDate);
          let createdDate = new Date(complaint.createdDate);
          var diff = Math.abs(resolvedDate.getTime() - createdDate.getTime());
          var days = Math.ceil(diff / (1000 * 3600 * 24));
          if (days > 20 && days <= 30) {
            total = total + 1;
          }
        }
        this.reportResolutionData.push(total);
      } else if (period.includes('Within 20 days')) {
        for (let complaint of this.complaintsDataSource) {
          let resolvedDate = new Date(complaint.resolvedDate);
          let createdDate = new Date(complaint.createdDate);
          var diff = Math.abs(resolvedDate.getTime() - createdDate.getTime());
          var days = Math.ceil(diff / (1000 * 3600 * 24));
          if (days <= 20) {
            total = total + 1;
          }
        }
        this.reportResolutionData.push(total);
      }
    }

    let selectiveRBackgroundColor = ['rgba(255, 0, 0, 0.7)', 'rgba(255, 194, 0, 0.7)', 'rgba(144, 238, 144, 0.7)', 'rgba(0, 128, 0, 0.7)'];
    let selectiveRBorderColor = ['rgba(255, 0, 0)', 'rgba(255, 194, 0)', 'rgba(144, 238, 144)', 'rgba(0, 128, 0)'];

    this.chartResolutionData.labels = this.reportResolutionLabel;
    this.chartResolutionData.datasets = [
      {
        data: this.reportResolutionData,
        label: '',
        backgroundColor: selectiveRBackgroundColor,
        borderColor: selectiveRBackgroundColor,
        hoverBackgroundColor: selectiveRBorderColor,
        hoverBorderColor: selectiveRBorderColor
      },
    ];

  }

  downloadFormReport() {
    let d: any = {};

    d = {
      reportName: this.reportFilterForm.value.chartLabel,
      images: [
        {
          type: this.reportFilterForm.value.chartType,
          label: this.reportFilterForm.value.chartLabel,
          image: this.chart.toBase64Image(),
          caption: this.reportFilterForm.value.chartCaption
        }
      ]
    }

    this.reportController.createComplaintReportWordDocument(d).subscribe(file => {
      if (file) {

        let blob: any = file as Blob;
        const url = window.URL.createObjectURL(blob);
        saveAs(blob, `${d.reportName}.docx`);
      }
    });
  }

  doNgOnDestroy(): void { }
}
