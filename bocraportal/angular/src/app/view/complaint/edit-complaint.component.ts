// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    Injector, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { DatePipe } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { ComplaintState } from '@app/store/complaint/complaint.state';
import * as ComplaintSelectors from '@app/store/complaint/complaint.selectors';
import * as ComplaintActions from '@app/store/complaint/complaint.actions';

import { ComplaintTypeVO } from '@app/model/bw/org/bocra/portal/complaint/type/complaint-type-vo';
import { ReplyComponentImpl } from '@app/view/complaint/reply.component.impl';
import { ComplaintSeachCriteria } from '@app/model/bw/org/bocra/portal/complaint/complaint-seach-criteria';
import { ComplaintVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-vo';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { ComplaintControllerImpl } from '@app/controller/complaint/complaint-controller.impl';
import { ComplaintRestController } from '@app/service/bw/org/bocra/portal/complaint/complaint-rest-controller';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { ComplaintReplyVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-reply-vo';
import { ComplaintDocumentComponentImpl } from '@app/view/complaint/complaint-document.component.impl';
import { ComplaintStatus } from '@app/model/bw/org/bocra/portal/complaint/complaint-status';
import { MatDialogConfig } from '@angular/material/dialog';

export class EditComplaintSaveForm {
    complaint: ComplaintVO | any;
}

export class EditComplaintDeleteForm {
    complaint: ComplaintVO | any;
}

export class EditComplaintSearchForm {
    complaints: Array<ComplaintVO>[] | any[];
    criteria: String | any;
    loggedInSearch: ComplaintSeachCriteria | any;
    id: number | any;
}

export class EditComplaintNewDocumentForm {
    document: DocumentVO | any;
}

export class EditComplaintReplyForm {
    complaintReply: ComplaintReplyVO | any;
}
export class EditComplaintVarsForm {
    complaint: ComplaintVO | any;
}

@Component({
  selector: 'app-edit-complaint-base',
  template: ''
})
export abstract class EditComplaintComponent implements OnInit, AfterViewInit, OnDestroy {

	editComplaintForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<ComplaintState>;
    dialog: MatDialog;
    complaintController: ComplaintControllerImpl;
    complaintRestController: ComplaintRestController;
    complaintDocumentsColumns = [
        'id',
        'documentId',
        'documentType.name',
        'documentName',
    ];

    complaintDocumentsModalColumns = [
        'actions',
        ...this.complaintDocumentsColumns
    ];

    @ViewChild('complaintDocumentsPaginator', {static: true}) complaintDocumentsPaginator: MatPaginator;
    @ViewChild('complaintDocumentsSort', {static: true}) complaintDocumentsSort: MatSort;

    @ViewChild('complaintDocumentsModalPaginator', {static: true}) complaintDocumentsModalPaginator: MatPaginator;
    @ViewChild('complaintDocumentsModalSort', {static: true}) complaintDocumentsModalSort: MatSort;

    complaintDocuments$: Observable<DocumentVO[]>;
    complaintDocumentsDataSource = new MatTableDataSource<DocumentVO>([]);
    complaintDocumentsSearchField: FormControl;
    complaintDocumentsSelect: DocumentVO[] = [];

    complaintComplaintRepliesColumns = [
        'id',
        'date',
        'replyUser',
    ];

    complaintComplaintRepliesModalColumns = [
        'actions',
        ...this.complaintComplaintRepliesColumns
    ];

    @ViewChild('complaintComplaintRepliesPaginator', {static: true}) complaintComplaintRepliesPaginator: MatPaginator;
    @ViewChild('complaintComplaintRepliesSort', {static: true}) complaintComplaintRepliesSort: MatSort;

    @ViewChild('complaintComplaintRepliesModalPaginator', {static: true}) complaintComplaintRepliesModalPaginator: MatPaginator;
    @ViewChild('complaintComplaintRepliesModalSort', {static: true}) complaintComplaintRepliesModalSort: MatSort;

    complaintComplaintReplies$: Observable<ComplaintReplyVO[]>;
    complaintComplaintRepliesDataSource = new MatTableDataSource<ComplaintReplyVO>([]);
    complaintComplaintRepliesSearchField: FormControl;
    complaintComplaintRepliesSelect: ComplaintReplyVO[] = [];

    @ViewChild('complaintComplaintTypeModalPaginator', {static: true}) complaintComplaintTypeModalPaginator: MatPaginator;
    @ViewChild('complaintComplaintTypeModalSort', {static: true}) complaintComplaintTypeModalSort: MatSort;
    
    complaintComplaintTypes$: Observable<Array<ComplaintTypeVO>>;
    complaintComplaintTypesDataSource = new MatTableDataSource<ComplaintTypeVO>([]);
    complaintComplaintTypeSelect: ComplaintTypeVO = new ComplaintTypeVO();
    complaintComplaintTypeSearchField: FormControl = new FormControl();

    complaintComplaintTypeModalColumns = [
        'actions',
        'id',
        'code',
        'typeName',
    ];

    @ViewChild('complaintLicenseeModalPaginator', {static: true}) complaintLicenseeModalPaginator: MatPaginator;
    @ViewChild('complaintLicenseeModalSort', {static: true}) complaintLicenseeModalSort: MatSort;
    
    complaintLicensees$: Observable<Array<LicenseeVO>>;
    complaintLicenseesDataSource = new MatTableDataSource<LicenseeVO>([]);
    complaintLicenseeSelect: LicenseeVO = new LicenseeVO();
    complaintLicenseeSearchField: FormControl = new FormControl();

    complaintLicenseeModalColumns = [
        'actions',
        'id',
        'uin',
        'licenseeName',
    ];

    statusT = ComplaintStatus;
    statusOptions: string[] = Object.keys(this.statusT);
    complaintComplaintTypeBackingList: Array<SelectItem> = [];
    complaintLicenseeBackingList: Array<SelectItem> = [];
    complaint$: Observable<ComplaintVO>;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    loaderMessage: Observable<string>;
    error: Observable<boolean>;
    selected: any = null;

    constructor(injector: Injector) {
        
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.complaintController = injector.get(ComplaintControllerImpl);
        this.complaintRestController = injector.get(ComplaintRestController);
        this._injector = injector;
        this.complaint$ = this.store.pipe(select(ComplaintSelectors.selectComplaint));
        this.loading = this.store.pipe(select(ComplaintSelectors.selectLoading));
        this.loaderMessage = this.store.pipe(select(ComplaintSelectors.selectLoaderMessage));
        this.success = this.store.pipe(select(ComplaintSelectors.selectSuccess));
        this.error = this.store.pipe(select(ComplaintSelectors.selectError));
        this.messages = this.store.pipe(select(ComplaintSelectors.selectMessages));
        this.complaintDocumentsSearchField = new FormControl();
        this.complaintComplaintRepliesSearchField = new FormControl();
    }

    beforeOnInit(form: EditComplaintVarsForm): EditComplaintVarsForm {
        return form;
    }
	
    ngOnInit() {
        let form: EditComplaintVarsForm = this.beforeOnInit(new EditComplaintVarsForm);
        this.editComplaintForm = this.newForm(form);

        this.editComplaintForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );

        this.complaintDocuments$?.subscribe(data => {
            this.complaintDocumentsDataSource.data = data;
            this.complaintDocumentsDataSource.paginator = this.complaintDocumentsModalPaginator;
            this.complaintDocumentsDataSource.sort = this.complaintDocumentsModalSort;
        });

        this.complaintComplaintReplies$?.subscribe(data => {
            this.complaintComplaintRepliesDataSource.data = data;
            this.complaintComplaintRepliesDataSource.paginator = this.complaintComplaintRepliesModalPaginator;
            this.complaintComplaintRepliesDataSource.sort = this.complaintComplaintRepliesModalSort;
        });

        this.complaintComplaintTypes$?.subscribe(data => {
            this.complaintComplaintTypesDataSource.data = data;
            this.complaintComplaintTypesDataSource.paginator = this.complaintComplaintTypeModalPaginator;
            this.complaintComplaintTypesDataSource.sort = this.complaintComplaintTypeModalSort;
        });

        this.complaintLicensees$?.subscribe(data => {
            this.complaintLicenseesDataSource.data = data;
            this.complaintLicenseesDataSource.paginator = this.complaintLicenseeModalPaginator;
            this.complaintLicenseesDataSource.sort = this.complaintLicenseeModalSort;
        });

        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    editComplaintFormReset() {

        this.store.dispatch(ComplaintActions.complaintReset());

        this.editComplaintForm.reset()
        this.editComplaintForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.complaintController.resetUseCaseScope();
    }

    newForm(editComplaintVarsForm$: EditComplaintVarsForm): FormGroup {
        return this.formBuilder.group({
            complaint: this.createComplaintForm(editComplaintVarsForm$?.complaint),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
        this.store.dispatch(ComplaintActions.complaintReset());
    }

    get editComplaintSaveForm(): EditComplaintSaveForm {

        let form: EditComplaintSaveForm = new EditComplaintSaveForm();
        form.complaint = this.complaint;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditComplaintSave(form: EditComplaintSaveForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditComplaintSave(form: EditComplaintSaveForm): void {}

    editComplaintSave(): void {
        let form: EditComplaintSaveForm = this.editComplaintSaveForm;
        this.beforeEditComplaintSave(form);

        this.complaintController.editComplaintSave(form);
        this.afterEditComplaintSave(form);
    }

    getEditComplaintSaveForm(value: any): EditComplaintSaveForm {
        
        let form: EditComplaintSaveForm = new EditComplaintSaveForm();

        if(value?.complaint) {
            form.complaint = value?.complaint;
        }

        return form;

    }

    get editComplaintDeleteForm(): EditComplaintDeleteForm {

        let form: EditComplaintDeleteForm = new EditComplaintDeleteForm();
        form.complaint = this.complaint;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditComplaintDelete(form: EditComplaintDeleteForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditComplaintDelete(form: EditComplaintDeleteForm): void {}

    editComplaintDelete(): void {
        let form: EditComplaintDeleteForm = this.editComplaintDeleteForm;
        this.beforeEditComplaintDelete(form);

        this.complaintController.editComplaintDelete(form);
        this.afterEditComplaintDelete(form);
    }

    getEditComplaintDeleteForm(value: any): EditComplaintDeleteForm {
        
        let form: EditComplaintDeleteForm = new EditComplaintDeleteForm();

        if(value?.complaint) {
            form.complaint = value?.complaint;
        }

        return form;

    }

    get editComplaintSearchForm(): EditComplaintSearchForm {

        let form: EditComplaintSearchForm = new EditComplaintSearchForm();

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditComplaintSearch(form: EditComplaintSearchForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditComplaintSearch(form: EditComplaintSearchForm): void {}

    editComplaintSearch(): void {
        let form: EditComplaintSearchForm = this.editComplaintSearchForm;
        this.beforeEditComplaintSearch(form);

        this.complaintController.editComplaintSearch(form);
        this.afterEditComplaintSearch(form);
    }

    getEditComplaintSearchForm(value: any): EditComplaintSearchForm {
        
        let form: EditComplaintSearchForm = new EditComplaintSearchForm();

        return form;

    }

    get editComplaintNewDocumentForm(): EditComplaintNewDocumentForm {

        let form: EditComplaintNewDocumentForm = new EditComplaintNewDocumentForm();

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditComplaintNewDocument(form: EditComplaintNewDocumentForm): void {}

    /**
     * This method may be overwritten
     */
    getEditComplaintNewDocumentFormDialogConfig(data: any): any{
        return {
            data: {
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    afterEditComplaintNewDocument(form: EditComplaintNewDocumentForm, dialogData: any): void {
        
    }

    editComplaintNewDocument(): void {
        let form: EditComplaintNewDocumentForm = this.editComplaintNewDocumentForm;
        this.beforeEditComplaintNewDocument(form);

        this.complaintController.editComplaintNewDocument(form);
        let dialogConfig = this.getEditComplaintNewDocumentFormDialogConfig(form);
        const dialogRef = this.dialog.open(ComplaintDocumentComponentImpl, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.afterEditComplaintNewDocument(form, result?.dialogData);
        });
    }

    getEditComplaintNewDocumentForm(value: any): EditComplaintNewDocumentForm {
        
        let form: EditComplaintNewDocumentForm = new EditComplaintNewDocumentForm();

        return form;

    }

    get editComplaintReplyForm(): EditComplaintReplyForm {

        let form: EditComplaintReplyForm = new EditComplaintReplyForm();

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditComplaintReply(form: EditComplaintReplyForm): void {}

    /**
     * This method may be overwritten
     */
    getEditComplaintReplyFormDialogConfig(data: any): any{
        return {
            data: {
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    afterEditComplaintReply(form: EditComplaintReplyForm, dialogData: any): void {
        
    }

    editComplaintReply(): void {
        let form: EditComplaintReplyForm = this.editComplaintReplyForm;
        this.beforeEditComplaintReply(form);

        this.complaintController.editComplaintReply(form);
        let dialogConfig = this.getEditComplaintReplyFormDialogConfig(form);
        const dialogRef = this.dialog.open(ReplyComponentImpl, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.afterEditComplaintReply(form, result?.dialogData);
        });
    }

    getEditComplaintReplyForm(value: any): EditComplaintReplyForm {
        
        let form: EditComplaintReplyForm = new EditComplaintReplyForm();

        return form;

    }

    get editComplaintVarsFormControl(): FormGroup {
        return this.getGroupControl('editComplaintVarsForm');
    }

    /**
     * This method may be overwritten
     */
    afterSetEditComplaintVarsForm(form: EditComplaintVarsForm): void {}

    setEditComplaintVarsForm(form: EditComplaintVarsForm) {

        this.editComplaintVarsFormControl.setControl('complaint', this.createComplaintForm(form.complaint));

        this.afterSetEditComplaintVarsForm(form);
    }

    createComplaintForm(complaint: ComplaintVO): FormGroup {
        return this.formBuilder.group({
            id: [{value: complaint?.id, disabled: false}],
            status: [{value: complaint?.status, disabled: false}, [Validators.required, ]],
            complaintId: [{value: complaint?.complaintId, disabled: false}],
            complaintType: this.createComplaintTypeVOGroup(complaint?.complaintType),
            licensee: this.createLicenseeVOGroup(complaint?.licensee),
            firstName: [{value: complaint?.firstName, disabled: false}, [Validators.required, ]],
            surname: [{value: complaint?.surname, disabled: false}, [Validators.required, ]],
            email: [{value: complaint?.email, disabled: false}, [Validators.required, ]],
            subject: [{value: complaint?.subject, disabled: false}, [Validators.required, ]],
            details: [{value: complaint?.details, disabled: false}, [Validators.required, ]],
            assignedTo: [{value: complaint?.assignedTo, disabled: false}],
            documents: this.createDocumentVOArray(complaint?.documents),
            complaintReplies: this.createComplaintReplyVOArray(complaint?.complaintReplies),
            createdDate: [{value: complaint?.createdDate, disabled: false}],
            updatedDate: [{value: complaint?.updatedDate, disabled: false}],
        });
    }

    get complaintControl(): FormGroup {
        return this.getGroupControl('complaint') as FormGroup;
    }

    get complaint(): ComplaintVO {
        return this.complaintControl.value;
    }

    get complaintIdControl(): FormControl {
        return this.complaintControl.get('id') as FormControl;
    }

    get complaintId(): number {
        return this.complaintIdControl.value;
    }

    get complaintStatusControl(): FormGroup {
        return this.complaintControl.get('status') as FormGroup;
    }

    get complaintStatus(): ComplaintStatus {
        return this.complaintStatusControl.value;
    }

    get complaintComplaintIdControl(): FormControl {
        return this.complaintControl.get('complaintId') as FormControl;
    }

    get complaintComplaintId(): string {
        return this.complaintComplaintIdControl.value;
    }

    get complaintComplaintTypeControl(): FormGroup {
        return this.complaintControl.get('complaintType') as FormGroup;
    }

    get complaintComplaintType(): ComplaintTypeVO {
        return this.complaintComplaintTypeControl.value;
    }


    complaintComplaintTypeAddDialog(): void {
    }

    
    complaintComplaintTypeSearch(): void {
    }

    handleComplaintComplaintTypeSelected(event: MatRadioChange, data: ComplaintTypeVO): void {}
    
    complaintComplaintTypeSelected(event: MatRadioChange, data: ComplaintTypeVO): void {
        
        this.complaintComplaintTypeSelect = data;
        this.handleComplaintComplaintTypeSelected(event, data);
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedComplaintComplaintType(): void {
        this.complaintControl.patchValue({complaintType: this.complaintComplaintTypeSelect});
    }

    complaintComplaintTypeClear(): void {
        this.complaintControl.patchValue({complaintType: new ComplaintTypeVO()});
    }

    get complaintLicenseeControl(): FormGroup {
        return this.complaintControl.get('licensee') as FormGroup;
    }

    get complaintLicensee(): LicenseeVO {
        return this.complaintLicenseeControl.value;
    }


    complaintLicenseeAddDialog(): void {
    }

    
    complaintLicenseeSearch(): void {
    }

    handleComplaintLicenseeSelected(event: MatRadioChange, data: LicenseeVO): void {}
    
    complaintLicenseeSelected(event: MatRadioChange, data: LicenseeVO): void {
        
        this.complaintLicenseeSelect = data;
        this.handleComplaintLicenseeSelected(event, data);
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedComplaintLicensee(): void {
        this.complaintControl.patchValue({licensee: this.complaintLicenseeSelect});
    }

    complaintLicenseeClear(): void {
        this.complaintControl.patchValue({licensee: new LicenseeVO()});
    }

    get complaintFirstNameControl(): FormControl {
        return this.complaintControl.get('firstName') as FormControl;
    }

    get complaintFirstName(): string {
        return this.complaintFirstNameControl.value;
    }

    get complaintSurnameControl(): FormControl {
        return this.complaintControl.get('surname') as FormControl;
    }

    get complaintSurname(): string {
        return this.complaintSurnameControl.value;
    }

    get complaintEmailControl(): FormControl {
        return this.complaintControl.get('email') as FormControl;
    }

    get complaintEmail(): string {
        return this.complaintEmailControl.value;
    }

    get complaintSubjectControl(): FormControl {
        return this.complaintControl.get('subject') as FormControl;
    }

    get complaintSubject(): string {
        return this.complaintSubjectControl.value;
    }

    get complaintDetailsControl(): FormControl {
        return this.complaintControl.get('details') as FormControl;
    }

    get complaintDetails(): string {
        return this.complaintDetailsControl.value;
    }

    get complaintAssignedToControl(): FormControl {
        return this.complaintControl.get('assignedTo') as FormControl;
    }

    get complaintAssignedTo(): string {
        return this.complaintAssignedToControl.value;
    }

    get complaintDocumentsControl(): FormArray {
        return this.complaintControl.get('documents') as FormArray;
    }

    get complaintDocuments(): DocumentVO[] {
        return this.complaintDocumentsControl.value;
    }


    complaintDocumentsAddDialog(): void {
    }

    
    complaintDocumentsSearch(): void {
    }

    handleDeleteFromComplaintDocuments(documents: DocumentVO): void {}
    
    deleteFromComplaintDocuments(index: number) {
        this.handleDeleteFromComplaintDocuments(this.complaintDocuments[index]);
        this.complaintDocumentsControl.removeAt(index);
    }

    doEditComplaintDocuments(documents: DocumentVO) {
    }

    handleComplaintDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {}
    
    complaintDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {
        if(event.checked) {
            this.complaintDocumentsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.complaintDocumentsSelect.filter(d => d[key] !== data[key]);
            this.complaintDocumentsSelect = tmp;
        }

        this.handleComplaintDocumentsSelected(event, data);
    }

    addToComplaintDocuments(data: DocumentVO) {
        this.complaintDocumentsControl.push(this.createDocumentVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedComplaintDocuments(): void {
        this.complaintDocumentsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.complaintDocuments.find((d: DocumentVO) => d[key] === data[key])
            if(!found) {
                this.addToComplaintDocuments(data);
            }
        });
    }

    get complaintComplaintRepliesControl(): FormArray {
        return this.complaintControl.get('complaintReplies') as FormArray;
    }

    get complaintComplaintReplies(): ComplaintReplyVO[] {
        return this.complaintComplaintRepliesControl.value;
    }


    complaintComplaintRepliesAddDialog(): void {
    }

    
    complaintComplaintRepliesSearch(): void {
    }

    handleDeleteFromComplaintComplaintReplies(complaintReplies: ComplaintReplyVO): void {}
    
    deleteFromComplaintComplaintReplies(index: number) {
        this.handleDeleteFromComplaintComplaintReplies(this.complaintComplaintReplies[index]);
        this.complaintComplaintRepliesControl.removeAt(index);
    }

    doEditComplaintComplaintReplies(complaintReplies: ComplaintReplyVO) {
    }

    handleComplaintComplaintRepliesSelected(event: MatCheckboxChange, data: ComplaintReplyVO): void {}
    
    complaintComplaintRepliesSelected(event: MatCheckboxChange, data: ComplaintReplyVO): void {
        if(event.checked) {
            this.complaintComplaintRepliesSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.complaintComplaintRepliesSelect.filter(d => d[key] !== data[key]);
            this.complaintComplaintRepliesSelect = tmp;
        }

        this.handleComplaintComplaintRepliesSelected(event, data);
    }

    addToComplaintComplaintReplies(data: ComplaintReplyVO) {
        this.complaintComplaintRepliesControl.push(this.createComplaintReplyVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedComplaintComplaintReplies(): void {
        this.complaintComplaintRepliesSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.complaintComplaintReplies.find((d: ComplaintReplyVO) => d[key] === data[key])
            if(!found) {
                this.addToComplaintComplaintReplies(data);
            }
        });
    }

    get complaintCreatedDateControl(): FormControl {
        return this.complaintControl.get('createdDate') as FormControl;
    }

    get complaintCreatedDate(): Date {
        return this.complaintCreatedDateControl.value;
    }

    get complaintUpdatedDateControl(): FormControl {
        return this.complaintControl.get('updatedDate') as FormControl;
    }

    get complaintUpdatedDate(): Date {
        return this.complaintUpdatedDateControl.value;
    }

    getItemControl(name: string): FormControl {
        return this.editComplaintForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.editComplaintForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.editComplaintForm.get(name) as FormArray;
    }

    setEditComplaintFormValue(form: any) {
        if(form.complaint) {
            this.editComplaintForm.setControl('complaint', this.createComplaintForm(form.complaint));
        }
    }

    createComplaintTypeVOGroup(value: ComplaintTypeVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            typeName: [value?.typeName],
            description: [value?.description],
        });
    }

    createComplaintTypeVOArray(values: ComplaintTypeVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createComplaintTypeVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createComplaintSeachCriteriaGroup(value: ComplaintSeachCriteria): FormGroup {
        return this.formBuilder.group({
            status: [value?.status],
            surname: [value?.surname],
            email: [value?.email],
            subject: [value?.subject],
            complaintId: [value?.complaintId],
            licenseeName: [value?.licenseeName],
            complaintType: [value?.complaintType],            
        });
    }

    createComplaintSeachCriteriaArray(values: ComplaintSeachCriteria[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createComplaintSeachCriteriaGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createComplaintVOGroup(value: ComplaintVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            status: [value?.status],
            complaintId: [value?.complaintId],
            firstName: [value?.firstName],
            surname: [value?.surname],
            email: [value?.email],
            subject: [value?.subject],
            details: [value?.details],
            assignedTo: [value?.assignedTo],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
        });
    }

    createComplaintVOArray(values: ComplaintVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createComplaintVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createDocumentVOGroup(value: DocumentVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            documentName: [value?.documentName],
            file: [value?.file],
            documentId: [value?.documentId],
            extension: [value?.extension],
            size: [value?.size],
        });
    }

    createDocumentVOArray(values: DocumentVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createDocumentVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenseeVOGroup(value: LicenseeVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            status: [value?.status],
            uin: [value?.uin],
            licenseeName: [value?.licenseeName],
            alias: [value?.alias],
            address: [value?.address],
        });
    }

    createLicenseeVOArray(values: LicenseeVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createComplaintReplyVOGroup(value: ComplaintReplyVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            date: [value?.date],
            replyUser: [value?.replyUser],
            reply: [value?.reply],
        });
    }

    createComplaintReplyVOArray(values: ComplaintReplyVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createComplaintReplyVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

}
