// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { EditLicenceComponent } from '@app/view/licence/edit-licence.component';
import { EditLicenceSaveForm } from '@app/view/licence/edit-licence.component';
import { EditLicenceVarsForm } from '@app/view/licence/edit-licence.component';
import { LicenceState } from '@app/store/licence/licence.state';
import * as LicenceSelectors from '@app/store/licence/licence.selectors';
import * as LicenceActions from '@app/store/licence/licence.actions';
import { KeycloakService } from 'keycloak-angular';
import { FormGroup } from '@angular/forms';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';

@Component({
  selector: 'app-edit-licence',
  templateUrl: './edit-licence.component.html',
  styleUrls: ['./edit-licence.component.scss'],
})
export class EditLicenceComponentImpl extends EditLicenceComponent {
  protected keycloakService: KeycloakService;
  deleteUnrestricted: boolean = true;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
  }

  override beforeOnInit(form: EditLicenceVarsForm): EditLicenceVarsForm {
    return form;
  }

  override doNgAfterViewInit(): void {
    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          LicenceActions.findById({
            id: queryParams?.id,
            loading: true,
          })
        );
      }
    });

    this.licence$.subscribe((licence) => {
      this.setEditLicenceFormValue({licence: licence});
    });
  }

  override doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
  override beforeEditLicenceSave(form: EditLicenceSaveForm): void {
    if (form.licence?.id) {
      form.licence.updatedBy = this.keycloakService.getUsername();
      form.licence.updatedDate = new Date();
    } else {
      form.licence.createdBy = this.keycloakService.getUsername();
      form.licence.createdDate = new Date();
    }

    this.store.dispatch(
      LicenceActions.save({
        licence: form.licence,
        loading: true,
      })
    );
  }

  // override afterEditLicenceNewDocument(form: EditLicenceNewDocumentForm, dialogData: any): void {
    
  //   if(dialogData) {
  //     console.log(dialogData)
  //     this.store.dispatch(
  //       LicenseeActions.addDocument({
  //         id: this.licenseeId,
  //         documentTypeId: dialogData.document.documentType.id,
  //         file: dialogData.document.file,
  //         fileName: dialogData.document.documentName,
  //         loading: true,
  //       })
  //     );
  //   }
  // }

  override createDocumentVOGroup(value: DocumentVO): FormGroup {
      return this.formBuilder.group({
          id: [value?.id],
          createdBy: [value?.createdBy],
          updatedBy: [value?.updatedBy],
          createdDate: [value?.createdDate],
          updatedDate: [value?.updatedDate],
          documentName: [value?.documentName],
          file: [value?.file],
          documentId: [value?.documentId],
          documentType: {
            id: [value.documentType.id],
            code: [value.documentType.code],
            name: [value.documentType.name],
          }
      });
  }
}
