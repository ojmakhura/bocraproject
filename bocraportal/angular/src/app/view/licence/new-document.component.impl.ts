// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, Inject } from '@angular/core';
import { NewDocumentComponent } from '@app/view/licence/new-document.component';
import { NewDocumentVarsForm } from '@app/view/licence/new-document.component';
import { LicenceState } from '@app/store/licence/licence.state';
import * as LicenceSelectors from '@app/store/licence/licence.selectors';
import * as LicenceActions from '@app/store/licence/licence.actions';
import * as DocumentTypeSelectors from '@app/store/document/type/document-type.selectors';
import * as DocumentTypeActions from '@app/store/document/type/document-type.actions';
import { select } from '@ngrx/store';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

@Component({
  selector: 'app-new-document',
  templateUrl: './new-document.component.html',
  styleUrls: ['./new-document.component.scss']
})
export class NewDocumentComponentImpl extends NewDocumentComponent {

    currentFile?: File = undefined;

    constructor(@Inject(MAT_DIALOG_DATA) data: any, private injector: Injector) {
        super(data, injector);
    this.documentLicences$ = this.store.pipe(select(LicenceSelectors.selectLicences));
    this.documentDocumentTypes$ = this.store.pipe(select(DocumentTypeSelectors.selectDocumentTypes));
    }

    override beforeOnInit(form: NewDocumentVarsForm): NewDocumentVarsForm{     
        return form;
    }

    doNgOnDestroy(): void {
    }

    override documentLicenceSearch(): void {
    //   let criteria: LicenseeCriteria = new LicenseeCriteria();
    //   criteria.licenseeName = this.documentLicenseeSearchField.value;
    //   criteria.uin = this.documentLicenseeSearchField.value;
    //   this.store.dispatch(
    //     LicenseeActions.search({
    //       criteria: criteria,
    //       loading: true,
    //     })
    //   );
    }

    override documentDocumentTypeSearch(): void {
        
      this.store.dispatch(
        DocumentTypeActions.search({
          criteria: this.documentDocumentTypeSearchField.value,
          loading: true,
          loaderMessage: 'Search document types ...'
        })
      );
    }
  
    onFileSelected(event: any) {
      if (event) {
        this.currentFile = event.target.files[0];
        this.documentDocumentNameControl.patchValue(this.currentFile?.name)
      }
    }
  
    override handleDialogDone(data: any): any {
      if(data.document) {
        data.document.file = this.currentFile;
      }
      return data;
    }
}