// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';
import * as LicenceTypeFormSelectors from '@app/store/licence/type/form/licence-type-form.selectors';
import * as licenceTypeActions from '@app/store/licence/type/licence-type.actions';
import * as ViewActions from '@app/store/view/view.actions';
import * as ViewSelectors from '@app/store/view/view.selectors';
import {
  EditLicenceTypeComponent,
  EditLicenceTypeDeleteForm, EditLicenceTypeSaveForm, EditLicenceTypeVarsForm
} from '@app/view/licence/type/edit-licence-type.component';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-edit-licence-type',
  templateUrl: './edit-licence-type.component.html',
  styleUrls: ['./edit-licence-type.component.scss'],
})
export class EditLicenceTypeComponentImpl extends EditLicenceTypeComponent {
  deleteUnrestricted: boolean = true;
  unauthorisedUrls$: Observable<string[]>;
  protected keycloakService: KeycloakService;
  formsModalColumns = [
      'actions',
      'id',
      'code',
      'formName',
  ];

  forms$: Observable<FormVO[]>;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
    this.unauthorisedUrls$ = this.store.pipe(select(ViewSelectors.selectUnauthorisedUrls));
    this.licenceTypeForms$ = this.store.pipe(select(LicenceTypeFormSelectors.selectLicenceTypeForms))
    this.forms$ = this.store.pipe(select(FormSelectors.selectForms))
  }

  override beforeOnInit(form: EditLicenceTypeVarsForm): EditLicenceTypeVarsForm {
    return form;
  }

  override afterOnInit() {
  }

  override doNgAfterViewInit(): void {
    this.store.dispatch(
      ViewActions.loadViewAuthorisations({
        viewUrl: "/licence/type/edit-licence-type",
        roles: this.keycloakService.getUserRoles(),
        loading: true
      })
    );

    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          licenceTypeActions.findById({
            id: queryParams?.id,
            loading: true,
          })
        );
      }
    });

    this.licenceType$.subscribe((licenceType) => {
      this.setEditLicenceTypeFormValue({licenceType: licenceType});
    });

    this.unauthorisedUrls$.subscribe(restrictedItems => {
      restrictedItems.forEach(item => {
        if(item === '/licence/type/edit-licence-type/{button:delete}') {
          this.deleteUnrestricted = false;
        }
      });
    });
  }

  override doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
   override beforeEditLicenceTypeSave(form: EditLicenceTypeSaveForm): void {
    if (this.editLicenceTypeForm.valid) {
      if (form.licenceType?.id) {
        form.licenceType.updatedBy = this.keycloakService.getUsername();
        form.licenceType.updatedDate = new Date();
      } else {
        form.licenceType.createdBy = this.keycloakService.getUsername();
        form.licenceType.createdDate = new Date();
      }

      this.store.dispatch(
        licenceTypeActions.save({
          licenceType: form.licenceType,
          loading: true,
        })
      );
    }
    else {
      let messages: string[] = []
      if (!this.licenceTypeControl.valid) {
        messages.push("Licence has errors, Please fill in the required form fields.")
      }
      if (!this.licenceTypeCodeControl.valid) {
        messages.push("Licence Type Code is missing!")
      }
      if (!this.licenceTypeNameControl.valid) {
        messages.push("Licence Type Name is missing!")
      }
      this.store.dispatch(licenceTypeActions.licenceTypeFailure({ messages: messages }));
  }
}

  override beforeEditLicenceTypeDelete(form: EditLicenceTypeDeleteForm): void {

    if(form?.licenceType?.id && confirm('Are you sure you want to delete the license type?')){
      this.store.dispatch(licenceTypeActions.remove({
        id: form?.licenceType?.id,
        loading: true
      }));
      this.editLicenceTypeFormReset();
    }else {
      this.store.dispatch(licenceTypeActions.licenceTypeFailure({ messages: ['Please select something to delete'] }))
    }
  }
  editLicenseTypeFormReset() {
    throw new Error('Method not implemented.');
  }

  override licenceTypeFormsSearch(): void {

    let criteria: FormCriteria = new  FormCriteria();
    criteria.code = this.licenceTypeFormsSearchField.value;
    criteria.formName = this.licenceTypeFormsSearchField.value;
    this.store.dispatch(FormActions.searchForms({
      criteria,
      loading: true
    }));
  }
}
