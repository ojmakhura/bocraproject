// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { HttpClient } from '@angular/common/http';
import { Component, Injector } from '@angular/core';
import { SelectItem } from '@app/utils/select-item';
import { EditUserComponent } from '@app/view/user/edit-user.component';
import { EditUserSaveForm } from '@app/view/user/edit-user.component';
import { EditUserDeleteForm } from '@app/view/user/edit-user.component';
import { EditUserSearchForm } from '@app/view/user/edit-user.component';
import { EditUserVarsForm } from '@app/view/user/edit-user.component';
import { environment } from '@env/environment';
import * as LicenseSelectors from '@app/store/licensee/licensee.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import * as UserActions from '@app/store/user/user.actions';
import { select } from '@ngrx/store';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-edit-user',
  templateUrl: './edit-user.component.html',
  styleUrls: ['./edit-user.component.scss'],
})
export class EditUserComponentImpl extends EditUserComponent {

  protected http: HttpClient;
  licensees$: Observable<LicenseeVO[]>;

  constructor(private injector: Injector) {
    super(injector);
    this.http = this._injector.get(HttpClient);
    this.licensees$ = this.store.pipe(select(LicenseSelectors.selectLicensees));
  }

  beforeOnInit() {
    this.http.get<any[]>(environment.keycloakClientRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.userRolesBackingList.push(item);
      });
    });

    this.http.get<any[]>(environment.keycloakRealmRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.userRolesBackingList.push(item);
      });
    });

    this.store.dispatch(LicenseeActions.getAll({loading: true}));
    this.licensees$.forEach(licensees => {
      licensees.forEach(licensee => {
        let item: SelectItem = new SelectItem();
        item.label = licensee.licenseeName;
        item.value = licensee;
        this.userLicenseeBackingList.push(item);
      });
    });
    
  }

  afterOnInit() {
    // if (this.useCaseScope.pageVariables['id']) {
    //   this.store.dispatch(licenceTypeActions.findById({ id: this.useCaseScope.pageVariables['id'] }));
    // }

    this.user$.subscribe((user) => {
      this.setEditUserSaveForm({ user: user } as EditUserSaveForm);
    });
  }

  doNgAfterViewInit() {}

  handleFormChanges(change: any) {}

  doNgOnDestroy() {
    this.store.dispatch(LicenseeActions.licenseeReset());
  }

  /**
   * This method may be overwritten
   */
  afterSetEditUserVarsForm(form: EditUserVarsForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserSaveForm(form: EditUserSaveForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserSave(form: EditUserSaveForm): void {
    console.log(form.user)
    this.store.dispatch(UserActions.createUser({
      user: form.user,
      loading: true
    }));
  }

  /**
   * This method may be overwritten
   */
  afterEditUserSave(form: EditUserSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserDeleteForm(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserDelete(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditUserDelete(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserSearchForm(form: EditUserSearchForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserSearch(form: EditUserSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditUserSearch(form: EditUserSearchForm): void {}
}
