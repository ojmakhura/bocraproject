// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { HttpClient } from '@angular/common/http';
import { Component, Injector } from '@angular/core';
import { SelectItem } from '@app/utils/select-item';
import { EditUserComponent } from '@app/view/user/edit-user.component';
import { EditUserSaveForm } from '@app/view/user/edit-user.component';
import { EditUserDeleteForm } from '@app/view/user/edit-user.component';
import { EditUserSearchForm } from '@app/view/user/edit-user.component';
import { EditUserVarsForm } from '@app/view/user/edit-user.component';
import { environment } from '@env/environment';

@Component({
  selector: 'app-edit-user',
  templateUrl: './edit-user.component.html',
  styleUrls: ['./edit-user.component.scss'],
})
export class EditUserComponentImpl extends EditUserComponent {
  protected http: HttpClient;
  constructor(private injector: Injector) {
    super(injector);
    this.http = this._injector.get(HttpClient);
  }

  beforeOnInit() {
    this.http.get<any[]>(environment.keycloakClientRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.userVORolesBackingList.push(item);
      });
    });

    this.http.get<any[]>(environment.keycloakRealmRoleUrl).subscribe((role) => {
      role.forEach((val) => {
        let item = new SelectItem();
        item.label = val['description'];
        item.value = val['name'];

        this.userVORolesBackingList.push(item);
      });
    });

    
  }

  afterOnInit() {}

  doNgAfterViewInit() {}

  handleFormChanges(change: any) {}

  doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserVarsForm(form: EditUserVarsForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserSaveForm(form: EditUserSaveForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserSave(form: EditUserSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditUserSave(form: EditUserSaveForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserDeleteForm(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserDelete(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditUserDelete(form: EditUserDeleteForm): void {}

  /**
   * This method may be overwritten
   */
  afterSetEditUserSearchForm(form: EditUserSearchForm): void {}

  /**
   * This method may be overwritten
   */
  beforeEditUserSearch(form: EditUserSearchForm): void {}

  /**
   * This method may be overwritten
   */
  afterEditUserSearch(form: EditUserSearchForm): void {}
}
