// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector, Inject } from '@angular/core';
import { ChangePasswordComponent } from '@app/view/user/change-password.component';
import { ChangePasswordVarsForm } from '@app/view/user/change-password.component';
import { UserState } from '@app/store/user/user.state';
import * as UserSelectors from '@app/store/user/user.selectors';
import * as UserActions from '@app/store/user/user.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

@Component({
  selector: 'app-change-password',
  templateUrl: './change-password.component.html',
  styleUrls: ['./change-password.component.scss']
})
export class ChangePasswordComponentImpl extends ChangePasswordComponent {

    passwordMessages: string[] = []
    passwordErrors: string[] = []

    constructor(@Inject(MAT_DIALOG_DATA) data: any, private injector: Injector) {
        super(data, injector);
    }

    override beforeOnInit(form: ChangePasswordVarsForm): ChangePasswordVarsForm{     
        return form;
    }

    doNgOnDestroy(): void {
    }

    override handleFormChanges(change: any): void {
        console.log(this.changePasswordForm.valid)
        if(change?.password != change?.confirmPassword) {
            this.passwordErrors = ["Passwords entered are not the same."];
            this.changePasswordForm
        } else {
            this.passwordErrors = [];
        }
    }

    /**
     * Before we return the dialog data, we need to check if the data in
     * the dialog is valid by checking that the form has no errors and that
     * the password and confirm fielda are the same.
     * @param data 
     * @returns 
     */
    override handleDialogDone(data: any): any {

        if(this.changePasswordForm.valid && this.password === this.confirmPassword) {
            return data;
        }

        return null;
    }
}