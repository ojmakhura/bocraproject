// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { EditAccessPointComponent } from '@app/view/access/edit-access-point.component';
import { EditAccessPointSaveForm } from '@app/view/access/edit-access-point.component';
import { EditAccessPointDeleteForm } from '@app/view/access/edit-access-point.component';
import { EditAccessPointSearchForm } from '@app/view/access/edit-access-point.component';
import { EditAccessPointVarsForm } from '@app/view/access/edit-access-point.component';
import { AccessPointState } from '@app/store/access/access-point.state';
import * as AccessPointTypeActions from '@app/store/access/type/access-point-type.actions';
import * as AccessPointTypeSelectors from '@app/store/access/type/access-point-type.selectors';
import * as AccessPointSelectors from '@app/store/access/access-point.selectors';
import * as AccessPointActions from '@app/store/access/access-point.actions';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { KeycloakService } from 'keycloak-angular';
import { select } from '@ngrx/store';
import { SelectItem } from '@app/utils/select-item';

@Component({
  selector: 'app-edit-access-point',
  templateUrl: './edit-access-point.component.html',
  styleUrls: ['./edit-access-point.component.scss']
})
export class EditAccessPointComponentImpl extends EditAccessPointComponent {
    
  protected keycloakService: KeycloakService;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = this._injector.get(KeycloakService);
    this.accessPointAccessPointTypes$ = this.store.pipe(select(AccessPointTypeSelectors.selectAccessPointTypes));
  }

  override beforeOnInit(form: EditAccessPointVarsForm): EditAccessPointVarsForm {

    this.store.dispatch(AccessPointTypeActions.getAll({loading: true}));
    this.accessPointAccessPointTypes$.subscribe(types => {
      types.forEach(type => {
        let item: SelectItem = new SelectItem;
        item.label = type.name
        item.value = type.id

        this.accessPointAccessPointTypeBackingList.push(item);
      });
    });
    
    return form;
  }
    
  override doNgOnDestroy() {}

  override doNgAfterViewInit(): void {
    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          AccessPointActions.findById({
            id: queryParams?.id,
            loading: false,
          })
        );
      }
    });

    this.accessPoint$.subscribe((accessPoint) => {
      this.setEditAccessPointFormValue({ accessPoint: accessPoint });
    });
  }

  override beforeEditAccessPointSave(form: EditAccessPointSaveForm): void {

    if (form.accessPoint?.id) {
      form.accessPoint.updatedBy = this.keycloakService.getUsername();
      form.accessPoint.updatedDate = new Date();
    } else {
      form.accessPoint.createdBy = this.keycloakService.getUsername();
      form.accessPoint.createdDate = new Date();
    }
    this.store.dispatch(
      AccessPointActions.save({
        accessPoint: form.accessPoint,
        loading: true,
      })
    );
  }

  override beforeEditAccessPointDelete(form: EditAccessPointDeleteForm): void {
    this.store.dispatch(
      AccessPointActions.remove({
        id: form?.accessPoint?.id,
        loading: false,
      })
    );
  }
}