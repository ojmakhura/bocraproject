// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  Injector,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  Inject,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatTableDataSource } from '@angular/material/table';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { MatDialogRef } from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { ShareholderState } from '@app/store/shareholder/shareholder.state';
import * as ShareholderSelectors from '@app/store/shareholder/shareholder.selectors';
import * as ShareholderActions from '@app/store/shareholder/shareholder.actions';

import { ShareholderRestController } from '@app/service/bw/org/bocra/portal/shareholder/shareholder-rest-controller';
import { LicenseeShareholderVO } from '@app/model/bw/org/bocra/portal/licensee/shares/licensee-shareholder-vo';
import { ShareholderVO } from '@app/model/bw/org/bocra/portal/shareholder/shareholder-vo';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';
import { ShareholderControllerImpl } from '@app/controller/shareholder/shareholder-controller.impl';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { EditSharesComponentImpl } from '@app/view/shareholder/edit-shares.component.impl';
import { NewDocumentComponentImpl } from './new-document.component.impl';
export class EditSharesVarsForm {
  licensee: LicenseeShareholderVO | any;
}

export class EditLicenseeAddDocumentForm {
  document: DocumentVO | any;
}

@Component({
  selector: 'app-edit-shares-base',
  template: '',
})
export abstract class EditSharesComponent implements OnInit, AfterViewInit, OnDestroy {
  public dialogRef: MatDialogRef<EditSharesComponentImpl>;
  dialogData: any;
  editSharesForm: FormGroup | any;
  hide: boolean = false;
  protected route: ActivatedRoute;
  protected router: Router;
  protected formBuilder: FormBuilder;
  protected _injector: Injector;
  protected useCaseScope: UseCaseScope;
  protected store: Store<ShareholderState>;
  dialog: MatDialog;
  shareholderController: ShareholderControllerImpl;
  shareholderRestController: ShareholderRestController;
  licenseeDocumentsColumns = ['id', 'documentId', 'documentType.name', 'documentName'];

  licenseeDocumentsModalColumns = ['actions', ...this.licenseeDocumentsColumns];

  @ViewChild('licenseeDocumentsPaginator', { static: true }) licenseeDocumentsPaginator: MatPaginator;
  @ViewChild('licenseeDocumentsSort', { static: true }) licenseeDocumentsSort: MatSort;

  @ViewChild('licenseeDocumentsModalPaginator', { static: true }) licenseeDocumentsModalPaginator: MatPaginator;
  @ViewChild('licenseeDocumentsModalSort', { static: true }) licenseeDocumentsModalSort: MatSort;

  licenseeDocuments$: Observable<DocumentVO[]>;
  licenseeDocumentsDataSource = new MatTableDataSource<DocumentVO>([]);
  licenseeDocumentsSearchField: FormControl;
  licenseeDocumentsSelect: DocumentVO[] = [];

  @ViewChild('licenseeLicenseeModalPaginator', { static: true }) licenseeLicenseeModalPaginator: MatPaginator;
  @ViewChild('licenseeLicenseeModalSort', { static: true }) licenseeLicenseeModalSort: MatSort;

  licenseeLicensees$: Observable<Array<LicenseeVO>>;
  licenseeLicenseesDataSource = new MatTableDataSource<LicenseeVO>([]);
  licenseeLicenseeSelect: LicenseeVO = new LicenseeVO();
  licenseeLicenseeSearchField: FormControl = new FormControl();

  licenseeLicenseeModalColumns = ['actions', 'id', 'uin', 'licenseeName'];

  @ViewChild('licenseeShareholderModalPaginator', { static: true }) licenseeShareholderModalPaginator: MatPaginator;
  @ViewChild('licenseeShareholderModalSort', { static: true }) licenseeShareholderModalSort: MatSort;

  licenseeShareholders$: Observable<Array<ShareholderVO>>;
  licenseeShareholdersDataSource = new MatTableDataSource<ShareholderVO>([]);
  licenseeShareholderSelect: ShareholderVO = new ShareholderVO();
  licenseeShareholderSearchField: FormControl = new FormControl();

  licenseeShareholderModalColumns = ['actions', 'type', 'shareholderId', 'name'];

  licenseeLicenseeBackingList: Array<SelectItem> = [];
  licenseeShareholderBackingList: Array<SelectItem> = [];
  licensee$: Observable<LicenseeShareholderVO>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean>;
  loaderMessage: Observable<string>;
  error: Observable<boolean>;
  selected: any = null;

  constructor(@Inject(MAT_DIALOG_DATA) data: any, injector: Injector) {
    this.route = injector.get(ActivatedRoute);
    this.router = injector.get(Router);
    this.formBuilder = injector.get(FormBuilder);
    this.useCaseScope = injector.get(UseCaseScope);
    this.store = injector.get(Store);
    this.dialog = injector.get(MatDialog);
    this.dialogRef = injector.get(MatDialogRef);
    this.dialogData = data;
    this.shareholderController = injector.get(ShareholderControllerImpl);
    this.shareholderRestController = injector.get(ShareholderRestController);
    this._injector = injector;
    this.licensee$ = this.store.pipe(select(ShareholderSelectors.selectLicensee));
    this.loading = this.store.pipe(select(ShareholderSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(ShareholderSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(ShareholderSelectors.selectSuccess));
    this.error = this.store.pipe(select(ShareholderSelectors.selectError));
    this.messages = this.store.pipe(select(ShareholderSelectors.selectMessages));
    this.licenseeDocumentsSearchField = new FormControl();
  }

  beforeOnInit(form: EditSharesVarsForm): EditSharesVarsForm {
    return form;
  }

  ngOnInit() {
    let form: EditSharesVarsForm = this.beforeOnInit(new EditSharesVarsForm());
    this.editSharesForm = this.newForm(form);

    this.editSharesForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.licenseeDocuments$?.subscribe((data) => {
      this.licenseeDocumentsDataSource.data = data;
      this.licenseeDocumentsDataSource.paginator = this.licenseeDocumentsModalPaginator;
      this.licenseeDocumentsDataSource.sort = this.licenseeDocumentsModalSort;
    });

    this.licenseeLicensees$?.subscribe((data) => {
      this.licenseeLicenseesDataSource.data = data;
      this.licenseeLicenseesDataSource.paginator = this.licenseeLicenseeModalPaginator;
      this.licenseeLicenseesDataSource.sort = this.licenseeLicenseeModalSort;
    });

    this.licenseeShareholders$?.subscribe((data) => {
      this.licenseeShareholdersDataSource.data = data;
      this.licenseeShareholdersDataSource.paginator = this.licenseeShareholderModalPaginator;
      this.licenseeShareholdersDataSource.sort = this.licenseeShareholderModalSort;
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  editSharesFormReset() {
    this.store.dispatch(ShareholderActions.shareholderReset());

    this.editSharesForm.reset();
    this.editSharesForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.shareholderController.resetUseCaseScope();
  }

  newForm(editSharesVarsForm$: EditSharesVarsForm): FormGroup {
    return this.formBuilder.group({
      licensee: this.createLicenseeForm(editSharesVarsForm$?.licensee),
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
  }

  get editSharesVarsFormControl(): FormGroup {
    return this.getGroupControl('editSharesVarsForm');
  }

  /**
   * This method may be overwritten
   */
  afterSetEditSharesVarsForm(form: EditSharesVarsForm): void {}

  setEditSharesVarsForm(form: EditSharesVarsForm) {
    this.editSharesVarsFormControl.setControl('licensee', this.createLicenseeForm(form.licensee));

    this.afterSetEditSharesVarsForm(form);
  }

  createLicenseeForm(licensee: LicenseeShareholderVO): FormGroup {
    return this.formBuilder.group({
      id: [{ value: licensee?.id, disabled: false }],
      licensee: this.createLicenseeVOGroup(licensee?.licensee),
      shareholder: this.createShareholderVOGroup(licensee?.shareholder),
      numberOfShares: [{ value: licensee?.numberOfShares, disabled: false }],
      documents: this.createDocumentVOArray(licensee?.documents),
    });
  }

  get licenseeControl(): FormGroup {
    return this.getGroupControl('licensee') as FormGroup;
  }

  get licensee(): LicenseeShareholderVO {
    return this.licenseeControl.value;
  }

  get licenseeIdControl(): FormControl {
    return this.licenseeControl.get('id') as FormControl;
  }

  get licenseeId(): number {
    return this.licenseeIdControl.value;
  }

  get licenseeLicenseeControl(): FormGroup {
    return this.licenseeControl.get('licensee') as FormGroup;
  }

  get licenseeLicensee(): LicenseeVO {
    return this.licenseeLicenseeControl.value;
  }

  get licenseeShareholderControl(): FormGroup {
    return this.licenseeControl.get('shareholder') as FormGroup;
  }

  get licenseeShareholder(): ShareholderVO {
    return this.licenseeShareholderControl.value;
  }

  get licenseeNumberOfSharesControl(): FormControl {
    return this.licenseeControl.get('numberOfShares') as FormControl;
  }

  get licenseeNumberOfShares(): number {
    return this.licenseeNumberOfSharesControl.value;
  }

  get licenseeDocumentsControl(): FormArray {
    return this.licenseeControl.get('documents') as FormArray;
  }

  get licenseeDocuments(): DocumentVO[] {
    return this.licenseeDocumentsControl.value;
  }

  licenseeDocumentsAddDialog(): void {}

  licenseeDocumentsSearch(): void {}

  handleDeleteFromLicenseeDocuments(documents: DocumentVO): void {}

  deleteFromLicenseeDocuments(index: number) {
    this.handleDeleteFromLicenseeDocuments(this.licenseeDocuments[index]);
    this.licenseeDocumentsControl.removeAt(index);
  }

  doEditLicenseeDocuments(documents: DocumentVO) {}

  handleLicenseeDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {}

  licenseeDocumentsSelected(event: MatCheckboxChange, data: DocumentVO): void {
    if (event.checked) {
      this.licenseeDocumentsSelect.push(data);
    } else {
      const key = Object.keys(data)[0];
      let tmp = this.licenseeDocumentsSelect.filter((d) => d[key] !== data[key]);
      this.licenseeDocumentsSelect = tmp;
    }

    this.handleLicenseeDocumentsSelected(event, data);
  }

  addToLicenseeDocuments(data: DocumentVO) {
    this.licenseeDocumentsControl.push(this.createDocumentVOGroup(data));
  }

  /**
   * May be overridden to customise behaviour
   *
   */
  addSelectedLicenseeDocuments(): void {
    this.licenseeDocumentsSelect.forEach((data) => {
      const key = Object.keys(data)[0];
      const found = this.licenseeDocuments.find((d: DocumentVO) => d[key] === data[key]);
      if (!found) {
        this.addToLicenseeDocuments(data);
      }
    });
  }

  getItemControl(name: string): FormControl {
    return this.editSharesForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editSharesForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editSharesForm.get(name) as FormArray;
  }

  setEditSharesFormValue(form: any) {
    if (form.licensee) {
      this.editSharesForm.setControl('licensee', this.createLicenseeForm(form.licensee));
    }
  }

  createLicenseeShareholderVOGroup(value: LicenseeShareholderVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      numberOfShares: [value?.numberOfShares],
    });
  }

  createLicenseeShareholderVOArray(values: LicenseeShareholderVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createLicenseeShareholderVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createShareholderVOGroup(value: ShareholderVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      shareholderId: [value?.shareholderId],
      type: [value?.type],
      name: [value?.name],
      address: [value?.address],
    });
  }

  createShareholderVOArray(values: ShareholderVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createShareholderVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createDocumentVOGroup(value: DocumentVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      documentName: [value?.documentName],
      file: [value?.file],
      documentId: [value?.documentId],
      extension: [value?.extension],
      size: [value?.size],
      metadataTarget: [value?.metadataTarget],
      metadataTargetId: [value?.metadataTargetId],
    });
  }

  createDocumentVOArray(values: DocumentVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createDocumentVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  createLicenseeVOGroup(value: LicenseeVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      status: [value?.status],
      uin: [value?.uin],
      licenseeName: [value?.licenseeName],
      alias: [value?.alias],
      address: [value?.address],
    });
  }

  createLicenseeVOArray(values: LicenseeVO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createLicenseeVOGroup(value)));

      return formArray;
    } else {
      return new FormArray([]);
    }
  }

  handleDialogDone(data: any): any {
    return data;
  }

  dialogDone() {
    this.dialogRef.close({
      dialogData: this.handleDialogDone(this.editSharesForm.value),
    });
  }

  /**
   * This method may be overwritten
   */
  beforeEditLicenseeAddDocument(form: EditLicenseeAddDocumentForm): void {}

  /**
   * This method may be overwritten
   */
  getEditLicenseeAddDocumentFormDialogConfig(data: any): any {
    return {
      data: {
        width: '800px',
      },
    };
  }

  /**
   * This method may be overwritten
   */
  afterEditLicenseeAddDocument(form: EditLicenseeAddDocumentForm, dialogData: any): void {}

  editLicenseeAddDocument(): void {
    let form: EditLicenseeAddDocumentForm = this.editLicenseeAddDocumentForm;
    this.beforeEditLicenseeAddDocument(form);

    this.shareholderController.editShareholderAddDocument(form);
    let dialogConfig = this.getEditLicenseeAddDocumentFormDialogConfig(form);
    const dialogRef = this.dialog.open(NewDocumentComponentImpl, dialogConfig);

    dialogRef.afterClosed().subscribe((result) => {
      this.afterEditLicenseeAddDocument(form, result?.dialogData);
    });
  }

  getEditLicenseeNewDocumentForm(value: any): EditLicenseeAddDocumentForm {
    let form: EditLicenseeAddDocumentForm = new EditLicenseeAddDocumentForm();

    return form;
  }

  get editLicenseeAddDocumentForm(): EditLicenseeAddDocumentForm {
    let form: EditLicenseeAddDocumentForm = new EditLicenseeAddDocumentForm();

    return form;
  }
}
