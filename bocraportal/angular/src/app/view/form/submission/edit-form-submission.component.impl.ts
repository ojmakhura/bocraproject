// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import {
  EditFormSubmissionComponent,
  EditFormSubmissionSubmitForm,
} from '@app/view/form/submission/edit-form-submission.component';
import { EditFormSubmissionSaveForm } from '@app/view/form/submission/edit-form-submission.component';
import { EditFormSubmissionVarsForm } from '@app/view/form/submission/edit-form-submission.component';
import * as SubmissionActions from '@app/store/form/submission/form-submission.actions';
import * as SubmissionSelectors from '@app/store/form/submission/form-submission.selectors';
import * as FormSelectors from '@app/store/form/form.selectors';
import * as LicenseeSelectors from '@app/store/licensee/licensee.selectors';
import * as FormSubmissionActions from '@app/store/form/submission/form-submission.actions';
import { KeycloakService } from 'keycloak-angular';
import { Observable } from 'rxjs';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { select } from '@ngrx/store';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { FormFieldVO } from '@app/model/bw/org/bocra/portal/form/field/form-field-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormArray, FormGroup } from '@angular/forms';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { FormEntryType } from '@app/model/bw/org/bocra/portal/form/form-entry-type';
import { FormSubmissionStatus } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-status';
import { RowGroup } from '@app/model/submission/row-group';
import { SubmissionRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/submission/submission-rest-controller.impl';

@Component({
  selector: 'app-edit-form-submission',
  templateUrl: './edit-form-submission.component.html',
  styleUrls: ['./edit-form-submission.component.scss'],
})
export class EditFormSubmissionComponentImpl extends EditFormSubmissionComponent {
  
  protected keycloakService: KeycloakService;
  formSubmissions$: Observable<FormSubmissionVO[]>;
  forms$: Observable<FormVO[]>;
  fieldColumns: string[] = [];
  fieldColumnIds: string[] = [];
  formFields: FormFieldVO[] = [];
  rowGroups: RowGroup[] = [];

  constructor(submissionRestController: SubmissionRestControllerImpl, private injector: Injector) {
    super(injector);
    this.keycloakService = injector.get(KeycloakService);
    this.formSubmissions$ = this.store.pipe(select(SubmissionSelectors.selectFormSubmissions));
    this.forms$ = this.store.pipe(select(FormSelectors.selectForms));
    this.formSubmissionLicensees$ = this.store.pipe(select(LicenseeSelectors.selectLicensees));
  }

  override beforeOnInit(form: EditFormSubmissionVarsForm): EditFormSubmissionVarsForm {
    return form;
  }

  override doNgAfterViewInit() {
    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          FormSubmissionActions.findById({
            id: queryParams.id,
            loading: true,
          })
        );
      }
    });

    this.formSubmission$.subscribe((submission) => {
      this.rowGroups = [];
      this.formFields = submission?.form?.formFields;

      submission?.sections?.forEach(section => {
        section.dataFields.forEach((dataField: DataFieldVO) => {
          this.addToRowGroup(dataField);
        })
      });

      this.setEditFormSubmissionFormValue({ formSubmission: submission });
      submission?.form?.formFields?.forEach((field) => {
        this.fieldColumns.push(field.fieldName);
        this.fieldColumnIds.push(field.fieldId);
      });
    });
  }

  doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
  override beforeEditFormSubmissionSave(form: EditFormSubmissionSaveForm): void {
    let formSubmission: FormSubmissionVO = form.formSubmission;
    formSubmission.submissionStatus = FormSubmissionStatus.DRAFT;
    this.doFormSubmissionSave(formSubmission);
  }

  override beforeEditFormSubmissionSubmit(form: EditFormSubmissionSubmitForm): void {
    let formSubmission: FormSubmissionVO = form.formSubmission;
    formSubmission.submissionStatus = FormSubmissionStatus.SUBMITTED;
    this.doFormSubmissionSave(formSubmission);
  }

  private doFormSubmissionSave(formSubmission: FormSubmissionVO) {
    if (formSubmission?.id) {
      formSubmission.updatedBy = this.keycloakService.getUsername();
      formSubmission.updatedDate = new Date();
    } else {
      formSubmission.createdBy = this.keycloakService.getUsername();
      formSubmission.createdDate = new Date();
    }

    this.store.dispatch(SubmissionActions.save({ formSubmission, loading: true }));
  }

  getFormObject(form: string) {
    return JSON.parse(form);
  }

  isSimpleType(data: DataFieldVO): boolean {
    const type = data.formField.fieldType;

    return (
      type === 'TEXT' ||
      type === 'TEXTAREA' ||
      type === 'PASSWORD' ||
      type === 'LINK' ||
      type === 'EMAIL' ||
      type === 'RANGE' ||
      type === 'NUMBER' ||
      type === 'PLAINTEXT' ||
      type === 'DATE' ||
      type === 'MONTH' ||
      type === 'SEARCH' ||
      type === 'SELECT'
    );
  }

  isRange(data: DataFieldVO): boolean {
    return data.formField.fieldType === 'RANGE';
  }

  isSelect(data: DataFieldVO): boolean {
    return data.formField.fieldType === 'SELECT';
  }

  isHidden(data: DataFieldVO) {
    return data.formField.fieldType === 'HIDDEN';
  }

  getType(data: DataFieldVO): string {
    return data.formField.fieldType.toLowerCase();
  }

  isTextArea(data: DataFieldVO): boolean {
    return data.formField.fieldType === 'TEXTAREA';
  }

  isButton(data: DataFieldVO): boolean {
    return data.formField.fieldType === 'BUTTON';
  }

  isInputHidden(type: string): boolean {
    return type === 'HIDDEN';
  }

  createFormFieldForm(formField: FormFieldVO): FormGroup {
    return this.formBuilder.group({
      id: [formField?.id ? formField.id : null],
      createdBy: [formField?.createdBy ? formField.createdBy : null],
      updatedBy: [formField?.updatedBy ? formField.updatedBy : null],
      createdDate: [formField?.createdDate ? formField.createdDate : null],
      updatedDate: [formField?.updatedDate ? formField.updatedDate : null],
      fieldType: [formField?.fieldType ? formField.fieldType : null],
      fieldName: [formField?.fieldName ? formField.fieldName : null],
      defaultValue: [formField?.defaultValue ? formField.defaultValue : null],
      required: [formField?.required ? formField.required : null],
      min: [formField?.min ? formField.min : null],
      max: [formField?.max ? formField.max : null],
      options: this.formBuilder.array(formField?.options ? formField.options : []),
    });
  }

  override createDataFieldSectionVOGroup(value: DataFieldSectionVO): FormGroup {
    return this.formBuilder.group({
      sectionId: [value?.sectionId],
      sectionLabel: [value?.sectionLabel],
      position: [value?.position],
      dataFields: this.createDataFieldVOArray(value.dataFields),
    });
  }

  override createDataFieldVOGroup(value: DataFieldVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      row: [value?.row],
      formField: this.createFormFieldForm(value?.formField),
      value: [value?.value ? value?.value : this.getFieldDefaultValue(value)],
    });
  }

  getFieldDefaultValue(field: DataFieldVO) {
    return field.formField.defaultValue;
  }

  override handleFormChanges(change: any): void {}

  getDataValue(data: DataFieldVO) {
    return `${data.formField.fieldName}`;
  }

  getSectorFieldsControls(i: number): FormArray {
    return this.formSubmissionSectionsControl.controls[i].get('dataFields') as FormArray;
  }

  getSectorFields(i: number): DataFieldVO[] {
    return this.formSubmissionSectionsControl.controls[i].get('dataFields')?.value;
  }

  getSectionId(i: number): string {
    return this.formSubmissionSections[i].sectionId;
  }

  getSectionLabel(i: number): string {
    return this.formSubmissionSections[i].sectionLabel;
  }

  trackByFn(index: any, item: any) {
    return index;
  }

  isSingleEntry(): boolean {
    return this.formSubmission.form.entryType === FormEntryType.SINGLE;
  }

  getFormField(fieldId: string): FormFieldVO | any {
    let filtered = this.formFields.filter((field) => field.fieldId === fieldId);

    if (filtered.length > 0) {
      return filtered[0];
    }

    return null;
  }

  uploadData() {
    
  }

  getFieldKeys(object: any): string[] {
    return Object.keys(object);
  }

  onFileSelected(event: any) {
    if (event) {
      const file: File = event.target.files[0];
      if(!file) {
        return;
      }
      file.text().then((content) => {
        let rows: string[] = content.trim().split('\n');
        let headers: string[] = rows[0].trim().split(',');
        let dataRows: string[] = rows.splice(1);

        for (let i = 0; i < dataRows.length; i++) {
          const row = dataRows[i].trim();
          const rowData = row.split(',');

          if (rowData.length != headers.length) {
            continue;
          }

          for (let j = 0; j < rowData.length; j++) {
            
            let field: DataFieldVO = new DataFieldVO();
            field.row = i + 1;
            field.formField = this.getFormField(headers[j]);
            field.value = rowData[j];
            field.formSubmission = <FormSubmissionVO>{
              id: this.formSubmissionId,
            };

            this.submissionRestController.addDataField(field).subscribe(dataField => {
              
              this.addToRowGroup(dataField);
            })
          }
        }
      });
    }
  }

  addToRowGroup(dataField: DataFieldVO) {
    let filteredGroups: RowGroup[] = this.rowGroups.filter((fd) => fd.row === dataField.row);
    let group: RowGroup | undefined = undefined;

    if (!filteredGroups || (filteredGroups && filteredGroups.length == 0)) {
      group = new RowGroup();
      group.row = dataField.row;
      this.rowGroups.push(group);
      
    } else {
      group = filteredGroups[0];
    }
    
    group.fields.push(dataField);
    this.formSubmissionDataFieldsControl.push(this.createDataFieldVOGroup(dataField));
  }

  deleteDataRow(row: number, group: RowGroup) {
    
    this.rowGroups.splice(row, 1); // remove from the row group array

    // remove from the form submissionb
    group.fields.forEach(field => {
      const index = this.formSubmissionDataFields.findIndex(fd => (fd.row === field.row && fd.formField.id === field.formField.id));
      this.formSubmissionDataFieldsControl.removeAt(index);
    });

  }

  doEditDataRow(row: number, group: RowGroup) {

  }
}
