// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { SearchFormsComponent } from '@app/view/form/search-forms.component';
import { SearchFormsSearchForm } from '@app/view/form/search-forms.component';
import { SearchFormsVarsForm } from '@app/view/form/search-forms.component';
import * as FormActions from '@app/store/form/form.actions';
import * as PeriodConfigSelectors from '@app/store/period/config/period-config.selectors';
import * as PeriodConfigActions from '@app/store/period/config/period-config.actions';
import { KeycloakService } from 'keycloak-angular';
import { HttpClient } from '@angular/common/http';
import { environment } from '@env/environment';
import { SelectItem } from '@app/utils/select-item';
import { select } from '@ngrx/store';

@Component({
  selector: 'app-search-forms',
  templateUrl: './search-forms.component.html',
  styleUrls: ['./search-forms.component.scss'],
})
export class SearchFormsComponentImpl extends SearchFormsComponent {
  protected keycloakService: KeycloakService;
  protected http: HttpClient;
  constructor(private injector: Injector) {
    super(injector);
    this.http = this._injector.get(HttpClient);
    this.keycloakService = this._injector.get(KeycloakService);
    this.formsPeriodConfigs$ = this.store.pipe(select(PeriodConfigSelectors.selectPeriodConfigs));
  }

  override beforeOnInit(form: SearchFormsVarsForm): SearchFormsVarsForm {
    this.store.dispatch(FormActions.formReset());
    this.store.dispatch(PeriodConfigActions.getAll({
      loading: true,
      loaderMessage: 'Loading period configs ...',
    }));
    this.keycloakService.loadUserProfile().then((profile) => {
      if (!profile) return;

      this.http.get<any[]>(`${environment.keycloakRealmUrl}/clients`).subscribe((clients) => {

        if(!clients || clients.length == 0) return;

        let client = clients.filter((client) => client.clientId === environment.keycloak.clientId)[0];
        this.http
          .get<any[]>(
            `${environment.keycloakRealmUrl}/users/${profile.id}/role-mappings/clients/${client.id}/composite`
          )
          .subscribe((roles) => {
            roles
              .sort((a, b) => a.name.localeCompare(b.name))
              .forEach((role) => {
                if (this.keycloakService.getUserRoles().includes(role.name)) {
                  let item = new SelectItem();
                  item.label = role['description'];
                  item.value = role['name'];

                  this.criteriaRolesBackingList.push(item);
                }
              });
          });
      });

      this.http
        .get<any[]>(`${environment.keycloakRealmUrl}/users/${profile.id}/role-mappings/realm/composite`)
        .subscribe((roles) => {

          if(!roles || roles.length == 0) return;

          roles
            .sort((a, b) => a.name.localeCompare(b.name))
            .forEach((role: any) => {
              if (this.keycloakService.getUserRoles().includes(role.name) && !role.description?.includes('${')) {
                let item = new SelectItem();
                item.label = role['description'];
                item.value = role['name'];

                this.criteriaRolesBackingList.push(item);
              }
            });
        });
    });
    return form;
  }

  override doNgOnDestroy() {}

  /**
   * This method may be overwritten
   */
  override beforeSearchFormsSearch(form: SearchFormsSearchForm): void {
    this.store.dispatch(
      FormActions.searchForms({
        criteria: form.criteria,
        loading: true,
        loaderMessage: 'Searching forms ...',
      })
    );
  }
}
