// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormFieldVO } from '@app/model/bw/org/bocra/portal/form/field/form-field-vo';
import { FormSectionVO } from '@app/model/bw/org/bocra/portal/form/section/form-section-vo';
import { LicenceTypeCriteria } from '@app/model/bw/org/bocra/portal/licence/type/licence-type-criteria';
import { LicenseeFormVO } from '@app/model/bw/org/bocra/portal/licensee/form/licensee-form-vo';
import { LicenseeCriteria } from '@app/model/bw/org/bocra/portal/licensee/licensee-criteria';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';
import * as LicenceTypeFormSelectors from '@app/store/licence/type/form/licence-type-form.selectors';
import * as LicenceTypeActions from '@app/store/licence/type/licence-type.actions';
import * as LicenseeFormActions from '@app/store/licensee/form/licensee-form.actions';
import * as LicenseeFormSelectors from '@app/store/licensee/form/licensee-form.selectors';
import * as LicenseeActions from '@app/store/licensee/licensee.actions';
import * as SectorSelectors from '@app/store/sector/sector.selectors';
import * as SectorActions from '@app/store/sector/sector.actions';
import {
  EditFormAddFieldForm,
  EditFormAddLicenseeForm,
  EditFormAddSectionForm,
  EditFormComponent,
  EditFormDeleteForm,
  EditFormSaveForm,
  EditFormVarsForm,
} from '@app/view/form/edit-form.component';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { Observable } from 'rxjs';
import * as ViewActions from '@app/store/view/view.actions';
import * as ViewSelectors from '@app/store/view/view.selectors';
import { SectorFormVO } from '@app/model/bw/org/bocra/portal/sector/form/sector-form-vo';
import { HttpClient } from '@angular/common/http';
import { SelectItem } from '@app/utils/select-item';
import { environment } from '@env/environment';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';

@Component({
  selector: 'app-edit-form',
  templateUrl: './edit-form.component.html',
  styleUrls: ['./edit-form.component.scss'],
})
export class EditFormComponentImpl extends EditFormComponent {
  protected http: HttpClient;
  protected keycloakService: KeycloakService;
  private formSection$: Observable<FormSectionVO>;
  private formField$: Observable<FormFieldVO>;
  private licenseeForm$: Observable<LicenseeFormVO>;
  unauthorisedUrls$: Observable<string[]>;
  deleteUnrestricted: boolean = true;
  licenseeRemoved$: Observable<boolean>;

  constructor(private injector: Injector) {
    super(injector);
    this.http = this._injector.get(HttpClient);
    this.formLicenceTypes$ = this.store.pipe(select(LicenceTypeFormSelectors.selectLicenceTypeForms));
    this.keycloakService = injector.get(KeycloakService);
    this.formFormFields$ = this.store.pipe(select(FormSelectors.selectFormFields));
    this.formField$ = this.store.pipe(select(FormSelectors.selectFormField));
    this.formSection$ = this.store.pipe(select(FormSelectors.selectFormSection));
    this.formFormSections$ = this.store.pipe(select(FormSelectors.selectFormSections));
    this.licenseeForm$ = this.store.pipe(select(LicenseeFormSelectors.selectLicenseeForm));
    this.unauthorisedUrls$ = this.store.pipe(select(ViewSelectors.selectUnauthorisedUrls));
    this.formSectors$ = this.store.pipe(select(SectorSelectors.selectSectors));
    this.licenseeRemoved$ = this.store.pipe(select(LicenseeFormSelectors.selectRemoved));
  }

  override beforeOnInit(form: EditFormVarsForm): EditFormVarsForm {
    return form;
  }

  override doNgOnDestroy(): void {}

  override afterOnInit() {}

  override doNgAfterViewInit() {
    this.store.dispatch(
      ViewActions.loadViewAuthorisations({
        viewUrl: '/form/edit-form',
        roles: this.keycloakService.getUserRoles(),
        loading: true,
      })
    );

    this.http.get<any[]>(`${environment.keycloakRealmUrl}/clients`).subscribe((clients) => {
      let client = clients.filter(client => client.clientId === environment.keycloak.clientId)[0]
      this.keycloakService.loadUserProfile().then(profile => {
        
        this.http.get<any[]>(`${environment.keycloakRealmUrl}/users/${profile.id}/role-mappings/clients/${client.id}/composite`)?.subscribe((roles) => {
          roles?.sort((a, b) => a.name.localeCompare(b.name))?.forEach((role) => {
            if (this.keycloakService.getUserRoles().includes(role.name)) {
    
              let item = new SelectItem();
              item.label = role['description'];
              item.value = role['name'];
    
              this.formRolesBackingList.push(item);
            }
          });
        });
      })
    });

    this.route?.queryParams?.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
          FormActions.findFormById({
            id: queryParams.id,
            loading: true,
            loaderMessage: 'Loading form by id',
          })
        );
      }
    });

    this.form$?.subscribe((form) => {
      if (form?.formSections) {
        this.store.dispatch(
          FormActions.setSections({
            formSections: form?.formSections,
          })
        );
      }

      this.setEditFormFormValue({ form: form });
    });

    this.formSection$?.subscribe((section) => {
      if (section) {
        let sc: FormSectionVO | undefined = this.formFormSections.find((sec, i) => {
          if(sec.id == section.id) {
            this.formFormSectionsControl.at(i).patchValue(section);
            return true;
          } else {
            return false;
          }
        });

        if(!sc) {
          this.addToFormFormSections(section);
        }
        
      }
    });

    this.formField$?.subscribe((field) => {
      if (field) {
        this.addToFormFormFields(field);
      }
    });

    this.licenseeForm$?.subscribe((licenseeForm) => {
      if (licenseeForm) {
        this.addToFormLicensees(licenseeForm);
      }
    });

    this.unauthorisedUrls$?.subscribe((restrictedItems) => {
      restrictedItems.forEach((item) => {
        if (item === '/form/edit-form/{button:delete}') {
          this.deleteUnrestricted = false;
        }
      });
    });
  }

  /**
   * This method may be overwritten
   */
  override beforeEditFormSave(form: EditFormSaveForm): void {
    if (this.formControl.valid) {
      if (form.form.id) {
        form.form.updatedBy = this.keycloakService.getUsername();
        form.form.updatedDate = new Date();
      } else {
        form.form.createdBy = this.keycloakService.getUsername();
        form.form.createdDate = new Date();
      }

      form.form.formFields = undefined;
      form.form.formSections = undefined;

      this.store.dispatch(
        FormActions.saveForm({
          form: form.form,
          loading: true,
          loaderMessage: 'Save form ...',
        })
      );
    } else {
      let messages: string[] = [];
      if (!this.formControl.valid) {
        messages.push('Form has errors, Please fill in the required form fields');
      }
      if (!this.formCodeControl.valid) {
        messages.push('Form Code is missing!');
      }
      if (!this.formFormNameControl.valid) {
        messages.push('Forn Name is missing!');
      }
      if (!this.formEntryTypeControl.valid) {
        messages.push('Forn Entry Type is missing!');
      }
      this.store.dispatch(FormActions.formFailure({ messages: messages }));
    }
  }

  override formLicenceTypesSearch(): void {
    let criteria: LicenceTypeCriteria = new LicenceTypeCriteria();
    criteria.typeSearch = this.formLicenceTypesSearchField.value;
    this.store.dispatch(
      LicenceTypeActions.search({
        criteria: criteria,
        loading: true,
        loaderMessage: 'Searching licence types ...',
      })
    );
  }

  override formLicenseesAddDialog() {
    this.editFormAddLicensee();
  }

  override formLicenseesSearch(): void {
    let criteria: LicenseeCriteria = new LicenseeCriteria();
    criteria.licenseeName = this.formLicenseesSearchField.value;
    criteria.uin = this.formLicenseesSearchField.value;
    this.store.dispatch(
      LicenseeActions.search({
        criteria: criteria,
        loading: true,
        loaderMessage: 'Searching licensees ...',
      })
    );
  }

  override formSectorsSearch(): void {
    this.store.dispatch(
      SectorActions.search({
        criteria: this.formSectorsSearchField.value,
        loading: true,
        loaderMessage: 'Searchning sectors ...',
      })
    );
  }

  override beforeEditFormAddField(form: EditFormAddFieldForm): void {
    this.useCaseScope.pageVariables['form'] = this.form;
    this.useCaseScope.queryParams['formId'] = this.form.id;
  }

  override afterEditFormAddLicensee(form: EditFormAddLicenseeForm, dialogData: any): void {
    if (dialogData?.licenseeForm) {
      let licensee: LicenseeFormVO = dialogData.licenseeForm;
      this.store.dispatch(
        LicenseeFormActions.create({
          licenseeId: licensee.licensee.id,
          formId: licensee.form.id,
          loading: true,
          loaderMessage: 'Creating licensee form association ...',
        })
      );
    }
  }

  override afterEditFormAddSection(form: EditFormAddSectionForm, dialogData: any): void {
    if (dialogData?.formSection) {
      let section: FormSectionVO = dialogData.formSection;
      if (section.id) {
        section.updatedBy = this.keycloakService.getUsername();
        section.updatedDate = new Date();
      } else {
        section.createdBy = this.keycloakService.getUsername();
        section.createdDate = new Date();
      }

      section.form = new FormVO();
      section.form.id = this.form.id

      this.store.dispatch(
        FormActions.saveSection({
          formSection: section,
          loading: true,
          loaderMessage: 'Saving form section ...',
        })
      );
    }
  }

  override doEditFormFormFields(formField: any) {
    this.formController.resetUseCaseScope();
    this.useCaseScope.queryParams['id'] = formField.id;
    this.router.navigate(['form/edit-field'], { queryParams: this.useCaseScope.queryParams });
  }

  override doEditFormFormSections(formSections: FormSectionVO) {
    this.useCaseScope.queryParams['formSection'] = formSections;
    this.useCaseScope.pageVariables['formSection'] = formSections;
    this.editFormAddSection();
  }

  override afterEditFormDelete(form: EditFormDeleteForm): void {
    this.editFormFormReset();

    if (form?.form?.id && confirm('Are you sure you want to delete the form?')) {
      this.store.dispatch(
        FormActions.removeForm({
          id: form.form.id,
          loading: true,
          loaderMessage: 'Removing form section ...',
        })
      );
    }
  }

  override createLicenseeFormVOGroup(value: LicenseeFormVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      licensee: {
        id: value?.licensee?.id,
        uin: value?.licensee?.uin,
        licenseeName: value?.licensee?.licenseeName,
        status: value?.licensee?.status,
      },
      form: {
        id: value?.form?.id,
        code: value?.form?.code,
        formName: value?.form?.formName,
      },
    });
  }

  override deleteFromFormFormSections(index: number) {
    if (confirm('Are you sure you want to remove the section?')) {
      let sectionFields = this.formFormFields.filter(
        (field) => field.formSection.id == this.formFormSections[index].id
      );

      if (sectionFields.length == 0) {
        this.store.dispatch(
          FormActions.removeSection({
            id: this.formFormSections[index].id,
            loading: true,
            loaderMessage: `Deleting section ${this.formFormSections[index].sectionLabel} ...`,
          })
        );

        this.formFormSectionsControl.removeAt(index);
      } else {
        alert('Cannot remove the section. It still has fields attached.');
      }
    }
  }

  override deleteFromFormFormFields(index: number) {
    // this.handleDeleteFromFormFormFields(this.formFormFields[index]);
    // this.formFormFieldsControl.removeAt(index);
  }

  override deleteFromFormLicensees(index: number) {
    if (confirm('Are you sure you want to remove the licensee from the form?')) {
      this.store.dispatch(
        LicenseeFormActions.remove({
          id: this.formLicensees[index].id,
          loading: true,
          loaderMessage: `Removing licensee ${this.formLicensees[index].licensee.licenseeName} ...`,
        })
      );

      this.licenseeRemoved$.subscribe((removed) => {
        if (removed) {
          this.formLicenseesControl.removeAt(index);
        }
      });
    }
  }

  override createFormFieldVOGroup(value: FormFieldVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      createdBy: [value?.createdBy],
      updatedBy: [value?.updatedBy],
      createdDate: [value?.createdDate],
      updatedDate: [value?.updatedDate],
      fieldType: [value?.fieldType],
      fieldId: [value?.fieldId],
      fieldName: [value?.fieldName],
      description: [value?.description],
      fieldValueType: [value?.fieldValueType],
      expression: [value?.expression],
      defaultValue: [value?.defaultValue],
      required: [value?.required],
      min: [value?.min],
      max: [value?.max],
      minLength: [value?.minLength],
      maxLength: [value?.maxLength],
      formSection: {
        id: [value?.formSection?.id],
        position: [value?.formSection?.position],
        sectionId: [value?.formSection?.sectionId],
        sectionLabel: [
          value?.formSection?.sectionLabel ? value?.formSection?.sectionLabel : value?.formSection?.sectionId,
        ],
      },
    });
  }

  override createSectorFormVOGroup(value: SectorFormVO): FormGroup {
    return this.formBuilder.group({
      id: [value?.id],
      sector: {
        id: value?.sector?.id,
        code: value?.sector?.code,
        name: value?.sector?.name,
      },
    });
  }
}
