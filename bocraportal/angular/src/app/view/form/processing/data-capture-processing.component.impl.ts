// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { HttpClient } from '@angular/common/http';
import { Component, Injector } from '@angular/core';
import { FormSubmissionCriteria } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-criteria';
import { FormSubmissionStatus } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-status';
import { SubmissionSummary } from '@app/model/bw/org/bocra/portal/form/submission/submission-summary';
import * as DataProcessingActions from '@app/store/form/processing/data-processing.actions';
import * as DataProcessingSelectors from '@app/store/form/processing/data-processing.selectors';
import {
  DataCaptureProcessingAcceptedSubmissionsForm,
  DataCaptureProcessingAllSubmissionsForm,
  DataCaptureProcessingComponent,
  DataCaptureProcessingDraftsForm,
  DataCaptureProcessingMySubmissionsForm,
  DataCaptureProcessingNewSubmissionForm,
  DataCaptureProcessingOverdueSubmissionsForm,
  DataCaptureProcessingReturnedSubmissionsForm,
} from '@app/view/form/processing/data-capture-processing.component';
import { environment } from '@env/environment';
import { select } from '@ngrx/store';
import { KeycloakService } from 'keycloak-angular';
import { Observable } from 'rxjs';
import { FormModule } from '../form.module';

@Component({
  selector: 'app-data-capture-processing',
  templateUrl: './data-capture-processing.component.html',
  styleUrls: ['./data-capture-processing.component.scss'],
})
export class DataCaptureProcessingComponentImpl extends DataCaptureProcessingComponent {
  submissionSummary$: Observable<SubmissionSummary>;
  roles: string[] = this.keycloakService
      .getUserRoles()
      ?.filter(role => {
        return !this.keycloakService.getUserRoles(false).includes(role)
                && !['offline_access', 'uma_authorization'].includes(role)
                && !role.includes('default-roles')
      });

  summary!: SubmissionSummary;
  protected http: HttpClient;

  constructor(private injector: Injector, private keycloakService: KeycloakService) {
    super(injector);
    this.http = this._injector.get(HttpClient);

  }

  override beforeOnInit(): void {}

  override doNgAfterViewInit(): void {
    let criteria: FormSubmissionCriteria = new FormSubmissionCriteria();
    criteria.submittedBy = this.keycloakService.getUsername();
    criteria.roles = this.roles;

    this.store.dispatch(
      DataProcessingActions.dataCaptureSummary({ 
        criteria: criteria,
        loading: true,
        loaderMessage: 'Loading data capture summary ...' 
      })
    );

    this.submissionSummary$ = this.store.pipe(select(DataProcessingSelectors.selectSubmissionSummary));

    this.submissionSummary$.subscribe((data) => {
      this.summary = data;
    });
  }

  doNgOnDestroy(): void {}

  override beforeDataCaptureProcessingNewSubmission(form: DataCaptureProcessingNewSubmissionForm): void {

    this.loadData(FormSubmissionStatus.NEW, undefined);
  }

  override beforeDataCaptureProcessingDrafts(form: DataCaptureProcessingDraftsForm): void {
    
    this.loadData(FormSubmissionStatus.DRAFT, undefined);
  }

  override beforeDataCaptureProcessingMySubmissions(form: DataCaptureProcessingMySubmissionsForm): void {
    
    this.loadData(FormSubmissionStatus.SUBMITTED, this.keycloakService.getUsername());
  }

  override beforeDataCaptureProcessingAllSubmissions(form: DataCaptureProcessingAllSubmissionsForm): void {
    
    this.loadData(FormSubmissionStatus.SUBMITTED, undefined);
  }

  override beforeDataCaptureProcessingOverdueSubmissions(form: DataCaptureProcessingOverdueSubmissionsForm): void {
    
    let criteria: FormSubmissionCriteria = new FormSubmissionCriteria();
    criteria.submissionStatus = FormSubmissionStatus.OVERDUE;

    this.loadData(FormSubmissionStatus.OVERDUE, undefined);
  }

  override beforeDataCaptureProcessingReturnedSubmissions(form: DataCaptureProcessingReturnedSubmissionsForm): void {
    
    this.loadData(FormSubmissionStatus.RETURNED, undefined);
  }

  override beforeDataCaptureProcessingAcceptedSubmissions(form: DataCaptureProcessingAcceptedSubmissionsForm): void {
    
    this.loadData(FormSubmissionStatus.ACCEPTED, undefined);
  }

  async loadData(status: FormSubmissionStatus, username: string | undefined) {

    this.store.dispatch(
      DataProcessingActions.loadDataSuccess({
        formSubmissions: [],
        messages: [],
        success: true,
      })
    );

    let criteria: FormSubmissionCriteria = new FormSubmissionCriteria();
    criteria.submissionStatus = status;
    criteria.roles = this.roles;

    if(username) {
      criteria.submittedBy = username;
    }

    this.store.dispatch(
      DataProcessingActions.loadData({
        criteria: criteria,
        loading: true,
        loaderMessage: 'Loading form submissions ...',
      })
    );
  }
}
