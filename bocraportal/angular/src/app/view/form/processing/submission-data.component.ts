// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import { 
    Component, 
    OnInit, 
    Injector, 
    ViewChild, 
    Input, 
    Output, 
    EventEmitter, 
    AfterViewInit,
    Inject,
    OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { 
    FormGroup, 
    FormControl, 
    FormArray, 
    FormBuilder, 
    ReactiveFormsModule, 
    Validators 
} from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { SelectItem } from '@app/utils/select-item';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import {MatDialogRef} from '@angular/material/dialog';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { DataProcessingState } from '@app/store/form/processing/data-processing.state';
import * as DataProcessingSelectors from '@app/store/form/processing/data-processing.selectors';
import * as DataProcessingActions from '@app/store/form/processing/data-processing.actions';

import { SubmissionRestController } from '@app/service/bw/org/bocra/portal/form/submission/submission-rest-controller';
import { NoteVO } from '@app/model/bw/org/bocra/portal/form/submission/note/note-vo';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { SubmissionDataFormSubmissionsComponentImpl } from '@app/view/form/processing/submission-data-form-submissions.component.impl';
import { SubmissionProcessingImpl } from '@app/controller/form/processing/submission-processing.impl';
import { PeriodVO } from '@app/model/bw/org/bocra/portal/period/period-vo';
import { SubmissionDataComponentImpl } from '@app/view/form/processing/submission-data.component.impl';
@Component({
  selector: 'app-submission-data-base',
  template: ''
})
export abstract class SubmissionDataComponent implements OnInit, AfterViewInit, OnDestroy {

    public dialogRef: MatDialogRef<SubmissionDataComponentImpl>;
    dialogData: any;
	submissionDataForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<DataProcessingState>;
    dialog: MatDialog;
    submissionProcessing: SubmissionProcessingImpl;
    submissionRestController: SubmissionRestController;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    error: Observable<boolean>;
    selected: any = null;

    constructor(@Inject(MAT_DIALOG_DATA) data: any, injector: Injector) {
        
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.dialogRef = injector.get(MatDialogRef);
        this.dialogData = data
        this.submissionProcessing = injector.get(SubmissionProcessingImpl);
        this.submissionRestController = injector.get(SubmissionRestController);
        this._injector = injector;
        this.loading = this.store.pipe(select(DataProcessingSelectors.selectLoading));
        this.success = this.store.pipe(select(DataProcessingSelectors.selectSuccess));
        this.error = this.store.pipe(select(DataProcessingSelectors.selectError));
        this.messages = this.store.pipe(select(DataProcessingSelectors.selectMessages));
    }

    abstract beforeOnInit(): void;
	
    ngOnInit() {
        this.beforeOnInit();
        this.submissionDataForm = this.newForm();

        this.submissionDataForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    submissionDataFormReset() {

        this.store.dispatch(DataProcessingActions.dataProcessingReset());
        this.submissionDataForm.reset()
        this.submissionDataForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.submissionProcessing.resetUseCaseScope();
    }

    newForm(): FormGroup {
        return this.formBuilder.group({
            formSubmissions: this.formBuilder.array([
                this.formBuilder.group({
                    id: [''],
                })
            ]),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
    }

    getItemControl(name: string): FormControl {
        return this.submissionDataForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.submissionDataForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.submissionDataForm.get(name) as FormArray;
    }

    setSubmissionDataFormValue(form: any) {
    }

    setFormSubmissions(formSubmissions: Array<FormSubmissionVO>): FormArray {

        const formSubmissionsArray = new FormArray([]);

        if(!formSubmissions || formSubmissions === undefined || formSubmissions === null) {
            return formSubmissionsArray;
        }

        formSubmissions.forEach((item) => {
            formSubmissionsArray.push(this.createFormSubmissionsGroup(item));
        });

        this.submissionDataForm.setControl('formSubmissions', formSubmissionsArray);

        return formSubmissionsArray;
    }

    get formSubmissionsControl(): FormArray {
        return this.getArrayControl('formSubmissions');
    }

    get formSubmissions(): Array<FormSubmissionVO>[] {
        return this.formSubmissionsControl.value;
    }

    deleteFromFormSubmissions(index: number) {
        this.formSubmissionsControl.removeAt(index);
    }

    addToFormSubmissions(data: any) {
        this.formSubmissionsControl.push(this.createFormSubmissionsGroup(data));
    }

    createFormSubmissionsGroup(data: any): FormGroup {
        return this.formBuilder.group({
            id: [data?.id],
        });
    }

    addFormSubmissionsDummyData() {
        this.formSubmissionsControl.push(this.formBuilder.group({
            id: [1],
        }));

        this.formSubmissionsControl.push(this.formBuilder.group({
            id: [2],
        }));
    }

    createNoteVOGroup(value: NoteVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            createdDate: [value?.createdDate],
            note: [value?.note],
        });
    }

    createNoteVOArray(values: NoteVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createNoteVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormVOGroup(value: FormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            formName: [value?.formName],
            description: [value?.description],
            entryType: [value?.entryType],
        });
    }

    createFormVOArray(values: FormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createDataFieldVOGroup(value: DataFieldVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            value: [value?.value],
            units: [value?.units],
            comments: [value?.comments],
            sectionPosition: [value?.sectionPosition],
            sectionId: [value?.sectionId],
            sectionLabel: [value?.sectionLabel],
            row: [value?.row],
        });
    }

    createDataFieldVOArray(values: DataFieldVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createDataFieldVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenseeVOGroup(value: LicenseeVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            status: [value?.status],
            uin: [value?.uin],
            licenseeName: [value?.licenseeName],
            address: [value?.address],
        });
    }

    createLicenseeVOArray(values: LicenseeVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormSubmissionVOGroup(value: FormSubmissionVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            submittedBy: [value?.submittedBy],
            submissionDate: [value?.submissionDate],
            submissionStatus: [value?.submissionStatus],
            upload: [value?.upload],
        });
    }

    createFormSubmissionVOArray(values: FormSubmissionVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormSubmissionVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createDataFieldSectionVOGroup(value: DataFieldSectionVO): FormGroup {
        return this.formBuilder.group({
            sectionId: [value?.sectionId],
            sectionLabel: [value?.sectionLabel],
            position: [value?.position],
        });
    }

    createDataFieldSectionVOArray(values: DataFieldSectionVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createDataFieldSectionVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createPeriodVOGroup(value: PeriodVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            periodName: [value?.periodName],
            periodStart: [value?.periodStart],
            periodEnd: [value?.periodEnd],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
        });
    }

    createPeriodVOArray(values: PeriodVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createPeriodVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    handleCancelDialog(): void {}

    cancelDialog() {
        this.handleCancelDialog();
        this.dialogRef.close({event: 'Cancel'});
    }

    handleDialogDone(data: any): any {
        return data;
    }

    dialogDone() {
        this.dialogRef.close({
            dialogData: this.handleDialogDone(this.submissionDataForm.value)
        });
    }

}
