// Generated by andromda-jsf cartridge (view\table\table.component.ts.vsl) DO NOT EDIT!
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { 
    Component, 
    OnInit, 
    ViewChild, 
    Injector, 
    Input,
    OnDestroy
} from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { FormArray } from '@angular/forms';
import { ControllerBase } from '@app/controller/utils/controller.base';
import { ActivatedRoute, Router } from '@angular/router';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import { DataProcessingState } from '@app/store/form/processing/data-processing.state';
import * as DataProcessingSelectors from '@app/store/form/processing/data-processing.selectors';

import { NoteVO } from '@app/model/bw/org/bocra/portal/form/submission/note/note-vo';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { PeriodVO } from '@app/model/bw/org/bocra/portal/period/period-vo';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { DataFieldSectionVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-section-vo';
import { SubmissionDataComponentImpl } from '@app/view/form/processing/submission-data.component.impl';
import { SubmissionProcessingImpl } from '@app/controller/form/processing/submission-processing.impl';

@Component({
  selector: 'submission-data-form-submissions-base',
  template: ''
})
export abstract class SubmissionDataFormSubmissionsComponent implements OnInit, OnDestroy {

    formSubmissionsColumns = [
        'id',
        'licensee.licenseeName',
        'form.formName',
        'period.periodName',
        'actions'
    ];

    formSubmissions$: Observable<Array<FormSubmissionVO>>;

    formSubmissionsDataSource = new MatTableDataSource<FormSubmissionVO>([]);
    @ViewChild('formSubmissionsPaginator', {static: true}) formSubmissionsPaginator: MatPaginator;
    @ViewChild('formSubmissionsSort', {static: true}) formSubmissionsSort: MatSort;

    @Input() protected pageVariables: any;
    protected route: ActivatedRoute;
    protected router: Router;
    protected useCaseScope: UseCaseScope;
    protected store: Store<DataProcessingState>;
    protected submissionProcessing: SubmissionProcessingImpl;
    protected submissionDataComponent: SubmissionDataComponentImpl;
    protected _injector: Injector;

    constructor(injector: Injector) {
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.submissionProcessing = injector.get(SubmissionProcessingImpl);
        this.submissionDataComponent = injector.get(SubmissionDataComponentImpl);
        this._injector = injector;
        //this.formSubmissions$ = this.store.pipe(select(DataProcessingSelectors.selectFormSubmissions));
    }

    ngOnInit(): void {
    }
	    
    ngOnDestroy() { 
    }
    
    ngAfterViewInit() {
        this.formSubmissions$
        .subscribe(
            formSubmissions => {
                this.formSubmissionsDataSource.data = formSubmissions;
            }
        );
        this.formSubmissionsDataSource.paginator = this.formSubmissionsPaginator;
        this.formSubmissionsDataSource.sort = this.formSubmissionsSort;
    }

    doSubmissionData(form: any): any {}
	
	submissionData(id: number) {
        let form = {
            id: id,
        };
        let queryParams: any = {
            id: id,
        };
        this.submissionProcessing.setQueryParams(Object.assign({}, queryParams));
        let params = this.doSubmissionData(form);
        this.useCaseScope.pageVariables = Object.assign({}, params);
        this.submissionProcessing.submissionData(params);
	}
}