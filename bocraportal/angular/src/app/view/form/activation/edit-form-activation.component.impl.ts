// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Injector } from '@angular/core';
import {
  EditFormActivationComponent,
  EditFormActivationSaveForm,
} from '@app/view/form/activation/edit-form-activation.component';
import { EditFormActivationVarsForm } from '@app/view/form/activation/edit-form-activation.component';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';
import * as PeriodActions from '@app/store/period/period.actions';
import * as PeriodSelectors from '@app/store/period/period.selectors';
import { PeriodCriteria } from '@app/model/bw/org/bocra/portal/period/period-criteria';
import { KeycloakService } from 'keycloak-angular';
import { select } from '@ngrx/store';
import { PeriodVO } from '@app/model/bw/org/bocra/portal/period/period-vo';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import * as FormActivationActions from '@app/store/form/activation/form-activation.actions';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-edit-form-activation',
  templateUrl: './edit-form-activation.component.html',
  styleUrls: ['./edit-form-activation.component.scss'],
})
export class EditFormActivationComponentImpl extends EditFormActivationComponent {
  protected keycloakService: KeycloakService;

  constructor(private injector: Injector) {
    super(injector);
    this.keycloakService = this._injector.get(KeycloakService);
    this.formActivationPeriods$ = this.store.pipe(select(PeriodSelectors.selectPeriods));
    this.formActivationForms$ = this.store.pipe(select(FormSelectors.selectForms));
  }

  override beforeOnInit(form: EditFormActivationVarsForm): EditFormActivationVarsForm {
    return form;
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit(): void {
    this.route.queryParams.subscribe((queryParams: any) => {
      if (queryParams?.id) {
        this.store.dispatch(
            FormActivationActions.findById({
            id: queryParams.id,
            loading: true,
          })
        );
      }
    });

    this.formActivationFormControl.valueChanges.subscribe((form: FormVO) => {
      if (form.formName) {
        let activationName = `${form.formName}`;
        if (this.formActivationPeriod?.periodName) {
          activationName = `${form.formName}: ${this.formActivationPeriod?.periodName}`;
        }

        activationName = `${activationName} Activation`;

        this.formActivationActivationNameControl.patchValue(activationName);
      }
    });

    this.formActivationPeriodControl.valueChanges.subscribe((period: PeriodVO) => {
      if (period.periodName) {
        let activationName = `${period.periodName}`;
        if (this.formActivationForm?.formName) {
          activationName = `${this.formActivationForm?.formName}: ${activationName}`;
        }

        activationName = `${activationName} Activation`;

        this.formActivationActivationNameControl.patchValue(activationName);
      }
    });

    this.formActivation$.subscribe(formActivation => {
        console.log(formActivation)
        this.setEditFormActivationFormValue({formActivation});
    });
  }

  override handleFormChanges(change: any): void {
  }

  override formActivationFormSearch(): void {
    let criteria: FormCriteria = new FormCriteria();
    criteria.code = this.formActivationFormSearchField.value;
    criteria.formName = this.formActivationFormSearchField.value;
    this.store.dispatch(FormActions.searchForms({ criteria: criteria, loading: true }));
  }

  override formActivationPeriodSearch(): void {
    let criteria: PeriodCriteria = new PeriodCriteria();
    criteria.periodName = this.formActivationPeriodSearchField.value;

    this.store.dispatch(PeriodActions.search({ criteria, loading: true }));
  }

  override beforeEditFormActivationSave(form: EditFormActivationSaveForm): void {
    if (this.formActivationControl.valid) {
      if (form.formActivation.id) {
        form.formActivation.updatedBy = this.keycloakService.getUsername();
        form.formActivation.updatedDate = new Date();
      } else {
        form.formActivation.createdBy = this.keycloakService.getUsername();
        form.formActivation.createdDate = new Date();
      }
      this.store.dispatch(
        FormActivationActions.save({
          formActivation: form.formActivation,
          loading: true,
        })
      );
    } else {
      this.store.dispatch(FormActivationActions.formActivationFailure({ messages: ['Form activation has an error!'] }));
    }
  }

  override createFormSubmissionVOGroup(value: FormSubmissionVO): FormGroup {
      return this.formBuilder.group({
          id: [value?.id],
          createdBy: [value?.createdBy],
          updatedBy: [value?.updatedBy],
          createdDate: [value?.createdDate],
          updatedDate: [value?.updatedDate],
          submittedBy: [value?.submittedBy],
          submissionDate: [value?.submissionDate],
          submissionStatus: [value?.submissionStatus],
          upload: [value?.upload],
          form: {
            id: value?.form?.id,
            code: value?.form?.code,
            formName: value?.form?.formName,
            entryType: value?.form?.entryType,
          },
          period: {
            id: value?.period?.id,
            periodName: value?.period?.periodName,
            periodStart: value?.period?.periodStart,
            periodEnd: value?.period?.periodEnd,
          },
          licensee: {
            id: value?.licensee?.id,
            uin: value?.licensee?.uin,
            licenseeName: value?.licensee?.licenseeName,
            status: value?.licensee?.status,
          }
      });
  }
}
