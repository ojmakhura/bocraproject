// Generated by andromda-jsf cartridge (view\table\table.component.impl.ts.vsl)
import { Component, Injector } from '@angular/core';
import { SearchFormActivationsFormActivationsComponent } from '@app/view/form/activation/search-form-activations-form-activations.component';
import * as FormActivationActions from '@app/store/form/activation/form-activation.actions';
import * as FormActivationSelectors from '@app/store/form/activation/form-activation.selectors';
import { FormActivationCriteria } from '@app/model/bw/org/bocra/portal/form/activation/form-activation-criteria';
import { Observable, map } from 'rxjs';
import { DataPage } from '@app/model/bw/org/bocra/portal/data-page';
import { select } from '@ngrx/store';
import { FormActivationVO } from '@app/model/bw/org/bocra/portal/form/activation/form-activation-vo';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'search-form-activations-form-activations',
  templateUrl: './search-form-activations-form-activations.component.html',
  styleUrls: ['./search-form-activations-form-activations.component.scss'],
})
export class SearchFormActivationsFormActivationsComponentImpl extends SearchFormActivationsFormActivationsComponent {

  criteria: FormActivationCriteria = new FormActivationCriteria();
  formActivationsPage$: Observable<DataPage>;

  constructor(private injector: Injector) {
    super(injector);
    this.formActivationsPage$ = this.store.pipe(select(FormActivationSelectors.selectFormActivationsPage));
  }

  override doSearchFormActivationsEdit(form: any): any {
    return form;
  }

  override ngAfterViewInit() {
    this.formActivationsPaginator.page.subscribe((paginator) => {
      this.store.dispatch(
        FormActivationActions.pagedSearch({
          pageNumber: paginator.pageIndex + 1,
          pageSize: paginator.pageSize,
          criteria: this.criteria,
          loading: true,
          loaderMessage: 'Searching access points ...',
        })
      );
    });

    this.formActivationsPage$
      .pipe(
        map((dataPage) => {
          if (dataPage == null) return [];
          this.totalElements = dataPage['totalElements'];
          return dataPage['elements'] as FormActivationVO[];
        })
      )
      .subscribe((pageData) => {
        
        this.formActivationsDataSource = new MatTableDataSource(pageData);
        this.formActivationsDataSource.sort = this.formActivationsSort;
      });
  }
}
