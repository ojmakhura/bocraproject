// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { AfterViewInit, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { FormActivationVO } from '@app/model/bw/org/bocra/portal/form/activation/form-activation-vo';
import * as FormActivationActions from '@app/store/form/activation/form-activation.actions';
import * as FormActivationSelectors from '@app/store/form/activation/form-activation.selectors';
import { FormActivationState } from '@app/store/form/activation/form-activation.state';
import { Store, select } from '@ngrx/store';
import { Observable } from 'rxjs';
import * as PeriodConfigActions from '@app/store/period/config/period-config.actions';
import * as PeriodConfigSelectors from '@app/store/period/config/period-config.selectors';
import { PeriodConfigVO } from '@app/model/bw/org/bocra/portal/period/config/period-config-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { DatePipe } from '@angular/common';
import { Router } from '@angular/router';

@Component({
  selector: 'app-bulk-activation',
  templateUrl: './bulk-activation.component.html',
  styleUrls: ['./bulk-activation.component.scss'],
})
export class BulkActivationComponent implements OnInit, AfterViewInit {
  bulkActivationForm: FormGroup = new FormGroup({});

  formActivations$: Observable<FormActivationVO[]>;

  periodConfigs$: Observable<PeriodConfigVO[]>;
  messages: Observable<any>;
  success: Observable<boolean>;
  loading: Observable<boolean | null>;
  loaderMessage: Observable<string | undefined>;
  error: Observable<boolean>;

  activationColumns = [
    'id',
    'licensee.licenseeName',
    'form.formName',
    'period.periodName',
    'submissionStatus',
    'actions',
  ];

  constructor(
    private formBuilder: FormBuilder,
    private store: Store<FormActivationState>,
    private datePipe: DatePipe,
    protected router: Router
  ) {
    this.formActivations$ = this.store.pipe(select(FormActivationSelectors.selectFormActivations));
    this.periodConfigs$ = this.store.pipe(select(PeriodConfigSelectors.selectPeriodConfigs));
    this.loading = this.store.pipe(select(FormActivationSelectors.selectLoading));
    this.loaderMessage = this.store.pipe(select(FormActivationSelectors.selectLoaderMessage));
    this.success = this.store.pipe(select(FormActivationSelectors.selectSuccess));
    this.error = this.store.pipe(select(FormActivationSelectors.selectError));
    this.messages = this.store.pipe(select(FormActivationSelectors.selectMessages));
  }

  ngAfterViewInit(): void {
    this.store.dispatch(
      PeriodConfigActions.getAll({
        loaderMessage: 'Loading Period Configs...',
        loading: true,
      })
    );
  }

  ngOnInit(): void {
    this.bulkActivationForm = this.formBuilder.group({
      periodDate: [this.datePipe.transform(new Date(), 'yyyy-MM-dd')],
      periodConfig: this.formBuilder.group({
        id: [],
        periodConfigName: [],
      }),
      sendEmail: [false],
      includeInactive: [false],
    });
  }

  moveToSearch() {}

  activate() {
    console.log(this.bulkActivationForm.value);
    this.store.dispatch(
      FormActivationActions.activateFor({
        activationDate: this.bulkActivationForm.value.periodDate,
        periodConfigId: this.bulkActivationForm.value.periodConfig.id,
        sendEmail: this.bulkActivationForm.value.sendEmail,
        includeInactive: this.bulkActivationForm.value.includeInactive,
        loaderMessage: 'Activating forms...',
        loading: true,
      })
    );
  }

  editActivation(formSubmission: FormSubmissionVO) {
    this.router.navigate(['/form/submission/edit-form-submission'], {queryParams: {id: formSubmission.id}});
  }
}
