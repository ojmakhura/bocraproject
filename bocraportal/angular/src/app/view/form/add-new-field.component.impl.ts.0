// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, Inject, Injector } from '@angular/core';
import { AddNewFieldComponent } from '@app/view/form/add-new-field.component';
import { AddNewFieldVarsForm } from '@app/view/form/add-new-field.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormSectionVO } from '@app/model/bw/org/bocra/portal/form/section/form-section-vo';
import { SelectItem } from '@app/utils/select-item';
import { FormControl, Validators } from '@angular/forms';

@Component({
  selector: 'app-add-new-field',
  templateUrl: './add-new-field.component.html',
  styleUrls: ['./add-new-field.component.scss']
})
export class AddNewFieldComponentImpl extends AddNewFieldComponent {

    formFieldOptionField: FormControl = new FormControl();

    constructor(private injector: Injector, @Inject(MAT_DIALOG_DATA) data: any) {
        super(injector);
        data?.formSections?.forEach((element: FormSectionVO) => {
            let item: SelectItem = new SelectItem();
            item.label = element.sectionName;
            item.value = element;

            this.formFieldSectionBackingList.push(item);
        });
        this.formFieldOptionField = new FormControl();
    }

    beforeOnInit(){
    }
	
    afterOnInit() {
    }

    doNgAfterViewInit() {
    }

    doNgOnDestroy(){}

    handleFormChanges(change: any) {
    }

    /**
     * This method may be overwritten
     */
    afterSetAddNewFieldVarsForm(form: AddNewFieldVarsForm): void {

    }

    addFormFieldOption(): void {
        if(this.formFieldOptionField.valid && !this.formFieldOptions.includes(this.formFieldOptionField.value)){
            this.formFieldOptionsControl.push(new FormControl(this.formFieldOptionField.value));
            let item: SelectItem = new SelectItem();
            item.label = this.formFieldOptionField.value;
            item.value = this.formFieldOptionField.value;
            this.formFieldOptionsBackingList.push(item);
            this.formFieldOptionField.patchValue("");
        }
    }

    handleCancelDialog(): void {

    }

    handleDialogDone(data: any): any {
        return data;
    }

    handleFormFieldFormAddDialog(): void {
    }

    handleFormFieldFormSearch(): void {
    }

    handleFormFieldFormSelected(event: MatRadioChange, data: FormVO): void {
    }
}