// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
    AfterViewInit, Component, Injector, OnDestroy, OnInit, ViewChild
} from '@angular/core';
import {
    FormArray,
    FormBuilder, FormControl, FormGroup, Validators
} from '@angular/forms';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSelectChange } from '@angular/material/select';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { ActivatedRoute, Router } from '@angular/router';
import * as FormActions from '@app/store/form/form.actions';
import * as FormSelectors from '@app/store/form/form.selectors';
import { FormState } from '@app/store/form/form.state';
import * as SectorFormActions from '@app/store/sector/form/sector-form.actions';
import * as SectorFormSelectors from '@app/store/sector/form/sector-form.selectors';
import { SelectItem } from '@app/utils/select-item';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { select, Store } from '@ngrx/store';
import { Observable } from 'rxjs';

import { FormControllerImpl } from '@app/controller/form/form-controller.impl';
import { FormFieldVO } from '@app/model/bw/org/bocra/portal/form/field/form-field-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { FormEntryType } from '@app/model/bw/org/bocra/portal/form/form-entry-type';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { FormSectionVO } from '@app/model/bw/org/bocra/portal/form/section/form-section-vo';
import { LicenceTypeFormVO } from '@app/model/bw/org/bocra/portal/licence/type/form/licence-type-form-vo';
import { LicenseeFormVO } from '@app/model/bw/org/bocra/portal/licensee/form/licensee-form-vo';
import { SectorFormVO } from '@app/model/bw/org/bocra/portal/sector/form/sector-form-vo';
import { SectorVO } from '@app/model/bw/org/bocra/portal/sector/sector-vo';
import { FormFieldRestController } from '@app/service/bw/org/bocra/portal/form/field/form-field-rest-controller';
import { FormRestController } from '@app/service/bw/org/bocra/portal/form/form-rest-controller';
import { FormSectionRestController } from '@app/service/bw/org/bocra/portal/form/section/form-section-rest-controller';
import { EditLicenseeComponentImpl } from '@app/view/form/edit-licensee.component.impl';
import { EditSectionComponentImpl } from '@app/view/form/edit-section.component.impl';

export class EditFormSaveForm {
    form: FormVO | any;
}

export class EditFormDeleteForm {
    form: FormVO | any;
}

export class EditFormSearchForm {
    forms: Array<FormVO>[] | any[];
    criteria: FormCriteria | any;
    id: number | any;
}

export class EditFormAddFieldForm {
    formField: FormFieldVO | any;
    formFieldForm: FormVO | any;
    form: FormVO | any;
}

export class EditFormAddSectionForm {
    formSection: FormSectionVO | any;
    formId: number | any;
    form: FormVO | any;
}

export class EditFormAddLicenseeForm {
    licenseeForm: LicenseeFormVO | any;
    formId: number | any;
    form: FormVO | any;
}

export class EditFormAddLicenceTypeForm {
    licenceType: LicenceTypeFormVO | any;
}
export class EditFormVarsForm {
    form: FormVO | any;
}

@Component({
  selector: 'app-edit-form-base',
  template: ''
})
export abstract class EditFormComponent implements OnInit, AfterViewInit, OnDestroy {

	editFormForm: FormGroup | any;
    hide: boolean = false;
    protected route: ActivatedRoute;
    protected router: Router;
    protected formBuilder: FormBuilder;
    protected _injector: Injector;
    protected useCaseScope: UseCaseScope;
    protected store: Store<FormState>;
    dialog: MatDialog;
    formController: FormControllerImpl;
    formSectionRestController: FormSectionRestController;
    formFieldRestController: FormFieldRestController;
    formRestController: FormRestController;
    formLicenceTypesColumns = [
        'id',
        'licenceType.code',
        'licenceType.name',
    ];

    formLicenceTypesModalColumns = [
        'actions',
        ...this.formLicenceTypesColumns
    ];

    @ViewChild('formLicenceTypesPaginator', {static: true}) formLicenceTypesPaginator: MatPaginator;
    @ViewChild('formLicenceTypesSort', {static: true}) formLicenceTypesSort: MatSort;

    @ViewChild('formLicenceTypesModalPaginator', {static: true}) formLicenceTypesModalPaginator: MatPaginator;
    @ViewChild('formLicenceTypesModalSort', {static: true}) formLicenceTypesModalSort: MatSort;

    formLicenceTypes$: Observable<LicenceTypeFormVO[]>;
    formLicenceTypesDataSource = new MatTableDataSource<LicenceTypeFormVO>([]);
    formLicenceTypesSearchField: FormControl;
    formLicenceTypesSelect: LicenceTypeFormVO[] = [];

    formFormSectionsColumns = [
        'id',
        'position',
        'sectionId',
        'sectionLabel',
    ];

    formFormSectionsModalColumns = [
        'actions',
        ...this.formFormSectionsColumns
    ];

    @ViewChild('formFormSectionsPaginator', {static: true}) formFormSectionsPaginator: MatPaginator;
    @ViewChild('formFormSectionsSort', {static: true}) formFormSectionsSort: MatSort;

    @ViewChild('formFormSectionsModalPaginator', {static: true}) formFormSectionsModalPaginator: MatPaginator;
    @ViewChild('formFormSectionsModalSort', {static: true}) formFormSectionsModalSort: MatSort;

    formFormSections$: Observable<FormSectionVO[]>;
    formFormSectionsDataSource = new MatTableDataSource<FormSectionVO>([]);
    formFormSectionsSearchField: FormControl;
    formFormSectionsSelect: FormSectionVO[] = [];

    formFormFieldsColumns = [
        'id',
        'formSection.sectionLabel',
        'fieldType',
        'fieldName',
    ];

    formFormFieldsModalColumns = [
        'actions',
        ...this.formFormFieldsColumns
    ];

    @ViewChild('formFormFieldsPaginator', {static: true}) formFormFieldsPaginator: MatPaginator;
    @ViewChild('formFormFieldsSort', {static: true}) formFormFieldsSort: MatSort;

    @ViewChild('formFormFieldsModalPaginator', {static: true}) formFormFieldsModalPaginator: MatPaginator;
    @ViewChild('formFormFieldsModalSort', {static: true}) formFormFieldsModalSort: MatSort;

    formFormFields$: Observable<FormFieldVO[]>;
    formFormFieldsDataSource = new MatTableDataSource<FormFieldVO>([]);
    formFormFieldsSearchField: FormControl;
    formFormFieldsSelect: FormFieldVO[] = [];

    formLicenseesColumns = [
        'id',
        'licensee.uin',
        'licensee.licenseeName',
        'licensee.status',
    ];

    formLicenseesModalColumns = [
        'actions',
        ...this.formLicenseesColumns
    ];

    @ViewChild('formLicenseesPaginator', {static: true}) formLicenseesPaginator: MatPaginator;
    @ViewChild('formLicenseesSort', {static: true}) formLicenseesSort: MatSort;

    @ViewChild('formLicenseesModalPaginator', {static: true}) formLicenseesModalPaginator: MatPaginator;
    @ViewChild('formLicenseesModalSort', {static: true}) formLicenseesModalSort: MatSort;

    formLicensees$: Observable<LicenseeFormVO[]>;
    formLicenseesDataSource = new MatTableDataSource<LicenseeFormVO>([]);
    formLicenseesSearchField: FormControl;
    formLicenseesSelect: LicenseeFormVO[] = [];

    formSectorsColumns = [
        'id',
        'sector.code',
        'sector.name',
    ];

    formSectorsModalColumns = [
        'actions',
        'id',
        'code',
        'name',
    ];

    @ViewChild('formSectorsPaginator', {static: true}) formSectorsPaginator: MatPaginator;
    @ViewChild('formSectorsSort', {static: true}) formSectorsSort: MatSort;

    @ViewChild('formSectorsModalPaginator', {static: true}) formSectorsModalPaginator: MatPaginator;
    @ViewChild('formSectorsModalSort', {static: true}) formSectorsModalSort: MatSort;

    formSectors$: Observable<SectorVO[]>;
    formSectorsDataSource = new MatTableDataSource<SectorVO>([]);
    sectorForm$: Observable<SectorFormVO>;
    formSectorsSearchField: FormControl;
    formSectorsSelect: SectorVO[] = [];

    entryTypeT = FormEntryType;
    entryTypeOptions: string[] = Object.keys(this.entryTypeT);
    formRolesBackingList: Array<SelectItem> = [];
    form$: Observable<FormVO>;
    messages: Observable<any>;
    success: Observable<boolean>;
    loading: Observable<boolean>;
    loaderMessage: Observable<string>;
    error: Observable<boolean>;
    selected: any = null;
    sectorRemoved$: Observable<boolean>;

    constructor(injector: Injector) {
        
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.formBuilder = injector.get(FormBuilder);
        this.useCaseScope = injector.get(UseCaseScope);
        this.store = injector.get(Store);
        this.dialog = injector.get(MatDialog);
        this.formController = injector.get(FormControllerImpl);
        this.formSectionRestController = injector.get(FormSectionRestController);
        this.formFieldRestController = injector.get(FormFieldRestController);
        this.formRestController = injector.get(FormRestController);
        this._injector = injector;
        this.form$ = this.store.pipe(select(FormSelectors.selectForm));
        this.loading = this.store.pipe(select(FormSelectors.selectLoading));
        this.loaderMessage = this.store.pipe(select(FormSelectors.selectLoaderMessage));
        this.success = this.store.pipe(select(FormSelectors.selectSuccess));
        this.error = this.store.pipe(select(FormSelectors.selectError));
        this.messages = this.store.pipe(select(FormSelectors.selectMessages));
        this.sectorForm$ = this.store.pipe(select(SectorFormSelectors.selectSectorForm));
        this.sectorRemoved$ = this.store.pipe(select(SectorFormSelectors.selectRemoved));
        this.formLicenceTypesSearchField = new FormControl();
        this.formFormSectionsSearchField = new FormControl();
        this.formFormFieldsSearchField = new FormControl();
        this.formLicenseesSearchField = new FormControl();
        this.formSectorsSearchField = new FormControl();
    }

    abstract beforeOnInit(form: EditFormVarsForm): EditFormVarsForm;
	
    ngOnInit() {
        let form: EditFormVarsForm = this.beforeOnInit(new EditFormVarsForm);
        this.editFormForm = this.newForm(form);

        this.editFormForm.valueChanges.subscribe(
            (change: any) => {
                this.handleFormChanges(change);
            }
        );

        this.formLicenceTypes$?.subscribe(data => {
            this.formLicenceTypesDataSource.data = data;
            this.formLicenceTypesDataSource.paginator = this.formLicenceTypesModalPaginator;
            this.formLicenceTypesDataSource.sort = this.formLicenceTypesModalSort;
        });

        this.formFormSections$?.subscribe(data => {
            this.formFormSectionsDataSource.data = data;
            this.formFormSectionsDataSource.paginator = this.formFormSectionsModalPaginator;
            this.formFormSectionsDataSource.sort = this.formFormSectionsModalSort;
        });

        this.formFormFields$?.subscribe(data => {
            this.formFormFieldsDataSource.data = data;
            this.formFormFieldsDataSource.paginator = this.formFormFieldsModalPaginator;
            this.formFormFieldsDataSource.sort = this.formFormFieldsModalSort;
        });

        this.formLicensees$?.subscribe(data => {
            this.formLicenseesDataSource.data = data;
            this.formLicenseesDataSource.paginator = this.formLicenseesModalPaginator;
            this.formLicenseesDataSource.sort = this.formLicenseesModalSort;
        });

        this.formSectors$?.subscribe(data => {
            this.formSectorsDataSource.data = data;
            this.formSectorsDataSource.paginator = this.formSectorsModalPaginator;
            this.formSectorsDataSource.sort = this.formSectorsModalSort;
        });
        
        this.afterOnInit();
    }

    handleFormChanges(change: any): void {
        
    }

    editFormFormReset() {

        this.store.dispatch(FormActions.formReset());
        this.editFormForm.reset()
        this.editFormForm.markAsPristine();

        if(this.router.url.substring(0, this.router.url.indexOf('?'))) {
            this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
        } else {
            this.router.navigate([this.router.url]);
        }
    }

    afterOnInit(): void {}
    
    doNgAfterViewInit(): void {}

    ngAfterViewInit() {
        this.doNgAfterViewInit();
        this.formController.resetUseCaseScope();

        this.sectorForm$.subscribe(sectorForm => {
            this.addToFormSectors(sectorForm);
        });
    }

    newForm(editFormVarsForm$: EditFormVarsForm): FormGroup {
        return this.formBuilder.group({
            form: this.createFormForm(editFormVarsForm$?.form),
        });
    }

    abstract doNgOnDestroy(): void;

    ngOnDestroy() { 
        this.doNgOnDestroy();
        this.store.dispatch(FormActions.formReset());
    }

    get editFormSaveForm(): EditFormSaveForm {

        let form: EditFormSaveForm = new EditFormSaveForm();
        form.form = this.form;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormSave(form: EditFormSaveForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditFormSave(form: EditFormSaveForm): void {}

    editFormSave(): void {
        let form: EditFormSaveForm = this.editFormSaveForm;
        this.beforeEditFormSave(form);

        this.formController.editFormSave(form);
        this.afterEditFormSave(form);
    }

    getEditFormSaveForm(value: any): EditFormSaveForm {
        
        let form: EditFormSaveForm = new EditFormSaveForm();

        if(value?.form) {
            form.form = value?.form;
        }

        return form;

    }

    get editFormDeleteForm(): EditFormDeleteForm {

        let form: EditFormDeleteForm = new EditFormDeleteForm();
        form.form = this.form;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormDelete(form: EditFormDeleteForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditFormDelete(form: EditFormDeleteForm): void {}

    editFormDelete(): void {
        let form: EditFormDeleteForm = this.editFormDeleteForm;
        this.beforeEditFormDelete(form);

        this.formController.editFormDelete(form);
        this.afterEditFormDelete(form);
    }

    getEditFormDeleteForm(value: any): EditFormDeleteForm {
        
        let form: EditFormDeleteForm = new EditFormDeleteForm();

        if(value?.form) {
            form.form = value?.form;
        }

        return form;

    }

    get editFormSearchForm(): EditFormSearchForm {

        let form: EditFormSearchForm = new EditFormSearchForm();

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormSearch(form: EditFormSearchForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditFormSearch(form: EditFormSearchForm): void {}

    editFormSearch(): void {
        let form: EditFormSearchForm = this.editFormSearchForm;
        this.beforeEditFormSearch(form);

        this.formController.editFormSearch(form);
        this.afterEditFormSearch(form);
    }

    getEditFormSearchForm(value: any): EditFormSearchForm {
        
        let form: EditFormSearchForm = new EditFormSearchForm();

        return form;

    }

    get editFormAddFieldForm(): EditFormAddFieldForm {

        let form: EditFormAddFieldForm = new EditFormAddFieldForm();
        form.form = this.form;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormAddField(form: EditFormAddFieldForm): void {}

    /**
     * This method may be overwritten
     */
    afterEditFormAddField(form: EditFormAddFieldForm): void {}

    editFormAddField(): void {
        let form: EditFormAddFieldForm = this.editFormAddFieldForm;
        this.beforeEditFormAddField(form);

        this.formController.editFormAddField(form);
        this.afterEditFormAddField(form);
    }

    getEditFormAddFieldForm(value: any): EditFormAddFieldForm {
        
        let form: EditFormAddFieldForm = new EditFormAddFieldForm();

        if(value?.form) {
            form.form = value?.form;
        }

        return form;

    }

    get editFormAddSectionForm(): EditFormAddSectionForm {

        let form: EditFormAddSectionForm = new EditFormAddSectionForm();
        form.form = this.form;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormAddSection(form: EditFormAddSectionForm): void {}

    /**
     * This method may be overwritten
     */
    getEditFormAddSectionFormDialogConfig(data: any): any{
        return {
            data: {
                formId: data?.formId,
                form: data?.form,
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    afterEditFormAddSection(form: EditFormAddSectionForm, dialogData: any): void {
        
    }

    editFormAddSection(): void {
        let form: EditFormAddSectionForm = this.editFormAddSectionForm;
        this.beforeEditFormAddSection(form);

        this.formController.editFormAddSection(form);
        let dialogConfig = this.getEditFormAddSectionFormDialogConfig(form);
        const dialogRef = this.dialog.open(EditSectionComponentImpl, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.afterEditFormAddSection(form, result?.dialogData);
        });
    }

    getEditFormAddSectionForm(value: any): EditFormAddSectionForm {
        
        let form: EditFormAddSectionForm = new EditFormAddSectionForm();

        if(value?.formId) {
            form.formId = value?.formId;
        }

        if(value?.form) {
            form.form = value?.form;
        }

        return form;

    }

    get editFormAddLicenseeForm(): EditFormAddLicenseeForm {

        let form: EditFormAddLicenseeForm = new EditFormAddLicenseeForm();
        form.form = this.form;

        return form;
    }

    /**
     * This method may be overwritten
     */
    beforeEditFormAddLicensee(form: EditFormAddLicenseeForm): void {}

    /**
     * This method may be overwritten
     */
    getEditFormAddLicenseeFormDialogConfig(data: any): any{
        return {
            data: {
                formId: data?.formId,
                form: data?.form,
                width: '800px'
            }
        };
    }

    /**
     * This method may be overwritten
     */
    afterEditFormAddLicensee(form: EditFormAddLicenseeForm, dialogData: any): void {
        
    }

    editFormAddLicensee(): void {
        let form: EditFormAddLicenseeForm = this.editFormAddLicenseeForm;
        this.beforeEditFormAddLicensee(form);

        this.formController.editFormAddLicensee(form);
        let dialogConfig = this.getEditFormAddLicenseeFormDialogConfig(form);
        const dialogRef = this.dialog.open(EditLicenseeComponentImpl, dialogConfig);

        dialogRef.afterClosed().subscribe((result) => {
            this.afterEditFormAddLicensee(form, result?.dialogData);
        });
    }

    getEditFormAddLicenseeForm(value: any): EditFormAddLicenseeForm {
        
        let form: EditFormAddLicenseeForm = new EditFormAddLicenseeForm();

        if(value?.formId) {
            form.formId = value?.formId;
        }

        if(value?.form) {
            form.form = value?.form;
        }

        return form;

    }

    get editFormVarsFormControl(): FormGroup {
        return this.getGroupControl('editFormVarsForm');
    }

    /**
     * This method may be overwritten
     */
    afterSetEditFormVarsForm(form: EditFormVarsForm): void {}

    setEditFormVarsForm(form: EditFormVarsForm) {

        this.editFormVarsFormControl.setControl('form', this.createFormForm(form.form));

        this.afterSetEditFormVarsForm(form);
    }

    createFormForm(form: FormVO): FormGroup {
        return this.formBuilder.group({
            id: [{value: form?.id, disabled: false}],
            createdBy: [{value: form?.createdBy, disabled: false}],
            updatedBy: [{value: form?.updatedBy, disabled: false}],
            createdDate: [{value: form?.createdDate, disabled: false}],
            updatedDate: [{value: form?.updatedDate, disabled: false}],
            code: [{value: form?.code, disabled: false}, [Validators.required, Validators.minLength(3), Validators.maxLength(10), ]],
            formName: [{value: form?.formName, disabled: false}, [Validators.required, ]],
            description: [{value: form?.description, disabled: false}],
            entryType: [{value: form?.entryType, disabled: false}, [Validators.required, ]],
            roles: this.formBuilder.array(form?.roles ? form.roles : []),
            licenceTypes: this.createLicenceTypeFormVOArray(form?.licenceTypes),
            formSections: this.createFormSectionVOArray(form?.formSections),
            formFields: this.createFormFieldVOArray(form?.formFields),
            licensees: this.createLicenseeFormVOArray(form?.licensees),
            sectors: this.createSectorFormVOArray(form?.sectors),
        });
    }

    get formControl(): FormGroup {
        return this.getGroupControl('form') as FormGroup;
    }

    get form(): FormVO {
        return this.formControl.value;
    }

    get formIdControl(): FormControl {
        return this.formControl.get('id') as FormControl;
    }

    get formId(): number {
        return this.formIdControl.value;
    }

    get formCreatedByControl(): FormControl {
        return this.formControl.get('createdBy') as FormControl;
    }

    get formCreatedBy(): string {
        return this.formCreatedByControl.value;
    }

    get formUpdatedByControl(): FormControl {
        return this.formControl.get('updatedBy') as FormControl;
    }

    get formUpdatedBy(): string {
        return this.formUpdatedByControl.value;
    }

    get formCreatedDateControl(): FormControl {
        return this.formControl.get('createdDate') as FormControl;
    }

    get formCreatedDate(): Date {
        return this.formCreatedDateControl.value;
    }

    get formUpdatedDateControl(): FormControl {
        return this.formControl.get('updatedDate') as FormControl;
    }

    get formUpdatedDate(): Date {
        return this.formUpdatedDateControl.value;
    }

    get formCodeControl(): FormControl {
        return this.formControl.get('code') as FormControl;
    }

    get formCode(): string {
        return this.formCodeControl.value;
    }

    get formFormNameControl(): FormControl {
        return this.formControl.get('formName') as FormControl;
    }

    get formFormName(): string {
        return this.formFormNameControl.value;
    }

    get formDescriptionControl(): FormControl {
        return this.formControl.get('description') as FormControl;
    }

    get formDescription(): string {
        return this.formDescriptionControl.value;
    }

    get formEntryTypeControl(): FormGroup {
        return this.formControl.get('entryType') as FormGroup;
    }

    get formEntryType(): FormEntryType {
        return this.formEntryTypeControl.value;
    }

    get formRolesControl(): FormArray {
        return this.formControl.get('roles') as FormArray;
    }

    get formRoles(): string[] {
        return this.formRolesControl.value;
    }

    /**
     * Add the selected item to the list only if it already exist.
     * Make sure to reset the selection.
     * @param $event
     */
    onFormRolesChange($event: MatSelectChange) {
        if(!this.formRoles.includes($event.value)){
            this.formRolesControl.push(new FormControl($event.value));
        }
        $event.source.value='';
    }

    /**
     * Retrieve the label to be displayes
     * @param value 
     * @returns 
     */
    getFormRolesLabel(value: string): string | undefined {
        return this.formRolesBackingList.find(item => item.value === value)?.label;
    }

    /**
     * Delete an item from the list
     * @param index 
     */
    formRolesDelete(index: number) {
        this.formRolesControl.removeAt(index);
    }

    get formLicenceTypesControl(): FormArray {
        return this.formControl.get('licenceTypes') as FormArray;
    }

    get formLicenceTypes(): LicenceTypeFormVO[] {
        return this.formLicenceTypesControl.value;
    }


    formLicenceTypesAddDialog(): void {
    }

    
    formLicenceTypesSearch(): void {
    }

    handleDeleteFromFormLicenceTypes(licenceTypes: LicenceTypeFormVO): void {}
    
    deleteFromFormLicenceTypes(index: number) {
        this.handleDeleteFromFormLicenceTypes(this.formLicenceTypes[index]);
        this.formLicenceTypesControl.removeAt(index);
    }

    doEditFormLicenceTypes(licenceTypes: LicenceTypeFormVO) {
    }

    handleFormLicenceTypesSelected(event: MatCheckboxChange, data: LicenceTypeFormVO): void {}
    
    formLicenceTypesSelected(event: MatCheckboxChange, data: LicenceTypeFormVO): void {
        if(event.checked) {
            this.formLicenceTypesSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.formLicenceTypesSelect.filter(d => d[key] !== data[key]);
            this.formLicenceTypesSelect = tmp;
        }

        this.handleFormLicenceTypesSelected(event, data);
    }

    addToFormLicenceTypes(data: LicenceTypeFormVO) {
        this.formLicenceTypesControl.push(this.createLicenceTypeFormVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFormLicenceTypes(): void {
        this.formLicenceTypesSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.formLicenceTypes.find((d: LicenceTypeFormVO) => d[key] === data[key])
            if(!found) {
                this.addToFormLicenceTypes(data);
            }
        });
    }

    get formFormSectionsControl(): FormArray {
        return this.formControl.get('formSections') as FormArray;
    }

    get formFormSections(): FormSectionVO[] {
        return this.formFormSectionsControl.value;
    }


    formFormSectionsAddDialog(): void {
    }

    
    formFormSectionsSearch(): void {
    }

    handleDeleteFromFormFormSections(formSections: FormSectionVO): void {}
    
    deleteFromFormFormSections(index: number) {
        this.handleDeleteFromFormFormSections(this.formFormSections[index]);
        this.formFormSectionsControl.removeAt(index);
    }

    doEditFormFormSections(formSections: FormSectionVO) {
    }

    handleFormFormSectionsSelected(event: MatCheckboxChange, data: FormSectionVO): void {}
    
    formFormSectionsSelected(event: MatCheckboxChange, data: FormSectionVO): void {
        if(event.checked) {
            this.formFormSectionsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.formFormSectionsSelect.filter(d => d[key] !== data[key]);
            this.formFormSectionsSelect = tmp;
        }

        this.handleFormFormSectionsSelected(event, data);
    }

    addToFormFormSections(data: FormSectionVO) {
        this.formFormSectionsControl.push(this.createFormSectionVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFormFormSections(): void {
        this.formFormSectionsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.formFormSections.find((d: FormSectionVO) => d[key] === data[key])
            if(!found) {
                this.addToFormFormSections(data);
            }
        });
    }

    get formFormFieldsControl(): FormArray {
        return this.formControl.get('formFields') as FormArray;
    }

    get formFormFields(): FormFieldVO[] {
        return this.formFormFieldsControl.value;
    }


    formFormFieldsAddDialog(): void {
    }

    
    formFormFieldsSearch(): void {
    }

    handleDeleteFromFormFormFields(formFields: FormFieldVO): void {}
    
    deleteFromFormFormFields(index: number) {
        this.handleDeleteFromFormFormFields(this.formFormFields[index]);
        this.formFormFieldsControl.removeAt(index);
    }

    doEditFormFormFields(formFields: FormFieldVO) {
    }

    handleFormFormFieldsSelected(event: MatCheckboxChange, data: FormFieldVO): void {}
    
    formFormFieldsSelected(event: MatCheckboxChange, data: FormFieldVO): void {
        if(event.checked) {
            this.formFormFieldsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.formFormFieldsSelect.filter(d => d[key] !== data[key]);
            this.formFormFieldsSelect = tmp;
        }

        this.handleFormFormFieldsSelected(event, data);
    }

    addToFormFormFields(data: FormFieldVO) {
        this.formFormFieldsControl.push(this.createFormFieldVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFormFormFields(): void {
        this.formFormFieldsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.formFormFields.find((d: FormFieldVO) => d[key] === data[key])
            if(!found) {
                this.addToFormFormFields(data);
            }
        });
    }

    get formLicenseesControl(): FormArray {
        return this.formControl.get('licensees') as FormArray;
    }

    get formLicensees(): LicenseeFormVO[] {
        return this.formLicenseesControl.value;
    }


    formLicenseesAddDialog(): void {
    }

    
    formLicenseesSearch(): void {
    }

    handleDeleteFromFormLicensees(licensees: LicenseeFormVO): void {}
    
    deleteFromFormLicensees(index: number) {
        this.handleDeleteFromFormLicensees(this.formLicensees[index]);
        this.formLicenseesControl.removeAt(index);
    }

    doEditFormLicensees(licensees: LicenseeFormVO) {
    }

    handleFormLicenseesSelected(event: MatCheckboxChange, data: LicenseeFormVO): void {}
    
    formLicenseesSelected(event: MatCheckboxChange, data: LicenseeFormVO): void {
        if(event.checked) {
            this.formLicenseesSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.formLicenseesSelect.filter(d => d[key] !== data[key]);
            this.formLicenseesSelect = tmp;
        }

        this.handleFormLicenseesSelected(event, data);
    }

    addToFormLicensees(data: LicenseeFormVO) {
        this.formLicenseesControl.push(this.createLicenseeFormVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFormLicensees(): void {
        this.formLicenseesSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.formLicensees.find((d: LicenseeFormVO) => d[key] === data[key])
            if(!found) {
                this.addToFormLicensees(data);
            }
        });
    }

    get formSectorsControl(): FormArray {
        return this.formControl.get('sectors') as FormArray;
    }

    get formSectors(): SectorFormVO[] {
        return this.formSectorsControl.value;
    }


    formSectorsAddDialog(): void {
    }

    
    formSectorsSearch(): void {
    }

    handleDeleteFromFormSectors(sectors: SectorFormVO): void {}
    
    deleteFromFormSectors(index: number) {
        if(confirm('Are you sure you want to remove the sector this form?')) {
            this.store.dispatch(
                SectorFormActions.remove({
                    id: this.formSectors[index].id,
                    loading: true,
                    loaderMessage: 'Removing sector from forms ...'
                })
            );

            this.sectorRemoved$.subscribe(removed => {
                if(removed) {
                    this.handleDeleteFromFormSectors(this.formSectors[index]);
                    this.formSectorsControl.removeAt(index);

                }
            });
        }
    }

    doEditFormSectors(sectors: SectorFormVO) {
    }

    handleFormSectorsSelected(event: MatCheckboxChange, data: SectorVO): void {}
    
    formSectorsSelected(event: MatCheckboxChange, data: SectorVO): void {
        if(event.checked) {
            this.formSectorsSelect.push(data);
        } else {
            const key = Object.keys(data)[0];
            let tmp = this.formSectorsSelect.filter(d => d[key] !== data[key]);
            this.formSectorsSelect = tmp;
        }

        this.handleFormSectorsSelected(event, data);
    }

    addToFormSectors(data: SectorFormVO) {
        this.formSectorsControl.push(this.createSectorFormVOGroup(data));
    }

    /**
     * May be overridden to customise behaviour
     *
     */
    addSelectedFormSectors(): void {
        this.formSectorsSelect.forEach((data) => {
            const key = Object.keys(data)[0];
            const found = this.formSectors.find((d: SectorFormVO) => d.sector.id === data.id);
            if(!found) {
                this.store.dispatch(
                    SectorFormActions.create({
                        formId: this.formId,
                        sectorId: data.id,
                        loading: true,
                        loaderMessage: 'Adding sector to form ...'
                    })
                );
            }
        });
    }

    getItemControl(name: string): FormControl {
        return this.editFormForm.get(name) as FormControl;
    }

    getGroupControl(name: string): FormGroup {
        return this.editFormForm.get(name) as FormGroup;
    }

    getArrayControl(name: string): FormArray {
        return this.editFormForm.get(name) as FormArray;
    }

    setEditFormFormValue(form: any) {
        if(form.form) {
            this.editFormForm.setControl('form', this.createFormForm(form.form));
        }
    }

    createLicenseeFormVOGroup(value: LicenseeFormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
        });
    }

    createLicenseeFormVOArray(values: LicenseeFormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenseeFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormVOGroup(value: FormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            code: [value?.code],
            formName: [value?.formName],
            description: [value?.description],
            entryType: [value?.entryType],
        });
    }

    createFormVOArray(values: FormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createSectorFormVOGroup(value: SectorFormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
        });
    }

    createSectorFormVOArray(values: SectorFormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createSectorFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormFieldVOGroup(value: FormFieldVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            fieldType: [value?.fieldType],
            fieldId: [value?.fieldId],
            fieldName: [value?.fieldName],
            description: [value?.description],
            fieldValueType: [value?.fieldValueType],
            expression: [value?.expression],
            defaultValue: [value?.defaultValue],
            required: [value?.required],
            min: [value?.min],
            max: [value?.max],
            minLength: [value?.minLength],
            maxLength: [value?.maxLength],
        });
    }

    createFormFieldVOArray(values: FormFieldVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormFieldVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createLicenceTypeFormVOGroup(value: LicenceTypeFormVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
        });
    }

    createLicenceTypeFormVOArray(values: LicenceTypeFormVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createLicenceTypeFormVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormCriteriaGroup(value: FormCriteria): FormGroup {
        return this.formBuilder.group({
            code: [value?.code],
            formName: [value?.formName],
        });
    }

    createFormCriteriaArray(values: FormCriteria[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormCriteriaGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

    createFormSectionVOGroup(value: FormSectionVO): FormGroup {
        return this.formBuilder.group({
            id: [value?.id],
            createdBy: [value?.createdBy],
            updatedBy: [value?.updatedBy],
            createdDate: [value?.createdDate],
            updatedDate: [value?.updatedDate],
            position: [value?.position],
            sectionId: [value?.sectionId],
            sectionLabel: [value?.sectionLabel],
        });
    }

    createFormSectionVOArray(values: FormSectionVO[]): FormArray {
        if(values) {
            let formArray: FormArray = this.formBuilder.array([]);
            values?.forEach(value => formArray.push(this.createFormSectionVOGroup(value)))

            return formArray;
        } else {
            return new FormArray([]);
        }
    }

}
