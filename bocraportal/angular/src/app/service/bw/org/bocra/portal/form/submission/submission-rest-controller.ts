// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { SubmissionSummary } from '@app/model/bw/org/bocra/portal/form/submission/submission-summary';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { FormSubmissionCriteria } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-criteria';
import { FormSubmissionStatus } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-status';
import { HttpClient } from '@angular/common/http';
import { KeycloakService } from 'keycloak-angular';

@Injectable({
  providedIn: 'root'
})
export class SubmissionRestController {
    
    protected path = '/form/submission';

    constructor(private http: HttpClient, private keycloakService: KeycloakService) {
    }

    public addDataField(dataField: DataFieldVO | any ): Observable<DataFieldVO | any> {
        return this.http.post<DataFieldVO | any>(`${this.path}/field`, dataField);
    }

    public addDataFields(dataFields: DataFieldVO | any ): Observable<DataFieldVO[] | any[]> {
        return this.http.post<DataFieldVO[] | any[]>(`${this.path}/fields`, dataFields);
    }

    public deleteDataField(id: number | any ): Observable<Boolean | any> {
        return this.http.delete<Boolean | any>(`${this.path}/field?id=${id}`, {});
    }

    public findById(id: number | any ): Observable<FormSubmissionVO | any> {
        return this.http.get<FormSubmissionVO | any>(`${this.path}/${id}`, {});
    }

    public findByIds(ids: Set<number> | any ): Observable<FormSubmissionVO[] | any[]> {
        if(ids)
            return this.http.get<FormSubmissionVO[] | any[]>(`${this.path}/ids?ids=${ids}`, {});
        else 
            return of([]);
    }

    public getAll(): Observable<FormSubmissionVO[] | any[]> {
        return this.http.get<FormSubmissionVO[] | any[]>(`${this.path}/all`);
    }

    public getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<FormSubmissionVO[] | any[]> {
        return this.http.get<FormSubmissionVO[] | any[]>(`${this.path}/page/${pageNumber}/size/${pageSize}`, {});
    }

    public getSubmissionSummary(): Observable<SubmissionSummary | any> {
        let criteria: FormSubmissionCriteria = new FormSubmissionCriteria();
        criteria.submittedBy = this.keycloakService.getUsername();
        return this.http.post<SubmissionSummary | any>(`${this.path}/summary`, criteria);
    }

    public remove(id: number | any ): Observable<boolean | any> {
        return this.http.delete<boolean | any>(`${this.path}/${id}`, {});
    }

    public save(formSubmissionVO: FormSubmissionVO | any ): Observable<FormSubmissionVO | any> {
        return this.http.post<FormSubmissionVO | any>(`${this.path}`, formSubmissionVO);
    }

    public search(criteria: FormSubmissionCriteria | any ): Observable<FormSubmissionVO[] | any[]> {
        return this.http.post<FormSubmissionVO[] | any[]>(`${this.path}/search`, criteria);
    }

    public updateSubmissionStatus(id: number | any , submissionStatus: FormSubmissionStatus | any, updateTime: Date, username: string | any ): Observable<Boolean | any> {
        return this.http.get<Boolean | any>(`${this.path}/update?id=${id}&submissionStatus=${submissionStatus}&updateTime=${updateTime}&username=${username}`, {});
    }

}
