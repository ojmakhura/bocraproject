// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root',
})
export class FormRestController {
  protected path = '/form';

  constructor(private http: HttpClient) {}

  public findById(id: number | any): Observable<FormVO | any> {
    return this.http.get<FormVO | any>(`${this.path}/${id}`, {});
  }

  public getAll(): Observable<FormVO[] | any[]> {
    return this.http.get<FormVO[] | any[]>(`${this.path}/all`);
  }

  public getAllPaged(pageNumber: number | any, pageSize: number | any): Observable<FormVO[] | any[]> {
    return this.http.get<FormVO[] | any[]>(`${this.path}/page/${pageNumber}/size/${pageSize}`, {});
  }

  public getFormsByPeriods(periodConfigIds: Set<number> | any): Observable<FormVO[] | any[]> {
    return this.http.get<FormVO[] | any[]>(`${this.path}/prc?periodConfigIds=` + periodConfigIds, {});
  }

  public remove(id: number | any): Observable<boolean | any> {
    return this.http.delete<boolean | any>(`${this.path}/${id}`, {});
  }

  public save(formVO: FormVO | any): Observable<FormVO | any> {
    return this.http.post<FormVO | any>(`${this.path}`, formVO);
  }

  public search(criteria: FormCriteria | any): Observable<FormVO[] | any[]> {
    return this.http.post<FormVO[] | any[]>(`${this.path}/search`, criteria ? criteria : {});
  }
}
