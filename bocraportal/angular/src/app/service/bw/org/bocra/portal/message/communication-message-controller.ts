// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { CommunicationMessageVO } from '@app/model/bw/org/bocra/portal/message/communication-message-vo';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root',
})
export class CommunicationMessageController {
  protected path = '/message';

  constructor(private http: HttpClient) {}

  public clearFailedMessages(): Observable<number | any> {
    return this.http.get<number | any>(`${this.path}/clear/failed`);
  }

  public clearSentMessages(): Observable<number | any> {
    return this.http.get<number | any>(`${this.path}/clear/sent`);
  }

  public findById(id: number | any): Observable<CommunicationMessageVO | any> {
    return this.http.get<CommunicationMessageVO | any>(`${this.path}/id/${id}`, {});
  }

  public getAll(): Observable<CommunicationMessageVO[] | any[]> {
    return this.http.get<CommunicationMessageVO[] | any[]>(`${this.path}/all`);
  }

  public getAllPaged(pageNumber: number | any, pageSize: number | any): Observable<CommunicationMessageVO[] | any[]> {
    return this.http.get<CommunicationMessageVO[] | any[]>(`${this.path}/page/${pageNumber}/size/${pageSize}`, {});
  }

  public loadTodayMessages(): Observable<CommunicationMessageVO[] | any[]> {
    return this.http.get<CommunicationMessageVO[] | any[]>(`${this.path}/today`);
  }

  public pagedSearch(
    pageNumber: number | any,
    pageSize: number | any,
    criteria: string | any
  ): Observable<CommunicationMessageVO[] | any[]> {
    return this.http.get<CommunicationMessageVO[] | any[]>(
      `${this.path}/search?pageNumber=${pageNumber}&pageSize=${pageSize}&criteria=${criteria || ' '}`,
      {}
    );
  }

  public remove(id: number | any): Observable<boolean | any> {
    return this.http.delete<boolean | any>(`${this.path}/id/${id}`, {});
  }

  public save(communicationMessage: CommunicationMessageVO | any): Observable<CommunicationMessageVO | any> {
    return this.http.post<CommunicationMessageVO | any>(`${this.path}`, communicationMessage);
  }

  public search(criteria: string | any): Observable<CommunicationMessageVO[] | any[]> {
    return this.http.post<CommunicationMessageVO[] | any[]>(`${this.path}/search?criteria=${criteria || ' '}`, {});
  }
}
