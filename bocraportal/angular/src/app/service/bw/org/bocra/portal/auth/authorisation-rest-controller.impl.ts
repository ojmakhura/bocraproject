// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthorisationRestController } from '@app/service/bw/org/bocra/portal/auth/authorisation-rest-controller';
import { AuthorisationCriteria } from '@app/model/bw/org/bocra/portal/auth/authorisation-criteria';
import { AuthorisationVO } from '@app/model/bw/org/bocra/portal/auth/authorisation-vo';

@Injectable()
export class AuthorisationRestControllerImpl extends AuthorisationRestController {

    constructor(private injector: Injector) {
        super(injector);
    }

    public override assignMenuSection(authorisationId: number | any , menuSectionId: number | any ): Observable<AuthorisationVO | any> {

        return this.http.get<AuthorisationVO | any>(this.path + `/${authorisationId}/${menuSectionId}`);

    }

    public override findById(id: number | any ): Observable<AuthorisationVO | any> {

        return this.http.get<AuthorisationVO | any>(this.path + `/id/${id}`);

    }

    public getAccessTypeCodeAuthorisations(roles: any, accessPointTypeCode: any): Observable<any[] | AuthorisationVO[]> {
        return this.http.get<AuthorisationVO[] | any>(this.path + `/authorised?roles=${roles}&accessPointTypeCodes=${accessPointTypeCode}`);
    }

    public override getAll(): Observable<AuthorisationVO[] | any[]> {

        return this.http.get<AuthorisationVO[] | any[]>(this.path + `/all`);

    }

    public override getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<AuthorisationVO[] | any[]> {

        return this.http.get<AuthorisationVO[] | any[]>(this.path + `/page/${pageNumber}/size/${pageSize}`);

    }

    public override remove(id: number | any ): Observable<boolean | any> {

        return this.http.delete<boolean | any>(this.path + `/id/${id}`);
    }

    public override save(authorisation: AuthorisationVO | any ): Observable<AuthorisationVO | any> {

        return this.http.post<AuthorisationVO | any>(this.path, authorisation);
    }

    public override search(criteria: AuthorisationCriteria | any ): Observable<AuthorisationVO[] | any[]> {

        return this.http.post<AuthorisationVO[] | any[]>(this.path + `/search`, criteria);
    }

}