// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthorisationRestController } from '@app/service/bw/org/bocra/portal/auth/authorisation-rest-controller';
import { AuthorisationVO } from '@app/model/bw/org/bocra/portal/auth/authorisation-vo';
import { AuthorisationCriteria } from '@app/model/bw/org/bocra/portal/auth/authorisation-criteria';

@Injectable()
export class AuthorisationRestControllerImpl extends AuthorisationRestController {
  
  constructor(private injector: Injector) {
    super(injector);
  }

  public findById(id: number | any): Observable<AuthorisationVO | any> {
    return this.http.get<AuthorisationVO | any>(this.path + `/id/${id}`);
  }

  public getAll(): Observable<AuthorisationVO[] | any> {
    return this.http.get<AuthorisationVO[] | any>(this.path + `/all`);
  }

  public getAllPaged(pageNumber: number | any, pageSize: number | any): Observable<AuthorisationVO[] | any> {
    return this.http.get<AuthorisationVO[] | any>(this.path + `/all/pageNumber/${pageNumber}/pageSize/${pageSize}`);
  }

  public remove(id: number | any): Observable<boolean | any> {
    return this.http.delete<boolean | any>(this.path + `/id/${id}`);
  }

  public save(authorisation: AuthorisationVO | any): Observable<AuthorisationVO | any> {
    return this.http.post<AuthorisationVO | any>(this.path, authorisation);
  }

  public search(criteria: AuthorisationCriteria | any): Observable<AuthorisationVO[] | any> {
    return this.http.post<AuthorisationVO[] | any>(this.path + `/search`, criteria);
  }

  public getAccessTypeCodeAuthorisations(roles: any, accessPointTypeCode: any): Observable<any[] | AuthorisationVO[]> {
    return this.http.get<AuthorisationVO[] | any>(this.path + `/authorised?roles=${roles}&accessPointTypeCodes=${accessPointTypeCode}`);
  }
}
