// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as MenuSectionActions from './menu-section.actions';
import { MenuSectionRestControllerImpl } from '@app/service/bw/org/bocra/portal/menu/menu-section-rest-controller.impl';

@Injectable()
export class MenuSectionEffects {
  constructor(private actions$: Actions, private menuSectionRestController: MenuSectionRestControllerImpl) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.findById),
      mergeMap(({ id }) =>
        this.menuSectionRestController.findById(id).pipe(
          map((menuSection) =>
            MenuSectionActions.findByIdSuccess({ menuSection, messages: [`Menu Section ${menuSection.displayName} found.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  save$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.save),
      mergeMap(({ menuSection }) =>
        this.menuSectionRestController.save(menuSection).pipe(
          map((menuSection) =>
            MenuSectionActions.saveSuccess({ menuSection, messages: [`Menu Section ${menuSection.displayName} saved.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.remove),
      mergeMap(({ id }) =>
        this.menuSectionRestController.remove(id).pipe(
          map((removed) =>
            MenuSectionActions.removeSuccess({ removed, messages: [`Action successful.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.getAll),
      mergeMap(({}) =>
        this.menuSectionRestController.getAll().pipe(
          map((menuSections) =>
            MenuSectionActions.getAllSuccess({ menuSections, messages: [`Action successful.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  search$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.search),
      mergeMap(({ criteria }) =>
        this.menuSectionRestController.search(criteria).pipe(
          map((menuSections) =>
            MenuSectionActions.searchSuccess({ menuSections, messages: [`Action successful.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  getAllPaged$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.getAllPaged),
      mergeMap(({ pageNumber, pageSize }) =>
        this.menuSectionRestController.getAllPaged(pageNumber, pageSize).pipe(
          map((menuSections) =>
            MenuSectionActions.getAllPagedSuccess({ menuSections, messages: [`Action successful.`], success: true })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );

  findByAuthorisationRoles$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MenuSectionActions.findByAuthorisationRoles),
      mergeMap(({ roles }) =>
        this.menuSectionRestController.findByAuthorisationRoles(roles).pipe(
          map((menuSections) =>
            MenuSectionActions.findByAuthorisationRolesSuccess({
              menuSections,
              messages: [`Action successful.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            MenuSectionActions.menuSectionFailure({ messages: [error?.error ? error?.error : error] }),
          ])
        )
      )
    )
  );
}
