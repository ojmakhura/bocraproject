// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { MenuSectionVO } from '@app/model/bw/org/bocra/portal/menu/menu-section-vo';

export enum MenuSectionActionType {
    FIND_BY_ID = '[MenuSection] Find By Id',
    FIND_BY_ID_SUCCESS = '[MenuSection] Find By Id Success',
    SAVE = '[MenuSection] Save',
    SAVE_SUCCESS = '[MenuSection] Save Success',
    ADD_MENU_SECTION = '[MenuSection] Add Menu Section Success',
    REMOVE = '[MenuSection] Remove',
    REMOVE_SUCCESS = '[MenuSection] Remove Success',
    GET_ALL = '[MenuSection] Get All',
    GET_ALL_SUCCESS = '[MenuSection] Get All Success',
    SEARCH = '[MenuSection] Search',
    SEARCH_SUCCESS = '[MenuSection] Search Success',
    GET_ALL_PAGED = '[MenuSection] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[MenuSection] Get All Paged Success',
    FIND_BY_AUTHORISATION_ROLES = '[MenuSection] Find By Authorisation Roles',
    FIND_BY_AUTHORISATION_ROLES_SUCCESS = '[MenuSection] Find By Authorisation Roles Success',
    MENU_SECTION_RESET = '[MenuSection] MenuSection Reset',
    MENU_SECTION_FAILURE = '[MenuSection] MenuSection Action Failure',
    MENU_SECTION_LOADING = '[MenuSection] MenuSection Loading'
}

export const findById = createAction(
    MenuSectionActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

export const findByIdSuccess = createAction(
    MenuSectionActionType.FIND_BY_ID_SUCCESS,
    props<{ menuSection: MenuSectionVO | any, messages: any[], success: boolean}>()
);

export const save = createAction(
    MenuSectionActionType.SAVE,
    props<{ menuSection: MenuSectionVO | any , loading: boolean }>()
);

export const saveSuccess = createAction(
    MenuSectionActionType.SAVE_SUCCESS,
    props<{ menuSection: MenuSectionVO | any, messages: any[], success: boolean}>()
);

export const addMenuSection = createAction(
    MenuSectionActionType.ADD_MENU_SECTION,
    props<{ menuSection: MenuSectionVO }>()
);

export const remove = createAction(
    MenuSectionActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

export const removeSuccess = createAction(
    MenuSectionActionType.REMOVE_SUCCESS,
    props<{ removed: boolean | any, messages: any[], success: boolean}>()
);

export const getAll = createAction(
    MenuSectionActionType.GET_ALL,
    props<{  loading: boolean }>()
);

export const getAllSuccess = createAction(
    MenuSectionActionType.GET_ALL_SUCCESS,
    props<{ menuSections: MenuSectionVO[] | any[], messages: any[], success: boolean}>()
);

export const search = createAction(
    MenuSectionActionType.SEARCH,
    props<{ criteria: string | any , loading: boolean }>()
);

export const searchSuccess = createAction(
    MenuSectionActionType.SEARCH_SUCCESS,
    props<{ menuSections: MenuSectionVO[] | any[], messages: any[], success: boolean}>()
);

export const getAllPaged = createAction(
    MenuSectionActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean }>()
);

export const getAllPagedSuccess = createAction(
    MenuSectionActionType.GET_ALL_PAGED_SUCCESS,
    props<{ menuSections: MenuSectionVO[] | any[], messages: any[], success: boolean}>()
);

export const findByAuthorisationRoles = createAction(
    MenuSectionActionType.FIND_BY_AUTHORISATION_ROLES,
    props<{ roles: Set<string> | any , loading: boolean }>()
);

export const findByAuthorisationRolesSuccess = createAction(
    MenuSectionActionType.FIND_BY_AUTHORISATION_ROLES_SUCCESS,
    props<{ menuSections: MenuSectionVO[] | any[], messages: any[], success: boolean}>()
);


export const menuSectionReset = createAction(MenuSectionActionType.MENU_SECTION_RESET);

export const menuSectionLoading = createAction(
    MenuSectionActionType.MENU_SECTION_LOADING,
    props<{ loading: boolean, success: boolean, messages: any[] }>()
);

export const menuSectionFailure = createAction(
    MenuSectionActionType.MENU_SECTION_FAILURE,
    props<{ messages: any[] }>()
);
