// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenseTypeActions from './license-type.action';
import { LicenseTypeRestControllerImpl } from '@app/service/bw/org/bocra/portal/type/license-type-rest-controller.impl';

@Injectable()
export class LicenseTypeEffects {

    constructor(private actions$: Actions, private licenseTypeRestController: LicenseTypeRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.findById),
            mergeMap(({ id }) => this.licenseTypeRestController.findById(id).pipe(
                map( results => LicenseTypeActions.findByIdSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.save),
            mergeMap(({ licenseTypeVO }) => this.licenseTypeRestController.save(licenseTypeVO).pipe(
                map( results => LicenseTypeActions.saveSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.remove),
            mergeMap(({ id }) => this.licenseTypeRestController.remove(id).pipe(
                map( results => LicenseTypeActions.removeSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.getAll),
            mergeMap(() => this.licenseTypeRestController.getAll().pipe(
                map( results => LicenseTypeActions.getAllSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.search),
            mergeMap(({ searchCriteria }) => this.licenseTypeRestController.search(searchCriteria).pipe(
                map( results => LicenseTypeActions.searchSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseTypeActions.getAllPaged),
            mergeMap(({pageNumber, pageSize}) => this.licenseTypeRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => LicenseTypeActions.getAllPagedSuccess({results})),
                catchError(({error}) => [LicenseTypeActions.licenseTypeFailure(error)])
            ))
        )
    );

}
