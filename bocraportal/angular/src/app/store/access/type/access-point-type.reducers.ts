// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as AccessPointTypeActions from './access-point-type.actions';
import {accessPointTypeKey, initialState} from './access-point-type.state';

export const accessPointTypeReducer = createReducer(
    initialState,
    on(AccessPointTypeActions.findByIdSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: action.accessPointType, 
        criteria: null, 
        accessPointTypes: [], 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.saveSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: action.accessPointType, 
        criteria: null, 
        accessPointTypes: [], 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.removeSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: null, 
        criteria: null, 
        accessPointTypes: [], 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.getAllSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: null, 
        criteria: null, 
        accessPointTypes: action.accessPointTypes, 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.searchSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: null, 
        criteria: null, 
        accessPointTypes: action.accessPointTypes, 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        id: null, 
        accessPointType: null, 
        criteria: null, 
        accessPointTypes: action.accessPointTypes, 
        loading: false,
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AccessPointTypeActions.accessPointTypeReset, (state) => ({
      ...state,
        id: null, 
        accessPointType: null, 
        criteria: null, 
        accessPointTypes: [], 
        loading: false,
        success: false,
        error: false,
        messges: []
    })),
    on(AccessPointTypeActions.accessPointTypeFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(AccessPointTypeActions.accessPointTypeLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    }))
);

export const accessPointTypeFeature = createFeature({
    name: accessPointTypeKey,
    reducer: accessPointTypeReducer
});
