// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenseeActions from './licensee.action';
import { LicenseeRestControllerImpl } from '@app/service/bw/org/bocra/portal/licensee/licensee-rest-controller.impl';

@Injectable()
export class LicenseeEffects {

    constructor(private actions$: Actions, private licenseeRestController: LicenseeRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.findById),
            mergeMap(({ id }) => this.licenseeRestController.findById(id).pipe(
//                map( results => LicenseeActions.findByIdSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.save),
            mergeMap(({ licenseeVO }) => this.licenseeRestController.save(licenseeVO).pipe(
//                map( results => LicenseeActions.saveSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.remove),
            mergeMap(({ id }) => this.licenseeRestController.remove(id).pipe(
//                map( results => LicenseeActions.removeSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.getAll),
            mergeMap(() => this.licenseeRestController.getAll().pipe(
//                map( results => LicenseeActions.getAllSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

    searchLicensees$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.searchLicensees),
            mergeMap(({ searchCriteria }) => this.licenseeRestController.searchLicensees(searchCriteria).pipe(
//                map( results => LicenseeActions.searchLicenseesSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenseeActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.licenseeRestController.getAllPaged(pageNumber, pageSize).pipe(
//                map( results => LicenseeActions.getAllPagedSuccess({results})),
                catchError(({error}) => [LicenseeActions.licenseeFailure(error)])
            ))
        )
    );

}
