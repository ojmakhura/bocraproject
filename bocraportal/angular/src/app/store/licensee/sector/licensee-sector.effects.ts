// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenseeSectorActions from './licensee-sector.actions';
import { LicenseeSectorRestController } from '@app/service/bw/org/bocra/portal/licensee/sector/licensee-sector-rest-controller';

@Injectable()
export class LicenseeSectorEffects {
  documentRestController: any;

  constructor(private actions$: Actions, private licenseeSectorRestController: LicenseeSectorRestController) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.findById),
      mergeMap(({ id }) =>
        this.licenseeSectorRestController.findById(id).pipe(
          map((licenseeSector) =>
            LicenseeSectorActions.findByIdSuccess({
              licenseeSector,
              messages: [],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findByLicensee$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.findByLicensee),
      mergeMap(({ licenseeId }) =>
        this.licenseeSectorRestController.findByLicensee(licenseeId).pipe(
          map((licenseeSectors) =>
            LicenseeSectorActions.findBySectorSuccess({
              licenseeSectors,
              messages: [`${licenseeSectors.length} licensee sectors found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findBySector$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.findBySector),
      mergeMap(({ sectorId }) =>
        this.licenseeSectorRestController.findBySector(sectorId).pipe(
          map((licenseeSectors) =>
            LicenseeSectorActions.findBySectorSuccess({
              licenseeSectors,
              messages: [`${licenseeSectors.length} licensee sectors found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  create$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.create),
      mergeMap(({ licenseeId, sectorId }) =>
        this.licenseeSectorRestController.create(licenseeId, sectorId).pipe(
          map((licenseeSector) =>
            LicenseeSectorActions.createSuccess({
              licenseeSector,
              messages: [`Licensee sector created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateLicensee$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.updateLicensee),
      mergeMap(({ id, licenseeId }) =>
        this.licenseeSectorRestController.updateLicensee(id, licenseeId).pipe(
          map((licenseeSector) =>
            LicenseeSectorActions.updateSuccess({
              licenseeSector,
              messages: [`Licensee sector created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateSector$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.updateSector),
      mergeMap(({ id, sectorId }) =>
        this.licenseeSectorRestController.updateSector(id, sectorId).pipe(
          map((licenseeSector) =>
            LicenseeSectorActions.updateSuccess({
              licenseeSector,
              messages: [`Licensee sector created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.remove),
      mergeMap(({ id }) =>
        this.licenseeSectorRestController.remove(id).pipe(
          map((removed) =>
            LicenseeSectorActions.removeSuccess({
              removed,
              messages: [`Licensee sector ${id} removed.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeSectorActions.getAll),
      mergeMap(() =>
        this.licenseeSectorRestController.getAll().pipe(
          map((licenseeSectors) =>
            LicenseeSectorActions.getAllSuccess({
              licenseeSectors,
              messages: [`${licenseeSectors.length} licensee sectors found.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeSectorActions.licenseeSectorFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );
}
