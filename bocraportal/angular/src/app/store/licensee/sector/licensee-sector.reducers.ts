// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as LicenseeSectorActions from './licensee-sector.actions';
import { licenseeSectorKey, initialState } from './licensee-sector.state';

export const licenseeSectorReducer = createReducer(
  initialState,
  on(LicenseeSectorActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.findByIdSuccess, (state, action) => ({
    ...state,
    licenseeSector: action.licenseeSector,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.findByLicensee, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.findByLicenseeSuccess, (state, action) => ({
    ...state,
    licenseeSectors: action.licenseeSectors,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.findBySector, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.findBySectorSuccess, (state, action) => ({
    ...state,
    licenseeSectors: action.licenseeSectors,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.create, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.createSuccess, (state, action) => ({
    ...state,
    licenseeSector: action.licenseeSector,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.updateLicensee, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.updateSector, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.updateSuccess, (state, action) => ({
    ...state,
    licenseeSector: action.licenseeSector,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.removeSuccess, (state, action) => ({
    ...state,
    removed: action.removed,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeSectorActions.getAllSuccess, (state, action) => ({
    ...state,
    licenseeSectors: action.licenseeSectors,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeSectorActions.licenseeSectorReset, (state) => ({
    ...state,
    id: null,
    licenseeSectors: [],
    licenseeSector: null,
    licensee: undefined,
    sector: undefined,
    removed: false,
    success: false,
    loading: false,
    loaderMessage: undefined,
    error: false,
    messages: [],
  })),
  on(LicenseeSectorActions.licenseeSectorFailure, (state, action) => ({
    ...state,
    messages: action.messages,
    error: true,
    loading: false,
    loaderMessage: undefined,
    success: false,
  }))
);

export const licenseeSectorFeature = createFeature({
  name: licenseeSectorKey,
  reducer: licenseeSectorReducer,
});
