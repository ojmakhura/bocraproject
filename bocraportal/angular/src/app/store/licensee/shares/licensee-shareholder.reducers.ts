// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as LicenseeShareholderActions from './licensee-shareholder.actions';
import { licenseeShareholderKey, initialState } from './licensee-shareholder.state';

export const licenseeShareholderReducer = createReducer(
  initialState,
  on(LicenseeShareholderActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.findByIdSuccess, (state, action) => ({
    ...state,
    licenseeShareholder: action.licenseeShareholder,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.findByLicensee, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.findByLicenseeSuccess, (state, action) => ({
    ...state,
    licenseeShareholders: action.licenseeShareholders,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.findByShareholder, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.findByShareholderSuccess, (state, action) => ({
    ...state,
    licenseeShareholders: action.licenseeShareholders,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.create, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.createSuccess, (state, action) => ({
    ...state,
    licenseeShareholder: action.licenseeShareholder,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.updateLicensee, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.updateShareholder, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.updateSuccess, (state, action) => ({
    ...state,
    licenseeShareholder: action.licenseeShareholder,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.removeSuccess, (state, action) => ({
    ...state,
    removed: action.removed,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenseeShareholderActions.getAllSuccess, (state, action) => ({
    ...state,
    licenseeShareholders: action.licenseeShareholders,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenseeShareholderActions.licenseeShareholderReset, (state) => ({
    ...state,
    id: null,
    licenseeShareholders: [],
    licenseeShareholder: null,
    licensee: undefined,
    shareholder: undefined,
    removed: false,
    success: false,
    loading: false,
    loaderMessage: undefined,
    error: false,
    messages: [],
  })),
  on(LicenseeShareholderActions.licenseeShareholderFailure, (state, action) => ({
    ...state,
    messages: action.messages,
    error: true,
    loading: false,
    loaderMessage: undefined,
    success: false,
  }))
);

export const licenseeShareholderFeature = createFeature({
  name: licenseeShareholderKey,
  reducer: licenseeShareholderReducer,
});
