// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenseeShareholderActions from './licensee-shareholder.actions';
import { LicenseeShareholderRestController } from '@app/service/bw/org/bocra/portal/licensee/shares/licensee-shareholder-rest-controller';

@Injectable()
export class LicenseeShareholderEffects {
  documentRestController: any;

  constructor(
    private actions$: Actions,
    private licenseeShareholderRestController: LicenseeShareholderRestController
  ) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.findById),
      mergeMap(({ id }) =>
        this.licenseeShareholderRestController.findById(id).pipe(
          map((licenseeShareholder) =>
            LicenseeShareholderActions.findByIdSuccess({
              licenseeShareholder,
              messages: [],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findByLicensee$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.findByLicensee),
      mergeMap(({ licenseeId }) =>
        this.licenseeShareholderRestController.findByLicensee(licenseeId).pipe(
          map((licenseeShareholders) =>
            LicenseeShareholderActions.findByShareholderSuccess({
              licenseeShareholders,
              messages: [`${licenseeShareholders.length} licensee shareholders found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findByShareholder$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.findByShareholder),
      mergeMap(({ shareholderId }) =>
        this.licenseeShareholderRestController.findByShareholder(shareholderId).pipe(
          map((licenseeShareholders) =>
            LicenseeShareholderActions.findByShareholderSuccess({
              licenseeShareholders,
              messages: [`${licenseeShareholders.length} licensee shareholders found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  create$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.create),
      mergeMap(({ licenseeId, shareholderId, numberOfShares }) =>
        this.licenseeShareholderRestController.create(licenseeId, shareholderId, numberOfShares).pipe(
          map((licenseeShareholder) =>
            LicenseeShareholderActions.createSuccess({
              licenseeShareholder,
              messages: [`Licensee shareholder created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateLicensee$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.updateLicensee),
      mergeMap(({ id, licenseeId }) =>
        this.licenseeShareholderRestController.updateLicensee(id, licenseeId).pipe(
          map((licenseeShareholder) =>
            LicenseeShareholderActions.updateSuccess({
              licenseeShareholder,
              messages: [`Licensee shareholder updated.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateShareholder$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.updateShareholder),
      mergeMap(({ id, shareholderId }) =>
        this.licenseeShareholderRestController.updateShareholder(id, shareholderId).pipe(
          map((licenseeShareholder) =>
            LicenseeShareholderActions.updateSuccess({
              licenseeShareholder,
              messages: [`Licensee shareholder updated.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateNumberOfShares$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.updateNumberOfShares),
      mergeMap(({ id, numberOfShares }) =>
        this.licenseeShareholderRestController.updateNumberOfShares(id, numberOfShares).pipe(
          map((licenseeShareholder) =>
            LicenseeShareholderActions.updateSuccess({
              licenseeShareholder,
              messages: [`Licensee shareholder updated.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.remove),
      mergeMap(({ id }) =>
        this.licenseeShareholderRestController.remove(id).pipe(
          map((removed) =>
            LicenseeShareholderActions.removeSuccess({
              removed,
              messages: [`Licensee shareholder ${id} removed.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LicenseeShareholderActions.getAll),
      mergeMap(() =>
        this.licenseeShareholderRestController.getAll().pipe(
          map((licenseeShareholders) =>
            LicenseeShareholderActions.getAllSuccess({
              licenseeShareholders,
              messages: [`${licenseeShareholders.length} licensee shareholders found.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            LicenseeShareholderActions.licenseeShareholderFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );
}
