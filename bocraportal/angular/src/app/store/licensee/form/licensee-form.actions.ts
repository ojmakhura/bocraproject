// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { LicenseeFormVO } from '@model/bw/org/bocra/portal/licensee/form/licensee-form-vo';

export enum LicenseeFormActionType {
  FIND_BY_ID = '[Licensee Form] Find By Id',
  FIND_BY_ID_SUCCESS = '[Licensee Form] Find By Id Success',
  FIND_BY_LICENSEE = '[Licensee Form] Find By Licensee',
  FIND_BY_LICENSEE_SUCCESS = '[Licensee Form] Find By Licensee Success',
  FIND_BY_FORM = '[Licensee Form] Find By Form',
  FIND_BY_FORM_SUCCESS = '[Licensee Form] Find By Form Success',
  CREATE = '[Licensee Form] Save',
  CREATE_SUCCESS = '[Licensee Form] Save Success',
  UPDATE_LICENSEE = '[Licensee Form] Update Licensee',
  UPDATE_FORM = '[Licensee Form] Update Form',
  UPDATE_SUCCESS = '[Licensee Form] Update Success',
  REMOVE = '[Licensee Form] Remove',
  REMOVE_SUCCESS = '[Licensee Form] Remove Success',
  GET_ALL = '[Licensee Form] Get All',
  GET_ALL_SUCCESS = '[Licensee Form] Get All Success',
  LICENSEE_FORM_RESET = '[Licensee Form] Licensee Form Reset',
  LICENSEE_FORM_FAILURE = '[Licensee Form] Licensee Form Action Failure',
  LICENSEE_FORM_LOADING = '[Licensee Form] Licensee Form Loading',
}

export const findById = createAction(
  LicenseeFormActionType.FIND_BY_ID,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByIdSuccess = createAction(
  LicenseeFormActionType.FIND_BY_ID_SUCCESS,
  props<{ licenseeForm: LicenseeFormVO | any; messages: any[]; success: boolean }>()
);

export const findByLicensee = createAction(
  LicenseeFormActionType.FIND_BY_LICENSEE,
  props<{ licenseeId: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByLicenseeSuccess = createAction(
  LicenseeFormActionType.FIND_BY_LICENSEE_SUCCESS,
  props<{ licenseeForms: LicenseeFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const findByForm = createAction(
  LicenseeFormActionType.FIND_BY_FORM,
  props<{ formId: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByFormSuccess = createAction(
  LicenseeFormActionType.FIND_BY_FORM_SUCCESS,
  props<{ licenseeForms: LicenseeFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const create = createAction(
  LicenseeFormActionType.CREATE,
  props<{ licenseeId: number; formId: number; loading: boolean; loaderMessage: string | undefined }>()
);

export const createSuccess = createAction(
  LicenseeFormActionType.CREATE_SUCCESS,
  props<{ licenseeForm: LicenseeFormVO | any; messages: any[]; success: boolean }>()
);

export const updateLicensee = createAction(
  LicenseeFormActionType.UPDATE_LICENSEE,
  props<{ id: number; licenseeId: number; loading: boolean; loaderMessage: string | undefined }>()
);

export const updateForm = createAction(
  LicenseeFormActionType.UPDATE_FORM,
  props<{ id: number; formId: number; loading: boolean; loaderMessage: string | undefined }>()
);

export const updateSuccess = createAction(
  LicenseeFormActionType.UPDATE_SUCCESS,
  props<{ licenseeForm: LicenseeFormVO | any; messages: any[]; success: boolean }>()
);

export const remove = createAction(
  LicenseeFormActionType.REMOVE,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const removeSuccess = createAction(
  LicenseeFormActionType.REMOVE_SUCCESS,
  props<{ removed: boolean | any; messages: any[]; success: boolean }>()
);

export const getAll = createAction(
  LicenseeFormActionType.GET_ALL,
  props<{ loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllSuccess = createAction(
  LicenseeFormActionType.GET_ALL_SUCCESS,
  props<{ licenseeForms: LicenseeFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const licenseeFormReset = createAction(LicenseeFormActionType.LICENSEE_FORM_RESET);

export const licenseeFormLoading = createAction(
  LicenseeFormActionType.LICENSEE_FORM_LOADING,
  props<{ loading: boolean; loaderMessage: string | undefined; success: boolean; messages: any[] }>()
);

export const licenseeFormFailure = createAction(
  LicenseeFormActionType.LICENSEE_FORM_FAILURE,
  props<{ messages: any[] }>()
);
