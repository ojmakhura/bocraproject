// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { LicenseeVO } from '@app/model/bw/org/bocra/portal/licensee/licensee-vo';
import { LicenseeCriteria } from '@app/model/bw/org/bocra/portal/licensee/licensee-criteria';
import { LicenseeFormVO } from '@model/bw/org/bocra/portal/licensee/licensee-form-vo';

export enum LicenseeActionType {
    FIND_BY_ID = '[Licensee Form] Find By Id',
    FIND_BY_ID_SUCCESS = '[Licensee Form] Find By Id Success',
    FIND_BY_LICENSEE = '[Licensee Form] Find By Licensee',
    FIND_BY_LICENSEE_SUCCESS = '[Licensee Form] Find By Licensee Success',
    FIND_BY_FORM = '[Licensee Form] Find By Form',
    FIND_BY_FORM_SUCCESS = '[Licensee Form] Find By Form Success',
    CREATE = '[Licensee Form] Save',
    CREATE_SUCCESS = '[Licensee Form] Save Success',
    UPDATE_LICENSEE = '[Licensee Form] Update Licensee',
    UPDATE_FORM = '[Licensee Form] Update Form',
    UPDATE_SUCCESS = '[Licensee Form] Update Success',
    REMOVE = '[Licensee Form] Remove',
    REMOVE_SUCCESS = '[Licensee Form] Remove Success',
    GET_ALL = '[Licensee Form] Get All',
    GET_ALL_SUCCESS = '[Licensee Form] Get All Success',
    LICENSEE_FORM_RESET = '[Licensee Form] Licensee Form Reset',
    LICENSEE_FORM_FAILURE = '[Licensee Form] Licensee Form Action Failure',
    LICENSEE_FORM_LOADING = '[Licensee Form] Licensee Form Loading'
}

export const findById = createAction(
    LicenseeActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

export const findByIdSuccess = createAction(
    LicenseeActionType.FIND_BY_ID_SUCCESS,
    props<{ licenseeForm: LicenseeFormVO | any, messages: any[], success: boolean}>()
);

export const findByLicensee = createAction(
    LicenseeActionType.FIND_BY_LICENSEE,
    props<{ licenseeId: number | any , loading: boolean }>()
);

export const findByLicenseeSuccess = createAction(
    LicenseeActionType.FIND_BY_LICENSEE_SUCCESS,
    props<{ licenseeForm: LicenseeFormVO | any, messages: any[], success: boolean}>()
);

export const findByForm = createAction(
    LicenseeActionType.FIND_BY_FORM,
    props<{ formId: number | any , loading: boolean }>()
);

export const findByFormSuccess = createAction(
    LicenseeActionType.FIND_BY_FORM_SUCCESS,
    props<{ licenseeForm: LicenseeFormVO | any, messages: any[], success: boolean}>()
);

export const create = createAction(
    LicenseeActionType.CREATE,
    props<{ licenseeId: number, formId: number, loading: boolean }>()
);

export const createSuccess = createAction(
    LicenseeActionType.CREATE_SUCCESS,
    props<{ licenseeForm: LicenseeFormVO | any, messages: any[], success: boolean}>()
);

export const updateLicensee = createAction(
    LicenseeActionType.UPDATE_LICENSEE,
    props<{ id: number, licenseeId: number, loading: boolean }>()
);

export const updateForm = createAction(
    LicenseeActionType.UPDATE_FORM,
    props<{ id: number, formId: number, loading: boolean }>()
);

export const updateSuccess = createAction(
    LicenseeActionType.UPDATE_SUCCESS,
    props<{ licenseeForm: LicenseeFormVO | any, messages: any[], success: boolean}>()
);

export const remove = createAction(
    LicenseeActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

export const removeSuccess = createAction(
    LicenseeActionType.REMOVE_SUCCESS,
    props<{ removed: boolean | any, messages: any[], success: boolean}>()
);

export const getAll = createAction(
    LicenseeActionType.GET_ALL,
    props<{  loading: boolean }>()
);

export const getAllSuccess = createAction(
    LicenseeActionType.GET_ALL_SUCCESS,
    props<{ licensees: LicenseeVO[] | any[], messages: any[], success: boolean}>()
);

export const licenseeFormReset = createAction(LicenseeActionType.LICENSEE_FORM_RESET);

export const licenseeFormLoading = createAction(
    LicenseeActionType.LICENSEE_FORM_LOADING,
    props<{ loading: boolean, success: boolean, messages: any[] }>()
);

export const licenseeFormFailure = createAction(
    LicenseeActionType.LICENSEE_FORM_FAILURE,
    props<{ messages: any[] }>()
);
