// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { AuthorisationCriteria } from '@app/model/bw/org/bocra/portal/auth/authorisation-criteria';
import { AuthorisationVO } from '@app/model/bw/org/bocra/portal/auth/authorisation-vo';

export enum AuthorisationActionType {
    FIND_BY_ID = '[Authorisation] Find By Id',
    FIND_BY_ID_SUCCESS = '[Authorisation] Find By Id Success',
    SAVE = '[Authorisation] Save',
    SAVE_SUCCESS = '[Authorisation] Save Success',
    REMOVE = '[Authorisation] Remove',
    REMOVE_SUCCESS = '[Authorisation] Remove Success',
    GET_ALL = '[Authorisation] Get All',
    GET_ALL_SUCCESS = '[Authorisation] Get All Success',
    SEARCH = '[Authorisation] Search',
    SEARCH_SUCCESS = '[Authorisation] Search Success',
    GET_ALL_PAGED = '[Authorisation] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[Authorisation] Get All Paged Success',
    AUTHORISATION_RESET = '[Authorisation] Authorisation Reset',
    AUTHORISATION_FAILURE = '[Authorisation] Authorisation Action Failure'
}

export const findById = createAction(
    AuthorisationActionType.FIND_BY_ID,
    props<{ id: number | any  }>()
);

export const findByIdSuccess = createAction(
    AuthorisationActionType.FIND_BY_ID_SUCCESS,
    props<{ authorisation: AuthorisationVO | any }>()
);

export const save = createAction(
    AuthorisationActionType.SAVE,
    props<{ authorisation: AuthorisationVO | any  }>()
);

export const saveSuccess = createAction(
    AuthorisationActionType.SAVE_SUCCESS,
    props<{ authorisation: AuthorisationVO | any }>()
);

export const remove = createAction(
    AuthorisationActionType.REMOVE,
    props<{ id: number | any  }>()
);

export const removeSuccess = createAction(
    AuthorisationActionType.REMOVE_SUCCESS,
    props<{ removed: boolean | any }>()
);

export const getAll = createAction(
    AuthorisationActionType.GET_ALL);

export const getAllSuccess = createAction(
    AuthorisationActionType.GET_ALL_SUCCESS,
    props<{ authorisations: AuthorisationVO[] | any }>()
);

export const search = createAction(
    AuthorisationActionType.SEARCH,
    props<{ criteria: AuthorisationCriteria | any  }>()
);

export const searchSuccess = createAction(
    AuthorisationActionType.SEARCH_SUCCESS,
    props<{ authorisations: AuthorisationVO[] | any }>()
);

export const getAllPaged = createAction(
    AuthorisationActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any  }>()
);

export const getAllPagedSuccess = createAction(
    AuthorisationActionType.GET_ALL_PAGED_SUCCESS,
    props<{ authorisations: AuthorisationVO[] | any }>()
);


export const authorisationReset = createAction(AuthorisationActionType.AUTHORISATION_RESET);

export const authorisationFailure = createAction(
    AuthorisationActionType.AUTHORISATION_FAILURE,
    props<{ error: any }>()
);
