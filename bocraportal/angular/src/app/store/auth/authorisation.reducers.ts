// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as AuthorisationActions from './authorisation.actions';
import {authorisationKey, initialState} from './authorisation.state';

export const authorisationReducer = createReducer(
    initialState,
    on(AuthorisationActions.findByIdSuccess, (state, action) => ({
        ...state,
        authorisation: action.authorisation, 
        success: action.success,
        loading: false,
        error: false, 
        messages: action.messages
    })),
    on(AuthorisationActions.saveSuccess, (state, action) => ({
        ...state,
        loading: false, 
        authorisation: action.authorisation, 
        success: action.success,
        error: false,
        messages: action.messages
    })),
    on(AuthorisationActions.removeSuccess, (state, action) => ({
        ...state,
        removed: action.removed, 
        loading: false, 
        success: action.success, 
        error: false,
        messages: action.messages
    })),
    on(AuthorisationActions.getAllSuccess, (state, action) => ({
        ...state,
        authorisations: action.authorisations, 
        loading: false, 
        success: action.success, 
        error: false,
        messages: action.messages
    })),
    on(AuthorisationActions.searchSuccess, (state, action) => ({
        ...state,
        authorisations: action.authorisations, 
        loading: false, 
        success: action.success, 
        error: false,
        messages: action.messages
    })),
    on(AuthorisationActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        authorisations: action.authorisations, 
        loading: false, 
        success: action.success, 
        error: false,
        messages: action.messages
    })),
    on(AuthorisationActions.authorisationReset, (state) => ({
      ...state,
        criteria: null, 
        authorisations: [], 
        authorisation: null, 
        id: null, 
        loading: false,
        success: false,
        error: false,
        messages: []
    })),
    on(AuthorisationActions.authorisationFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(AuthorisationActions.authorisationLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    })),
    // on(AuthorisationActions.authorisationSuccess, (state, action) => ({
    //     ...state,
    //     loading: action.loading,
    //     success: action.success,
    //     messages: action.messages
    // }))
);

export const authorisationFeature = createFeature({
    name: authorisationKey,
    reducer: authorisationReducer
});
