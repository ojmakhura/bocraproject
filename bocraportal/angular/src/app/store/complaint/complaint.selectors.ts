// Generated by andromda-angular cartridge (app\usecase\selector.store.ts.vsl) DO NOT EDIT
import { createFeatureSelector, createSelector } from '@ngrx/store';
import { complaintKey, ComplaintState } from './complaint.state';

export const selectComplaintState = createFeatureSelector<ComplaintState> (
    complaintKey
);

export const selectComplaintReply = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.complaintReply
);

export const selectComplaintReplies = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.complaintReplies
);

export const selectId = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.id
);

export const selectComplaintId = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.complaintId
);

export const selectCriteria = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.criteria
);

export const selectComplaints = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.complaints
);

export const selectLoggedInSearch = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.loggedInSearch
);

export const selectDocument = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.document
);

export const selectComplaint = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.complaint
);

export const selectLoaderMessage = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.loaderMessage
);

export const selectMessages = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.messages
);

export const selectSuccess = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.success
);

export const selectLoading = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.loading
);

export const selectError = createSelector(
    selectComplaintState,
    (state: ComplaintState) => state.error
);
