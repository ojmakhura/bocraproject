// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { ComplaintVO } from '@app/model/bw/org/bocra/portal/complaint/complaint-vo';
import { ComplaintTypeVO } from '@app/model/bw/org/bocra/portal/complaint/type/complaint-type-vo';

export enum ComplaintTypeActionType {
  FIND_BY_ID = '[ComplaintType] Find By Id',
  FIND_BY_ID_SUCCESS = '[ComplaintType] Find By Id Success',
  SAVE = '[ComplaintType] Save',
  SAVE_SUCCESS = '[ComplaintType] Save Success',
  REMOVE = '[ComplaintType] Remove',
  REMOVE_SUCCESS = '[ComplaintType] Remove Success',
  GET_ALL = '[ComplaintType] Get All',
  GET_ALL_SUCCESS = '[ComplaintType] Get All Success',
  SEARCH = '[ComplaintType] Search',
  SEARCH_SUCCESS = '[ComplaintType] Search Success',
  GET_ALL_PAGED = '[ComplaintType] Get All Paged',
  GET_ALL_PAGED_SUCCESS = '[ComplaintType] Get All Paged Success',
  COMPLAINT_TYPE_RESET = '[ComplaintType] ComplaintType Reset',
  COMPLAINT_TYPE_FAILURE = '[ComplaintType] ComplaintType Action Failure',
  COMPLAINT_TYPE_LOADING = '[ComplaintType] ComplaintType Loading',
  COMPLAINT_TYPE_LOADER_MESSAGE = '[ComplaintType] ComplaintType Loader Message',
}

export const findById = createAction(
  ComplaintTypeActionType.FIND_BY_ID,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const findByIdSuccess = createAction(
  ComplaintTypeActionType.FIND_BY_ID_SUCCESS,
  props<{ complaintType: ComplaintTypeVO | any; messages: any[]; success: boolean }>()
);

export const save = createAction(
  ComplaintTypeActionType.SAVE,
  props<{ complaintType: ComplaintTypeVO | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const saveSuccess = createAction(
  ComplaintTypeActionType.SAVE_SUCCESS,
  props<{ complaintType: ComplaintTypeVO | any; messages: any[]; success: boolean }>()
);

export const remove = createAction(
  ComplaintTypeActionType.REMOVE,
  props<{ id: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const removeSuccess = createAction(
  ComplaintTypeActionType.REMOVE_SUCCESS,
  props<{ removed: boolean | any; messages: any[]; success: boolean }>()
);

export const getAll = createAction(
  ComplaintTypeActionType.GET_ALL,
  props<{ loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllSuccess = createAction(
  ComplaintTypeActionType.GET_ALL_SUCCESS,
  props<{ complaintTypes: ComplaintTypeVO[] | any[]; messages: any[]; success: boolean }>()
);

export const search = createAction(
  ComplaintTypeActionType.SEARCH,
  props<{ criteria: string | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const searchSuccess = createAction(
  ComplaintTypeActionType.SEARCH_SUCCESS,
  props<{ complaintTypes: ComplaintVO[] | any[]; messages: any[]; success: boolean }>()
);

export const getAllPaged = createAction(
  ComplaintTypeActionType.GET_ALL_PAGED,
  props<{ pageNumber: number | any; pageSize: number | any; loading: boolean; loaderMessage: string | undefined }>()
);

export const getAllPagedSuccess = createAction(
  ComplaintTypeActionType.GET_ALL_PAGED_SUCCESS,
  props<{ complaintTypes: ComplaintTypeVO[] | any[]; messages: any[]; success: boolean }>()
);

export const complaintTypeReset = createAction(ComplaintTypeActionType.COMPLAINT_TYPE_RESET);

export const complaintTypeLoading = createAction(
  ComplaintTypeActionType.COMPLAINT_TYPE_LOADING,
  props<{ loading: boolean; success: boolean; messages: any[] }>()
);

export const complaintTypeFailure = createAction(
  ComplaintTypeActionType.COMPLAINT_TYPE_FAILURE,
  props<{ messages: any[] }>()
);
