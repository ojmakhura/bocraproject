// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as ComplaintTypeActions from './complaint-type.actions';
import {complaintTypeKey, initialState} from './complaint-type.state';

export const complaintTypeReducer = createReducer(
    initialState,
    on(ComplaintTypeActions.findById, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.findByIdSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.save, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.saveSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.remove, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.removeSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        removed: action.removed,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.getAll, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.getAllSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.search, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.searchSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.getAllPaged, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ComplaintTypeActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ComplaintTypeActions.complaintTypeReset, (state) => ({
      ...state,
        id: null, 
        criteria: null, 
        complaintType: null, 
        complaintTypes: [], 
        loaderMessage: undefined,
        loading: false,
        success: false,
        removed: false,
        error: false,
        messges: []
    })),
    on(ComplaintTypeActions.complaintTypeFailure, (state, action) => ({
        ...state,
        loading: false,
        loaderMessage: undefined,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(ComplaintTypeActions.complaintTypeLoading, (state, action) => ({
        ...state,
        loaderMessage: undefined,
        loading: action.loading,
        success: false
    }))
);

export const complaintTypeFeature = createFeature({
    name: complaintTypeKey,
    reducer: complaintTypeReducer
});
