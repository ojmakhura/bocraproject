// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as ComplaintActions from './complaint.actions';
import { complaintKey, initialState } from './complaint.state';

export const complaintReducer = createReducer(
  initialState,
  on(ComplaintActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.findByIdSuccess, (state, action) => ({
    ...state,
    complaint: action.complaint,
    criteria: null,
    complaints: [],
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.findByComplaintId, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.findByComplaintIdSuccess, (state, action) => ({
    ...state,
    complaint: action.complaint,
    criteria: null,
    complaints: [action.complaint],
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.save, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.saveSuccess, (state, action) => ({
    ...state,
    complaint: action.complaint,
    criteria: null,
    complaints: [],
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.assignToUserSuccess, (state, action) => ({
    ...state,
    assigned: action.assigned,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.updateStatusSuccess, (state, action) => ({
    ...state,
    updated: action.updated,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.removeSuccess, (state, action) => ({
    ...state,
    complaint: null,
    criteria: null,
    removed: action.removed,
    complaints: [],
    id: null,
    loading: false,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.addDocument, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.addDocumentSuccess, (state, action) => ({
    ...state,
    document: action.document,
    documents: [...state.documents, action.document],
    loading: false,
    loaderMessage: undefined,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.getAllSuccess, (state, action) => ({
    ...state,
    complaint: null,
    criteria: null,
    complaints: action.complaints,
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.search, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.searchSuccess, (state, action) => ({
    ...state,
    complaint: null,
    criteria: null,
    complaints: action.complaints,
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.getAllPaged, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.getAllPagedSuccess, (state, action) => ({
    ...state,
    complaint: null,
    criteria: null,
    complaints: action.complaints,
    id: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.getComplaintDocuments, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(ComplaintActions.getComplaintDocumentsSuccess, (state, action) => ({
    ...state,
    documents: action.documents,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(ComplaintActions.addComplaintReply, (state, action) => ({
    ...state,
    loaderMessage: action.loaderMessage,
    loading: action.loading,
  })),
  on(ComplaintActions.addComplaintReplySuccess, (state, action) => ({
    ...state,
    complaints: [],
    complaintReplies: [...state.complaintReplies, action.complaintReply],
    complaintReply: action.complaintReply,
    id: null,
    criteria: null,
    document: null,
    complaint: null,
    loaderMessage: undefined,
    loading: false,
    error: false,
    success: action.success,
    messages: action.messages,
  })),
  on(ComplaintActions.removeComplaintReply, (state, action) => ({
    ...state,
    loaderMessage: action.loaderMessage,
    loading: action.loading,
  })),
  on(ComplaintActions.removeComplaintReplySuccess, (state, action) => ({
    ...state,
    complaints: [],
    complaintReply: null,
    id: null,
    criteria: null,
    document: null,
    complaint: null,
    loaderMessage: undefined,
    loading: false,
    error: false,
    success: action.success,
    messages: action.messages,
  })),
  on(ComplaintActions.complaintReset, (state) => ({
    ...state,
    complaint: null,
    criteria: null,
    complaints: [],
    id: null,
    removed: false,
    loading: false,
    success: false,
    error: false,
    messages: [],
    loaderMessage: undefined,
    document: undefined,
    documents: [],
    complaintReply: undefined,
    complaintReplies: [],
    loggedInSearch: null,
    complaintId: '',
  })),
  on(ComplaintActions.complaintFailure, (state, action) => ({
    ...state,
    loading: false,
    loaderMessage: undefined,
    success: false,
    error: true,
    messages: action.messages,
  })),
  on(ComplaintActions.complaintLoading, (state, action) => ({
    ...state,
    loading: action.loading,
    success: false,
  }))
);

export const complaintFeature = createFeature({
  name: complaintKey,
  reducer: complaintReducer,
});
