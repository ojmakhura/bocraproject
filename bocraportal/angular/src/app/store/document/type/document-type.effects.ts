// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as DocumentTypeActions from './document-type.actions';
import { DocumentTypeRestControllerImpl } from '@app/service/bw/org/bocra/portal/document/type/document-type-rest-controller.impl';

@Injectable()
export class DocumentTypeEffects {

    constructor(private actions$: Actions, private documentTypeRestController: DocumentTypeRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.findById),
            mergeMap(({ id }) => this.documentTypeRestController.findById(id).pipe(
                map( results => DocumentTypeActions.findByIdSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.save),
            mergeMap(({ documentType }) => this.documentTypeRestController.save(documentType).pipe(
                map( results => DocumentTypeActions.saveSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.remove),
            mergeMap(({ id }) => this.documentTypeRestController.remove(id).pipe(
                map( results => DocumentTypeActions.removeSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.getAll),
            mergeMap(() => this.documentTypeRestController.getAll().pipe(
                map( results => DocumentTypeActions.getAllSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.search),
            mergeMap(({ criteria }) => this.documentTypeRestController.search(criteria).pipe(
                map( results => DocumentTypeActions.searchSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(DocumentTypeActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.documentTypeRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => DocumentTypeActions.getAllPagedSuccess({results})),
                catchError(({error}) => [DocumentTypeActions.documentTypeFailure(error)])
            ))
        )
    );

}
