// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { DocumentVO } from '@app/model/bw/org/bocra/portal/document/document-vo';

export enum DocumentActionType {
    FIND_BY_ID = '[Document] Find By Id',
    FIND_BY_ID_SUCCESS = '[Document] Find By Id Success',
    SAVE = '[Document] Save',
    SAVE_SUCCESS = '[Document] Save Success',
    REMOVE = '[Document] Remove',
    REMOVE_SUCCESS = '[Document] Remove Success',
    GET_ALL = '[Document] Get All',
    GET_ALL_SUCCESS = '[Document] Get All Success',
    SEARCH = '[Document] Search',
    SEARCH_SUCCESS = '[Document] Search Success',
    GET_ALL_PAGED = '[Document] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[Document] Get All Paged Success',
    GET_LICENSEE_DOCUMENTS = '[Document] Get Licensee Documents',
    GET_LICENSEE_DOCUMENTS_SUCCESS = '[Document] Get Licensee Documents Success',
    GET_LICENCE_DOCUMENTS = '[Document] Get Licence Documents',
    GET_LICENCE_DOCUMENTS_SUCCESS = '[Document] Get Licence Documents Success',
    DOCUMENT_RESET = '[Document] Document Reset',
    DOCUMENT_FAILURE = '[Document] Document Action Failure'
}

export const findById = createAction(
    DocumentActionType.FIND_BY_ID,
    props<{ id: number | any  }>()
);

export const findByIdSuccess = createAction(
    DocumentActionType.FIND_BY_ID_SUCCESS,
    props<{ document: DocumentVO | any }>()
);

export const save = createAction(
    DocumentActionType.SAVE,
    props<{ document: DocumentVO | any  }>()
);

export const saveSuccess = createAction(
    DocumentActionType.SAVE_SUCCESS,
    props<{ document: DocumentVO | any }>()
);

export const remove = createAction(
    DocumentActionType.REMOVE,
    props<{ id: number | any  }>()
);

export const removeSuccess = createAction(
    DocumentActionType.REMOVE_SUCCESS,
    props<{ removed: boolean | any }>()
);

export const getAll = createAction(
    DocumentActionType.GET_ALL);

export const getAllSuccess = createAction(
    DocumentActionType.GET_ALL_SUCCESS,
    props<{ documents: DocumentVO[] | any[] }>()
);

export const search = createAction(
    DocumentActionType.SEARCH,
    props<{ criteria: string | any  }>()
);

export const searchSuccess = createAction(
    DocumentActionType.SEARCH_SUCCESS,
    props<{ documents: DocumentVO[] | any[] }>()
);

export const getAllPaged = createAction(
    DocumentActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any  }>()
);

export const getAllPagedSuccess = createAction(
    DocumentActionType.GET_ALL_PAGED_SUCCESS,
    props<{ documents: DocumentVO[] | any[] }>()
);

export const getLicenseeDocuments = createAction(
    DocumentActionType.GET_LICENSEE_DOCUMENTS,
    props<{ licenseeId: number | any  }>()
);

export const getLicenseeDocumentsSuccess = createAction(
    DocumentActionType.GET_LICENSEE_DOCUMENTS_SUCCESS,
    props<{ documents: DocumentVO[] | any[] }>()
);

export const getLicenceDocuments = createAction(
    DocumentActionType.GET_LICENCE_DOCUMENTS,
    props<{ licenceId: number | any  }>()
);

export const getLicenceDocumentsSuccess = createAction(
    DocumentActionType.GET_LICENCE_DOCUMENTS_SUCCESS,
    props<{ documents: DocumentVO[] | any[] }>()
);


export const documentReset = createAction(DocumentActionType.DOCUMENT_RESET);

export const documentFailure = createAction(
    DocumentActionType.DOCUMENT_FAILURE,
    props<{ error: any }>()
);
