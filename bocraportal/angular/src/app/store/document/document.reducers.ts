// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as DocumentActions from './document.actions';
import {documentKey, initialState} from './document.state';

export const documentReducer = createReducer(
    initialState,
    on(DocumentActions.findByIdSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.saveSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.removeSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.getAllSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.searchSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.getLicenseeDocumentsSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.getLicenceDocumentsSuccess, (state, action) => ({
        ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(DocumentActions.documentReset, (state) => ({
      ...state,
        documents: [], 
        criteria: null, 
        id: null, 
        document: null, 
        loading: false,
        success: false,
        error: null
    })),
    on(DocumentActions.documentFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: action.error
    })),
    on(DocumentActions.documentLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    })),
    on(DocumentActions.documentSuccess, (state, action) => ({
        ...state,
        loading: action.loading,
        success: action.success,
        error: action.error
    }))
);

export const documentFeature = createFeature({
    name: documentKey,
    reducer: documentReducer
});
