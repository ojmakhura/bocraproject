// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as FormActivationActions from './form-activation.actions';
import {formActivationKey, initialState} from './form-activation.state';

export const formActivationReducer = createReducer(
    initialState,
    on(FormActivationActions.findByIdSuccess, (state, action) => ({
        ...state,
        formActivation: action.formActivation, 
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.saveSuccess, (state, action) => ({
        ...state,
        formActivation: action.formActivation, 
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.removeSuccess, (state, action) => ({
        ...state,
        removed: action.removed,
        formActivation: null,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.getAllSuccess, (state, action) => ({
        ...state,
        formActivations: action.formActivations, 
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.searchSuccess, (state, action) => ({
        ...state,
        formActivations: action.formActivations, 
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        formActivations: action.formActivations, 
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(FormActivationActions.formActivationReset, (state) => ({
      ...state,
        periodName: null, 
        formActivation: null, 
        id: null, 
        formActivations: [], 
        removed: false,
        loading: false,
        success: false,
        error: false,
        messges: []
    })),
    on(FormActivationActions.formActivationFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(FormActivationActions.formActivationLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    }))
);

export const formActivationFeature = createFeature({
    name: formActivationKey,
    reducer: formActivationReducer
});
