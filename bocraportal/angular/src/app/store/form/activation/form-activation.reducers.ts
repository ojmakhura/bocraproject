// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as FormActivationActions from './form-activation.actions';
import { formActivationKey, initialState } from './form-activation.state';

export const formActivationReducer = createReducer(
  initialState,
  on(FormActivationActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.findByIdSuccess, (state, action) => ({
    ...state,
    formActivation: action.formActivation,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.save, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.saveSuccess, (state, action) => ({
    ...state,
    formActivation: action.formActivation,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.removeSuccess, (state, action) => ({
    ...state,
    removed: action.removed,
    formActivation: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.getAllSuccess, (state, action) => ({
    ...state,
    formActivations: action.formActivations,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.search, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.searchSuccess, (state, action) => ({
    ...state,
    formActivations: action.formActivations,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.activateFor, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.activateForSuccess, (state, action) => ({
    ...state,
    formActivations: action.formActivations,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.pagedSearch, (state, action) => ({
    ...state,
    accessPoints: [],
    accessPoint: null,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.pagedSearchSuccess, (state, action) => ({
    ...state,
    formActivationsPage: action.formActivationsPage,
    id: null,
    accessPoint: null,
    criteria: null,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.getAllPaged, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(FormActivationActions.getAllPagedSuccess, (state, action) => ({
    ...state,
    formActivations: action.formActivations,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(FormActivationActions.formActivationReset, (state) => ({
    ...state,
    periodName: null,
    formActivation: null,
    id: null,
    formActivations: [],
    removed: false,
    loading: false,
    loaderMessage: undefined,
    success: false,
    error: false,
    messges: [],
  })),
  on(FormActivationActions.formActivationFailure, (state, action) => ({
    ...state,
    loading: false,
    loaderMessage: undefined,
    success: false,
    error: true,
    messages: action.messages,
  })),
  on(FormActivationActions.formActivationLoading, (state, action) => ({
    ...state,
    loading: action.loading,
    success: false,
  }))
);

export const formActivationFeature = createFeature({
  name: formActivationKey,
  reducer: formActivationReducer,
});
