// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { DataFieldVO } from '@app/model/bw/org/bocra/portal/form/submission/data/data-field-vo';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';
import { FormSubmissionCriteria } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-criteria';

export enum DataProcessingActionType {
    FIND_BY_ID = '[DataProcessing] Find By Id',
    FIND_BY_ID_SUCCESS = '[DataProcessing] Find By Id Success',
    SAVE = '[DataProcessing] Save',
    SAVE_SUCCESS = '[DataProcessing] Save Success',
    REMOVE = '[DataProcessing] Remove',
    REMOVE_SUCCESS = '[DataProcessing] Remove Success',
    GET_ALL = '[DataProcessing] Get All',
    GET_ALL_SUCCESS = '[DataProcessing] Get All Success',
    SEARCH = '[DataProcessing] Search',
    SEARCH_SUCCESS = '[DataProcessing] Search Success',
    GET_ALL_PAGED = '[DataProcessing] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[DataProcessing] Get All Paged Success',
    ADD_DATA_FIELDS = '[DataProcessing] Add Data Fields',
    ADD_DATA_FIELDS_SUCCESS = '[DataProcessing] Add Data Fields Success',
    ADD_DATA_FIELD = '[DataProcessing] Add Data Field',
    ADD_DATA_FIELD_SUCCESS = '[DataProcessing] Add Data Field Success',
    DELETE_DATA_FIELD = '[DataProcessing] Delete Data Field',
    DELETE_DATA_FIELD_SUCCESS = '[DataProcessing] Delete Data Field Success',
    DATA_PROCESSING_RESET = '[DataProcessing] DataProcessing Reset',
    DATA_PROCESSING_FAILURE = '[DataProcessing] DataProcessing Action Failure',
    DATA_PROCESSING_LOADING = '[DataProcessing] DataProcessing Loading'
}

export const findById = createAction(
    DataProcessingActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

export const findByIdSuccess = createAction(
    DataProcessingActionType.FIND_BY_ID_SUCCESS,
    props<{ formSubmissionVO: FormSubmissionVO | any, messages: any[], success: boolean}>()
);

export const save = createAction(
    DataProcessingActionType.SAVE,
    props<{ formSubmissionVO: FormSubmissionVO | any , loading: boolean }>()
);

export const saveSuccess = createAction(
    DataProcessingActionType.SAVE_SUCCESS,
    props<{ formSubmissionVO: FormSubmissionVO | any, messages: any[], success: boolean}>()
);

export const remove = createAction(
    DataProcessingActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

export const removeSuccess = createAction(
    DataProcessingActionType.REMOVE_SUCCESS,
    props<{ boolean: boolean | any, messages: any[], success: boolean}>()
);

export const getAll = createAction(
    DataProcessingActionType.GET_ALL,
    props<{  loading: boolean }>()
);

export const getAllSuccess = createAction(
    DataProcessingActionType.GET_ALL_SUCCESS,
    props<{ formSubmissionVO: FormSubmissionVO[] | any[], messages: any[], success: boolean}>()
);

export const search = createAction(
    DataProcessingActionType.SEARCH,
    props<{ criteria: FormSubmissionCriteria | any , loading: boolean }>()
);

export const searchSuccess = createAction(
    DataProcessingActionType.SEARCH_SUCCESS,
    props<{ formSubmissionVO: FormSubmissionVO[] | any[], messages: any[], success: boolean}>()
);

export const getAllPaged = createAction(
    DataProcessingActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean }>()
);

export const getAllPagedSuccess = createAction(
    DataProcessingActionType.GET_ALL_PAGED_SUCCESS,
    props<{ formSubmissionVO: FormSubmissionVO[] | any[], messages: any[], success: boolean}>()
);

export const addDataFields = createAction(
    DataProcessingActionType.ADD_DATA_FIELDS,
    props<{ dataFields: DataFieldVO | any , loading: boolean }>()
);

export const addDataFieldsSuccess = createAction(
    DataProcessingActionType.ADD_DATA_FIELDS_SUCCESS,
    props<{ dataFieldVO: DataFieldVO[] | any[], messages: any[], success: boolean}>()
);

export const addDataField = createAction(
    DataProcessingActionType.ADD_DATA_FIELD,
    props<{ dataField: DataFieldVO | any , loading: boolean }>()
);

export const addDataFieldSuccess = createAction(
    DataProcessingActionType.ADD_DATA_FIELD_SUCCESS,
    props<{ dataFieldVO: DataFieldVO | any, messages: any[], success: boolean}>()
);

export const deleteDataField = createAction(
    DataProcessingActionType.DELETE_DATA_FIELD,
    props<{ id: number | any , loading: boolean }>()
);

export const deleteDataFieldSuccess = createAction(
    DataProcessingActionType.DELETE_DATA_FIELD_SUCCESS,
    props<{ boolean: Boolean | any, messages: any[], success: boolean}>()
);


export const dataProcessingReset = createAction(DataProcessingActionType.DATA_PROCESSING_RESET);

export const dataProcessingLoading = createAction(
    DataProcessingActionType.DATA_PROCESSING_LOADING,
    props<{ loading: boolean, success: boolean, messages: any[] }>()
);

export const dataProcessingFailure = createAction(
    DataProcessingActionType.DATA_PROCESSING_FAILURE,
    props<{ messages: any[] }>()
);
