// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as FormActions from './form.actions';
import {formKey, initialState} from './form.state';

export const formReducer = createReducer(
    initialState,
    on(FormActions.findFormByIdSuccess, (state, action) => ({
        ...state,
        form: action.form,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.saveFormSuccess, (state, action) => ({
        ...state,
        form: action.form,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.removeFormSuccess, (state, action) => ({
        ...state,
        removed: action.removed,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.getAllFormsSuccess, (state, action) => ({
        ...state,
        forms: action.forms,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.searchFormsSuccess, (state, action) => ({
        ...state,
        forms: action.forms,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.getAllFormsPagedSuccess, (state, action) => ({
        ...state,
        forms: action.forms,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.findFieldByIdSuccess, (state, action) => ({
        ...state,
        formField: action.formField,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.saveFieldSuccess, (state, action) => ({
        ...state,
        formField: action.formField,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.saveSectionSuccess, (state, action) => ({
        ...state,
        formSections: [...state.formSections, action.formSection],
        formSection: action.formSection,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.saveExpressionSuccess, (state, action) => ({
        ...state,
        expression: action.expression,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.setSections, (state, action) => ({
        ...state,
        formSections: action.formSections,
        loading: false,
        errors: []
    })),
    on(FormActions.removeFieldSuccess, (state, action) => ({
        ...state,
        removed: action.removed,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.getAllFieldsSuccess, (state, action) => ({
        ...state,
        formFields: action.formFields,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.getAllFieldsPagedSuccess, (state, action) => ({
        ...state,
        formFields: action.formFields,
        loading: false,
        success: action.success,
        errors: []
    })),
    on(FormActions.formReset, (state) => ({
      ...state,
        criteria: null, 
        form: null, 
        id: null, 
        formField: null, 
        formFields: [], 
        formSection: null, 
        formSections: [], 
        forms: [], 
        loading: false,
        success: false,
        errors: []
    })),
    on(FormActions.formFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        errors: action.errors
    })),
    on(FormActions.formLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    })),
    on(FormActions.formSuccess, (state, action) => ({
        ...state,
        loading: action.loading,
        success: action.success,
        errors: action.errors
    }))
);

export const formFeature = createFeature({
    name: formKey,
    reducer: formReducer
});
