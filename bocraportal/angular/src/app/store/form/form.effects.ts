// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as FormActions from './form.actions';
import { FormFieldRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/field/form-field-rest-controller.impl';
import { FormRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/form-rest-controller.impl';

@Injectable()
export class FormEffects {

    constructor(private actions$: Actions, private formFieldRestController: FormFieldRestControllerImpl, private formRestController: FormRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.findById),
            mergeMap(({ id }) => this.formFieldRestController.findById(id).pipe(
                map( results => FormActions.findByIdSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.save),
            mergeMap(({ formField }) => this.formFieldRestController.save(formField).pipe(
                map( results => FormActions.saveSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.remove),
            mergeMap(({ id }) => this.formFieldRestController.remove(id).pipe(
                map( results => FormActions.removeSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.getAll),
            mergeMap(() => this.formFieldRestController.getAll().pipe(
                map( results => FormActions.getAllSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.formFieldRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => FormActions.getAllPagedSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.findById),
            mergeMap(({ id }) => this.formRestController.findById(id).pipe(
                map( results => FormActions.findByIdSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.save),
            mergeMap(({ formVO }) => this.formRestController.save(formVO).pipe(
                map( results => FormActions.saveSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.remove),
            mergeMap(({ id }) => this.formRestController.remove(id).pipe(
                map( results => FormActions.removeSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.getAll),
            mergeMap(() => this.formRestController.getAll().pipe(
                map( results => FormActions.getAllSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.search),
            mergeMap(({ criteria }) => this.formRestController.search(criteria).pipe(
                map( results => FormActions.searchSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(FormActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.formRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => FormActions.getAllPagedSuccess({results})),
                catchError(({error}) => [FormActions.formFailure(error)])
            ))
        )
    );

}
