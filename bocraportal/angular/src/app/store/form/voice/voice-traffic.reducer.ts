// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { VoiceTrafficVO } from '@app/model/bw/org/bocra/portal/form/voice/voice-traffic-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import * as VoiceTrafficActions from './voice-traffic.action';

export const voiceTrafficKey = "voiceTraffic";

export interface VoiceTrafficState {
    voiceTraffic: VoiceTrafficVO;
    voiceTraffics: VoiceTrafficVO[];
    searchCriteria: FormCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: VoiceTrafficState = {
    voiceTraffic: new VoiceTrafficVO,
    voiceTraffics: [],
    searchCriteria: new FormCriteria,
    loading: false,
    id: 0,
    error: null
};

export const voiceTrafficReducer = createReducer(
    initialState,
    on(VoiceTrafficActions.saveVoiceTraffic, (state, action) => ({
        ...state,
        voiceTraffic: action.voiceTraffic
    })),
    on(VoiceTrafficActions.saveVoiceTrafficSuccess, (state, action) => ({
        ...state,
        voiceTraffic: action.voiceTraffic,
        voiceTraffics: [...state.voiceTraffics, action.voiceTraffic]
    })),
    on(VoiceTrafficActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(VoiceTrafficActions.findByIdSuccess, (state, action) => ({
        ...state,
        voiceTraffic: action.voiceTraffic,
        voiceTraffics: [...state.voiceTraffics, action.voiceTraffic]
    })),
    on(VoiceTrafficActions.loadAll, (state, action) => ({
        ...state
    })),
    on(VoiceTrafficActions.loadAllSuccess, (state, action) => ({
        ...state,
        voiceTraffic: new VoiceTrafficVO,
        voiceTraffics: action.voiceTraffics
    })),
    on(VoiceTrafficActions.searchVoiceTraffic, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(VoiceTrafficActions.searchVoiceTrafficSuccess, (state, action) => ({
        ...state,
        voiceTraffic: new VoiceTrafficVO,
        searchCriteria: new FormCriteria,
        voiceTraffics: action.voiceTraffics
    })),
    on(VoiceTrafficActions.reset, (state) => ({
      ...state,
      voiceTraffic: new VoiceTrafficVO,
      searchCriteria: new FormCriteria,
      voiceTraffics: []
    })),
    on(VoiceTrafficActions.voiceTrafficActionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const voiceTrafficFeature = createFeature({
    name: voiceTrafficKey,
    reducer: voiceTrafficReducer
});
