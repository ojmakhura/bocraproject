// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { SMSTrafficVO } from '@app/model/bw/org/bocra/portal/form/sms/smsTraffic-traffic-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import * as SMSTrafficActions from './sms-traffic.action';

export const smsTrafficKey = "smsTraffic";

export interface SMSTrafficState {
    smsTraffic: SMSTrafficVO;
    smsTraffics: SMSTrafficVO[];
    searchCriteria: FormCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: SMSTrafficState = {
    smsTraffic: new SMSTrafficVO,
    smsTraffics: [],
    searchCriteria: new FormCriteria,
    loading: false,
    id: 0,
    error: null
};

export const smsTrafficReducer = createReducer(
    initialState,
    on(SMSTrafficActions.saveSMSTraffic, (state, action) => ({
        ...state,
        smsTraffic: action.smsTraffic
    })),
    on(SMSTrafficActions.saveSMSTrafficSuccess, (state, action) => ({
        ...state,
        smsTraffic: action.smsTraffic,
        smsTraffics: [...state.smsTraffics, action.smsTraffic]
    })),
    on(SMSTrafficActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(SMSTrafficActions.findByIdSuccess, (state, action) => ({
        ...state,
        smsTraffic: action.smsTraffic,
        smsTraffics: [...state.smsTraffics, action.smsTraffic]
    })),
    on(SMSTrafficActions.loadAll, (state, action) => ({
        ...state
    })),
    on(SMSTrafficActions.loadAllSuccess, (state, action) => ({
        ...state,
        smsTraffic: new SMSTrafficVO,
        smsTraffics: action.smsTraffics
    })),
    on(SMSTrafficActions.searchSMSTraffic, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(SMSTrafficActions.searchSMSTrafficsSuccess, (state, action) => ({
        ...state,
        smsTraffic: new SMSTrafficVO,
        searchCriteria: new FormCriteria,
        smsTraffics: action.smsTraffics
    })),
    on(SMSTrafficActions.reset, (state) => ({
      ...state,
      smsTraffic: new SMSTrafficVO,
      searchCriteria: new FormCriteria,
      smsTraffics: []
    })),
    on(SMSTrafficActions.smsTrafficActionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const smsTrafficFeature = createFeature({
    name: smsTrafficKey,
    reducer: smsTrafficReducer
});
