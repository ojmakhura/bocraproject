// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { SimRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/sim/sim-rest-controller.impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as SimActions from './sim.action';

@Injectable()
export class SimEffects {
  constructor(private actions$: Actions, private simService: SimRestControllerImpl) {}

  saveSim$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SimActions.saveSim),
      mergeMap(({ sim }) =>
        this.simService.save(sim).pipe(
          map((sim) => SimActions.saveSimSuccess({ sim })),
          catchError(({ error }) => [SimActions.simActionFailure(error)])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SimActions.findById),
      mergeMap(({ id }) =>
        this.simService.findById(id).pipe(
          map((sim) => SimActions.findByIdSuccess({ sim })),
          catchError(({ error }) => [SimActions.simActionFailure(error)])
        )
      )
    )
  );

  loadAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SimActions.loadAll),
      mergeMap(() =>
        this.simService.getAll().pipe(
          map((sims) => SimActions.loadAllSuccess({ sims })),
          catchError(({ error }) => [SimActions.simActionFailure(error)])
        )
      )
    )
  );

  searchSims$ = createEffect(() =>
    this.actions$.pipe(
        ofType(SimActions.searchSims),
        mergeMap(({searchCriteria}) => 
            this.simService.searchSims(searchCriteria).pipe(
                map((sims) => SimActions.searchSimsSuccess({sims})),
                catchError(({ error }) => [SimActions.simActionFailure(error)])
            )
        )
    )
  );
}
