// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { SimVO } from '@app/model/bw/org/bocra/portal/sim/sim-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import * as SimActions from './sim.action';

export const simKey = "sim";

export interface SimState {
    sim: SimVO;
    sims: SimVO[];
    searchCriteria: FormCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: SimState = {
    sim: new SimVO,
    sims: [],
    searchCriteria: new FormCriteria,
    loading: false,
    id: 0,
    error: null
};

export const simReducer = createReducer(
    initialState,
    on(SimActions.saveSim, (state, action) => ({
        ...state,
        sim: action.sim
    })),
    on(SimActions.saveSimSuccess, (state, action) => ({
        ...state,
        sim: action.sim,
        sims: [...state.sims, action.sim]
    })),
    on(SimActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(SimActions.findByIdSuccess, (state, action) => ({
        ...state,
        sim: action.sim,
        sims: [...state.sims, action.sim]
    })),
    on(SimActions.loadAll, (state, action) => ({
        ...state
    })),
    on(SimActions.loadAllSuccess, (state, action) => ({
        ...state,
        sim: new SimVO,
        sims: action.sims
    })),
    on(SimActions.searchSims, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(SimActions.searchSimsSuccess, (state, action) => ({
        ...state,
        sim: new SimVO,
        searchCriteria: new FormCriteria,
        sims: action.sims
    })),
    on(SimActions.reset, (state) => ({
      ...state,
      sim: new SimVO,
      searchCriteria: new FormCriteria,
      sims: []
    })),
    on(SimActions.simActionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const simFeature = createFeature({
    name: simKey,
    reducer: simReducer
});
