// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { FormFieldVO } from '@app/model/bw/org/bocra/portal/form/field/form-field-vo';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';

export enum FormActionType {
    FIND_BY_ID = '[Form] Find By Id',
    FIND_BY_ID_SUCCESS = '[Form] Find By Id Success',
    SAVE = '[Form] Save',
    SAVE_SUCCESS = '[Form] Save Success',
    REMOVE = '[Form] Remove',
    REMOVE_SUCCESS = '[Form] Remove Success',
    GET_ALL = '[Form] Get All',
    GET_ALL_SUCCESS = '[Form] Get All Success',
    GET_ALL_PAGED = '[Form] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[Form] Get All Paged Success',
    FIND_BY_ID = '[Form] Find By Id',
    FIND_BY_ID_SUCCESS = '[Form] Find By Id Success',
    SAVE = '[Form] Save',
    SAVE_SUCCESS = '[Form] Save Success',
    REMOVE = '[Form] Remove',
    REMOVE_SUCCESS = '[Form] Remove Success',
    GET_ALL = '[Form] Get All',
    GET_ALL_SUCCESS = '[Form] Get All Success',
    SEARCH = '[Form] Search',
    SEARCH_SUCCESS = '[Form] Search Success',
    GET_ALL_PAGED = '[Form] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[Form] Get All Paged Success',
    FORM_RESET = '[Form] Form Reset',
    FORM_FAILURE = '[Form] Form Action Failure',
    FORM_LOADING = '[Form] Form Loading'
}

export const findById = createAction(
    FormActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.field.FormFieldRestController.findById]
export const findByIdSuccess = createAction(
    FormActionType.FIND_BY_ID_SUCCESS,
    props<{ formFieldVO | any: FormFieldVO | any, success: boolean}>()
);

export const save = createAction(
    FormActionType.SAVE,
    props<{ formField: FormFieldVO | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.field.FormFieldRestController.save]
export const saveSuccess = createAction(
    FormActionType.SAVE_SUCCESS,
    props<{ formFieldVO | any: FormFieldVO | any, success: boolean}>()
);

export const remove = createAction(
    FormActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.field.FormFieldRestController.remove]
export const removeSuccess = createAction(
    FormActionType.REMOVE_SUCCESS,
    props<{ boolean | any: boolean | any, success: boolean}>()
);

export const getAll = createAction(
    FormActionType.GET_ALL,
    props<{  loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.field.FormFieldRestController.getAll]
export const getAllSuccess = createAction(
    FormActionType.GET_ALL_SUCCESS,
    props<{ formFieldVO[] | any: FormFieldVO[] | any, success: boolean}>()
);

export const getAllPaged = createAction(
    FormActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.field.FormFieldRestController.getAllPaged]
export const getAllPagedSuccess = createAction(
    FormActionType.GET_ALL_PAGED_SUCCESS,
    props<{ formFieldVO[] | any: FormFieldVO[] | any, success: boolean}>()
);

export const findById = createAction(
    FormActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.findById]
export const findByIdSuccess = createAction(
    FormActionType.FIND_BY_ID_SUCCESS,
    props<{ formVO | any: FormVO | any, success: boolean}>()
);

export const save = createAction(
    FormActionType.SAVE,
    props<{ formVO: FormVO | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.save]
export const saveSuccess = createAction(
    FormActionType.SAVE_SUCCESS,
    props<{ formVO | any: FormVO | any, success: boolean}>()
);

export const remove = createAction(
    FormActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.remove]
export const removeSuccess = createAction(
    FormActionType.REMOVE_SUCCESS,
    props<{ boolean | any: boolean | any, success: boolean}>()
);

export const getAll = createAction(
    FormActionType.GET_ALL,
    props<{  loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.getAll]
export const getAllSuccess = createAction(
    FormActionType.GET_ALL_SUCCESS,
    props<{ formVO[] | any: FormVO[] | any, success: boolean}>()
);

export const search = createAction(
    FormActionType.SEARCH,
    props<{ criteria: FormCriteria | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.search]
export const searchSuccess = createAction(
    FormActionType.SEARCH_SUCCESS,
    props<{ formVO[] | any: FormVO[] | any, success: boolean}>()
);

export const getAllPaged = createAction(
    FormActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.FormRestController.getAllPaged]
export const getAllPagedSuccess = createAction(
    FormActionType.GET_ALL_PAGED_SUCCESS,
    props<{ formVO[] | any: FormVO[] | any, success: boolean}>()
);


export const formReset = createAction(FormActionType.FORM_RESET);

export const formLoading = createAction(
    FormActionType.FORM_LOADING,
    props<{ loading: boolean, success: boolean, error: any }>()
);

export const formFailure = createAction(
    FormActionType.FORM_FAILURE,
    props<{ error: any, success: boolean, loading: boolean }>()
);
