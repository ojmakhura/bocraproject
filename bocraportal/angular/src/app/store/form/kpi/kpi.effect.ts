// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { KpiRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/kpi/kpi-rest-controller.impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as KpiActions from './kpi.action';

@Injectable()
export class KpiEffects {
  constructor(private actions$: Actions, private kpiService: KpiRestControllerImpl) {}

  saveKpi$ = createEffect(() =>
    this.actions$.pipe(
      ofType(KpiActions.saveKpi),
      mergeMap(({ kpi }) =>
        this.kpiService.save(kpi).pipe(
          map((kpi) => KpiActions.saveKpiSuccess({ kpi })),
          catchError(({ error }) => [KpiActions.kpiActionFailure(error)])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(KpiActions.findById),
      mergeMap(({ id }) =>
        this.kpiService.findById(id).pipe(
          map((kpi) => KpiActions.findByIdSuccess({ kpi })),
          catchError(({ error }) => [KpiActions.kpiActionFailure(error)])
        )
      )
    )
  );

  loadAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(KpiActions.loadAll),
      mergeMap(() =>
        this.kpiService.getAll().pipe(
          map((kpis) => KpiActions.loadAllSuccess({ kpis })),
          catchError(({ error }) => [KpiActions.kpiActionFailure(error)])
        )
      )
    )
  );

  searchKpis$ = createEffect(() =>
    this.actions$.pipe(
        ofType(KpiActions.searchKpis),
        mergeMap(({searchCriteria}) => 
            this.kpiService.searchKpis(searchCriteria).pipe(
                map((kpis) => KpiActions.searchKpisSuccess({kpis})),
                catchError(({ error }) => [KpiActions.kpiActionFailure(error)])
            )
        )
    )
  );
}
