// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as FormSubmissionActions from './form-submission.actions';
import {formSubmissionKey, initialState} from './form-submission.state';

export const formSubmissionReducer = createReducer(
    initialState,
    on(FormSubmissionActions.findByIdSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.saveSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.removeSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.getAllSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.searchSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(FormSubmissionActions.formSubmissionReset, (state) => ({
      ...state,
        formSubmission: null, 
        criteria: null, 
        formSubmissions: [], 
        id: null, 
        loading: false,
        success: false,
        error: null
    })),
    on(FormSubmissionActions.formSubmissionFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: action.error
    })),
    on(FormSubmissionActions.formSubmissionLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    })),
    on(FormSubmissionActions.formSubmissionSuccess, (state, action) => ({
        ...state,
        loading: action.loading,
        success: action.success,
        error: action.error
    }))
);

export const formSubmissionFeature = createFeature({
    name: formSubmissionKey,
    reducer: formSubmissionReducer
});
