// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { FormSubmissionCriteria } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-criteria';
import { FormSubmissionVO } from '@app/model/bw/org/bocra/portal/form/submission/form-submission-vo';

export enum FormSubmissionActionType {
    FIND_BY_ID = '[FormSubmission] Find By Id',
    FIND_BY_ID_SUCCESS = '[FormSubmission] Find By Id Success',
    SAVE = '[FormSubmission] Save',
    SAVE_SUCCESS = '[FormSubmission] Save Success',
    REMOVE = '[FormSubmission] Remove',
    REMOVE_SUCCESS = '[FormSubmission] Remove Success',
    GET_ALL = '[FormSubmission] Get All',
    GET_ALL_SUCCESS = '[FormSubmission] Get All Success',
    SEARCH = '[FormSubmission] Search',
    SEARCH_SUCCESS = '[FormSubmission] Search Success',
    GET_ALL_PAGED = '[FormSubmission] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[FormSubmission] Get All Paged Success',
    FORM_SUBMISSION_RESET = '[FormSubmission] FormSubmission Reset',
    FORM_SUBMISSION_FAILURE = '[FormSubmission] FormSubmission Action Failure',
    FORM_SUBMISSION_LOADING = '[FormSubmission] FormSubmission Loading'
}

export const findById = createAction(
    FormSubmissionActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.findById]
export const findByIdSuccess = createAction(
    FormSubmissionActionType.FIND_BY_ID_SUCCESS,
    props<{ formSubmissionVO | any: FormSubmissionVO | any, success: boolean}>()
);

export const save = createAction(
    FormSubmissionActionType.SAVE,
    props<{ formSubmissionVO: FormSubmissionVO | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.save]
export const saveSuccess = createAction(
    FormSubmissionActionType.SAVE_SUCCESS,
    props<{ formSubmissionVO | any: FormSubmissionVO | any, success: boolean}>()
);

export const remove = createAction(
    FormSubmissionActionType.REMOVE,
    props<{ id: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.remove]
export const removeSuccess = createAction(
    FormSubmissionActionType.REMOVE_SUCCESS,
    props<{ boolean | any: boolean | any, success: boolean}>()
);

export const getAll = createAction(
    FormSubmissionActionType.GET_ALL,
    props<{  loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.getAll]
export const getAllSuccess = createAction(
    FormSubmissionActionType.GET_ALL_SUCCESS,
    props<{ formSubmissionVO[] | any: FormSubmissionVO[] | any, success: boolean}>()
);

export const search = createAction(
    FormSubmissionActionType.SEARCH,
    props<{ criteria: FormSubmissionCriteria | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.search]
export const searchSuccess = createAction(
    FormSubmissionActionType.SEARCH_SUCCESS,
    props<{ formSubmissionVO[] | any: FormSubmissionVO[] | any, success: boolean}>()
);

export const getAllPaged = createAction(
    FormSubmissionActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean }>()
);

// org.andromda.cartridges.angular.metafacades.AngularServiceOperationLogicImpl[bw.org.bocra.portal.form.submission.SubmissionRestController.getAllPaged]
export const getAllPagedSuccess = createAction(
    FormSubmissionActionType.GET_ALL_PAGED_SUCCESS,
    props<{ formSubmissionVO[] | any: FormSubmissionVO[] | any, success: boolean}>()
);


export const formSubmissionReset = createAction(FormSubmissionActionType.FORM_SUBMISSION_RESET);

export const formSubmissionLoading = createAction(
    FormSubmissionActionType.FORM_SUBMISSION_LOADING,
    props<{ loading: boolean, success: boolean, error: any }>()
);

export const formSubmissionFailure = createAction(
    FormSubmissionActionType.FORM_SUBMISSION_FAILURE,
    props<{ error: any, success: boolean, loading: boolean }>()
);
