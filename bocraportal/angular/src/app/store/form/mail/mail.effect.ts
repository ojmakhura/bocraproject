// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { MailRestControllerImpl } from '@app/service/bw/org/bocra/portal/form/mail/mail-rest-controller.impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as MailActions from './mail.action';

@Injectable()
export class MailEffects {
  constructor(private actions$: Actions, private mailService: MailRestControllerImpl) {}

  saveMail$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MailActions.saveMail),
      mergeMap(({ mail }) =>
        this.mailService.save(mail).pipe(
          map((mail) => MailActions.saveMailSuccess({ mail })),
          catchError(({ error }) => [MailActions.mailActionFailure(error)])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MailActions.findById),
      mergeMap(({ id }) =>
        this.mailService.findById(id).pipe(
          map((mail) => MailActions.findByIdSuccess({ mail })),
          catchError(({ error }) => [MailActions.mailActionFailure(error)])
        )
      )
    )
  );

  loadAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MailActions.loadAll),
      mergeMap(() =>
        this.mailService.getAll().pipe(
          map((mails) => MailActions.loadAllSuccess({ mails })),
          catchError(({ error }) => [MailActions.mailActionFailure(error)])
        )
      )
    )
  );

  searchMails$ = createEffect(() =>
    this.actions$.pipe(
        ofType(MailActions.searchMails),
        mergeMap(({searchCriteria}) => 
            this.mailService.searchMails(searchCriteria).pipe(
                map((mails) => MailActions.searchMailsSuccess({mails})),
                catchError(({ error }) => [MailActions.mailActionFailure(error)])
            )
        )
    )
  );
}
