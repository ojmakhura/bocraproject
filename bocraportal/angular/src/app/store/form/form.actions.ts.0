// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { FormVO } from '@app/model/bw/org/bocra/portal/form/form-vo';
import { FormCriteria } from '@app/model/bw/org/bocra/portal/form/form-criteria';
import { FormFieldVO } from '@app/model/bw/org/bocra/portal/form/field/form-field-vo';

export enum FormActionType {
    FIND_FORM_BY_ID = '[Form] Find Form By Id',
    FIND_FORM_BY_ID_SUCCESS = '[Form] Form Find By Id Success',
    SAVE_FORM = '[Form] Save Form',
    SAVE_FORM_SUCCESS = '[Form] Save Form Success',
    REMOVE_FORM = '[Form] Remove Form',
    REMOVE_FORM_SUCCESS = '[Form] Remove Form Success',
    GET_ALL_FORMS = '[Form] Get All Forms',
    GET_ALL_FORMS_SUCCESS = '[Form] Get All Forms Success',
    SEARCH_FORMS = '[Form] Search Forms',
    SEARCH_FORMS_SUCCESS = '[Form] Search Forms Success',
    GET_ALL_FORMS_PAGED = '[Form] Get All Forms Paged',
    GET_ALL_FORMS_PAGED_SUCCESS = '[Form] Get All Forms Paged Success',
    FIND_FIELD_BY_ID = '[Form] Find Field By Id',
    FIND_FIELD_BY_ID_SUCCESS = '[Form] Find Field By Id Success',
    SAVE_FIELD = '[Form] Save Field',
    SAVE_FIELD_SUCCESS = '[Form] Save Field Success',
    REMOVE_FIELD = '[Form] Remove Field',
    REMOVE_FIELD_SUCCESS = '[Form] Remove Field Success',
    GET_ALL_FIELDS = '[Form] Get All Fields',
    GET_ALL_FIELDS_SUCCESS = '[Form] Get All Fields Success',
    GET_ALL_FIELDS_PAGED = '[Form] Get All Fields Paged',
    GET_ALL_FIELDS_PAGED_SUCCESS = '[Form] Get All Fields Paged Success',
    FORM_LOADING = '[Form] Form Loading',
    FORM_SUCCESS = '[Form] Form Success',
    FORM_RESET = '[Form] Form Reset',
    FORM_FAILURE = '[Form] Form Action Failure'
}

export const findFormById = createAction(
    FormActionType.FIND_FORM_BY_ID,
    props<{ id: number | any  }>()
);

export const findFormByIdSuccess = createAction(
    FormActionType.FIND_FORM_BY_ID_SUCCESS,
    props<{ form: FormVO | any }>()
);

export const saveForm = createAction(
    FormActionType.SAVE_FORM,
    props<{ form: FormVO | any  }>()
);

export const saveFormSuccess = createAction(
    FormActionType.SAVE_FORM_SUCCESS,
    props<{ form: FormVO | any }>()
);

export const removeForm = createAction(
    FormActionType.REMOVE_FORM,
    props<{ id: number | any  }>()
);

export const removeFormSuccess = createAction(
    FormActionType.REMOVE_FORM_SUCCESS,
    props<{ removed: boolean | any }>()
);

export const getAllForms = createAction(
    FormActionType.GET_ALL_FORMS);

export const getAllFormsSuccess = createAction(
    FormActionType.GET_ALL_FORMS_SUCCESS,
    props<{ forms: FormVO[] | any }>()
);

export const searchForms = createAction(
    FormActionType.SEARCH_FORMS,
    props<{ criteria: FormCriteria | any  }>()
);

export const searchFormsSuccess = createAction(
    FormActionType.SEARCH_FORMS_SUCCESS,
    props<{ forms: FormVO[] | any }>()
);

export const getAllFormsPaged = createAction(
    FormActionType.GET_ALL_FORMS_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any  }>()
);

export const getAllFormsPagedSuccess = createAction(
    FormActionType.GET_ALL_FORMS_PAGED_SUCCESS,
    props<{ forms: FormVO[] | any }>()
);

export const findFieldById = createAction(
    FormActionType.FIND_FIELD_BY_ID,
    props<{ id: number | any  }>()
);

export const findFieldByIdSuccess = createAction(
    FormActionType.FIND_FIELD_BY_ID_SUCCESS,
    props<{ formField: FormFieldVO | any }>()
);

export const saveField = createAction(
    FormActionType.SAVE_FIELD,
    props<{ formField: FormFieldVO | any  }>()
);

export const saveFieldSuccess = createAction(
    FormActionType.SAVE_FIELD_SUCCESS,
    props<{ formField: FormFieldVO | any, success: boolean, loading: boolean, error: any }>()
);

export const removeField = createAction(
    FormActionType.REMOVE_FIELD,
    props<{ id: number | any  }>()
);

export const removeFieldSuccess = createAction(
    FormActionType.REMOVE_FIELD_SUCCESS,
    props<{ removed: boolean | any, success: boolean, loading: boolean, error: any }>()
);

export const getAllFields = createAction(
    FormActionType.GET_ALL_FIELDS);

export const getAllFieldsSuccess = createAction(
    FormActionType.GET_ALL_FIELDS_SUCCESS,
    props<{ formFields: FormFieldVO[] | any, success: boolean, loading: boolean, error: any }>()
);

export const getAllFieldsPaged = createAction(
    FormActionType.GET_ALL_FIELDS_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any  }>()
);

export const getAllFieldsPagedSuccess = createAction(
    FormActionType.GET_ALL_FIELDS_PAGED_SUCCESS,
    props<{ formFields: FormFieldVO[] | any, success: boolean, loading: boolean, error: any }>()
);

export const formReset = createAction(FormActionType.FORM_RESET);

export const formLoading = createAction(
    FormActionType.FORM_LOADING,
    props<{ error: any, success: boolean, loading: boolean }>()
);

export const formSuccess = createAction(
    FormActionType.FORM_SUCCESS,
    props<{ error: any, success: boolean, loading: boolean }>()
);

export const formFailure = createAction(
    FormActionType.FORM_FAILURE,
    props<{ error: any }>()
);
