// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as PeriodActions from './period.actions';
import { PeriodRestController } from '@app/service/bw/org/bocra/portal/period/period-rest-controller';

@Injectable()
export class PeriodEffects {

    constructor(private actions$: Actions, private periodRestController: PeriodRestController) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.findById),
            mergeMap(({ id }) => this.periodRestController.findById(id).pipe(
                map( period => PeriodActions.findByIdSuccess({
                    period,
                    messages: [`Period ${period.periodName} found.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.save),
            mergeMap(({ period }) => this.periodRestController.save(period).pipe(
                map( period => PeriodActions.saveSuccess({
                    period,
                    messages: [`Period ${period.periodName} saved.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.remove),
            mergeMap(({ id }) => this.periodRestController.remove(id).pipe(
                map( removed => PeriodActions.removeSuccess({
                    removed,
                    messages: [`Period ${id} removed.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.getAll),
            mergeMap(() => this.periodRestController.getAll().pipe(
                map( periods => PeriodActions.getAllSuccess({
                    periods,
                    messages: [`${periods.length} periods found.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.search),
            mergeMap(({ criteria }) => this.periodRestController.search(criteria).pipe(
                map( periods => PeriodActions.searchSuccess({
                    periods,
                    messages: [`${periods.length} periods found.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(PeriodActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.periodRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( periods => PeriodActions.getAllPagedSuccess({
                    periods,
                    messages: [`Page ${pageNumber} found with ${periods.length} periods.`],
                    success: true
                })),
                catchError(({error}) => [PeriodActions.periodFailure({messages: [error?.error ? error.error : error]})])
            ))
        )
    );

}
