// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import { PeriodVO } from '@app/model/bw/org/bocra/portal/period/period-vo';
import { PeriodCriteria } from '@app/model/bw/org/bocra/portal/period/period-criteria';
import * as PeriodActions from './period.action';

export const periodKey = "period";

export interface PeriodState {
    period: PeriodVO;
    periods: PeriodVO[];
    searchCriteria: PeriodCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: PeriodState = {
    period: new PeriodVO,
    periods: [],
    searchCriteria: new PeriodCriteria,
    loading: false,
    id: 0,
    error: null
};

export const periodReducer = createReducer(
    initialState,
    on(PeriodActions.savePeriod, (state, action) => ({
        ...state,
        period: action.period
    })),
    on(PeriodActions.savePeriodSuccess, (state, action) => ({
        ...state,
        period: action.period,
        periods: [...state.periods, action.period]
    })),
    on(PeriodActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(PeriodActions.findByIdSuccess, (state, action) => ({
        ...state,
        period: action.period,
        periods: [...state.periods, action.period]
    })),
    on(PeriodActions.loadAll, (state, action) => ({
        ...state
    })),
    on(PeriodActions.loadAllSuccess, (state, action) => ({
        ...state,
        period: new PeriodVO,
        periods: action.periods
    })),
    on(PeriodActions.searchPeriods, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(PeriodActions.searchPeriodsSuccess, (state, action) => ({
        ...state,
        period: new PeriodVO,
        searchCriteria: new PeriodCriteria,
        periods: action.periods
    })),
    on(PeriodActions.reset, (state) => ({
      ...state,
      period: new PeriodVO,
      searchCriteria: new PeriodCriteria,
      periods: []
    })),
    on(PeriodActions.periodActionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const periodFeature = createFeature(
    {
        name: periodKey,
        reducer: periodReducer
    }
);
