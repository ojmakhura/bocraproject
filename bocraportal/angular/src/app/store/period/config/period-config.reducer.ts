// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import { PeriodConfigVO } from '@app/model/bw/org/bocra/portal/period/config/period-config-vo';
import { PeriodConfigCriteria } from '@app/model/bw/org/bocra/portal/period/config/period-config-criteria';
import * as PeriodConfigActions from './period-config.action';

export const periodConfigKey = "periodConfig";

export interface PeriodConfigState {
    periodConfig: PeriodConfigVO;
    periodConfigs: PeriodConfigVO[];
    searchCriteria: PeriodConfigCriteria
    loading: boolean;
    id: number;
    error: any
}

export const initialState: PeriodConfigState = {
    periodConfig: new PeriodConfigVO,
    periodConfigs: [],
    searchCriteria: new PeriodConfigCriteria,
    loading: false,
    id: 0,
    error: null
};

export const periodConfigReducer = createReducer(
    initialState,
    on(PeriodConfigActions.savePeriodConfig, (state, action) => ({
        ...state,
        periodConfig: action.periodConfig
    })),
    on(PeriodConfigActions.savePeriodConfigSuccess, (state, action) => ({
        ...state,
        periodConfig: action.periodConfig,
        periodConfigs: [...state.periodConfigs, action.periodConfig]
    })),
    on(PeriodConfigActions.findById, (state, action) => ({
        ...state,
        id: action.id
    })),
    on(PeriodConfigActions.findByIdSuccess, (state, action) => ({
        ...state,
        periodConfig: action.periodConfig,
        periodConfigs: [...state.periodConfigs, action.periodConfig]
    })),
    on(PeriodConfigActions.loadAll, (state, action) => ({
        ...state
    })),
    on(PeriodConfigActions.loadAllSuccess, (state, action) => ({
        ...state,
        periodConfig: new PeriodConfigVO,
        periodConfigs: action.periodConfigs
    })),
    on(PeriodConfigActions.searchPeriodConfigs, (state, action) => ({
        ...state,
        searchCriteria: action.searchCriteria
    })),
    on(PeriodConfigActions.searchPeriodConfigsSuccess, (state, action) => ({
        ...state,
        periodConfig: new PeriodConfigVO,
        searchCriteria: new PeriodConfigCriteria,
        periodConfigs: action.periodConfigs
    })),
    on(PeriodConfigActions.reset, (state) => ({
      ...state,
      periodConfig: new PeriodConfigVO,
      searchCriteria: new PeriodConfigCriteria,
      periodConfigs: []
    })),
    on(PeriodConfigActions.periodConfigActionFailure, (state, action) => ({
        ...state,
        error: action.error
    }))
);

export const periodConfigFeature = createFeature({
        name: periodConfigKey,
        reducer: periodConfigReducer
});
