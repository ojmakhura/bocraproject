// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { PeriodRestControllerImpl } from '@app/service/bw/org/bocra/portal/period/period-rest-controller.impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as PeriodActions from './period.action';

@Injectable()
export class PeriodEffects {
  constructor(private actions$: Actions, private periodService: PeriodRestControllerImpl) {}

  savePeriod$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodActions.savePeriod),
      mergeMap(({ period }) =>
        this.periodService.save(period).pipe(
          map((period) => PeriodActions.savePeriodSuccess({ period })),
          catchError(({ error }) => [PeriodActions.periodActionFailure(error)])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodActions.findById),
      mergeMap(({ id }) =>
        this.periodService.findById(id).pipe(
          map((period) => PeriodActions.findByIdSuccess({ period })),
          catchError(({ error }) => [PeriodActions.periodActionFailure(error)])
        )
      )
    )
  );

  loadAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodActions.loadAll),
      mergeMap(() =>
        this.periodService.getAll().pipe(
          map((periods) => PeriodActions.loadAllSuccess({ periods })),
          catchError(({ error }) => [PeriodActions.periodActionFailure(error)])
        )
      )
    )
  );

  searchPeriods$ = createEffect(() =>
    this.actions$.pipe(
        ofType(PeriodActions.searchPeriods),
        mergeMap(({searchCriteria}) => 
            this.periodService.search(searchCriteria).pipe(
                map((periods) => PeriodActions.searchPeriodsSuccess({periods})),
                catchError(({ error }) => [PeriodActions.periodActionFailure(error)])
            )
        )
    )
  );
}
