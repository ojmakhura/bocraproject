// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { PeriodConfigRestControllerImpl } from '@app/service/bw/org/bocra/portal/period/config/period-config-rest-controller.impl';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs';
import * as PeriodConfigActions from './period-config.action';

@Injectable()
export class PeriodConfigEffects {
  constructor(private actions$: Actions, private periodConfigService: PeriodConfigRestControllerImpl) {}

  savePeriodConfig$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodConfigActions.savePeriodConfig),
      mergeMap(({ periodConfig }) =>
        this.periodConfigService.save(periodConfig).pipe(
          map((periodConfig) => PeriodConfigActions.savePeriodConfigSuccess({ periodConfig })),
          catchError(({ error }) => [PeriodConfigActions.periodConfigActionFailure(error)])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodConfigActions.findById),
      mergeMap(({ id }) =>
        this.periodConfigService.findById(id).pipe(
          map((periodConfig) => PeriodConfigActions.findByIdSuccess({ periodConfig })),
          catchError(({ error }) => [PeriodConfigActions.periodConfigActionFailure(error)])
        )
      )
    )
  );

  loadAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(PeriodConfigActions.loadAll),
      mergeMap(() =>
        this.periodConfigService.getAll().pipe(
          map((periodConfigs) => PeriodConfigActions.loadAllSuccess({ periodConfigs })),
          catchError(({ error }) => [PeriodConfigActions.periodConfigActionFailure(error)])
        )
      )
    )
  );

  searchPeriodConfigs$ = createEffect(() =>
    this.actions$.pipe(
        ofType(PeriodConfigActions.searchPeriodConfigs),
        mergeMap(({searchCriteria}) => 
            this.periodConfigService.searchPeriodConfigs(searchCriteria).pipe(
                map((periodConfigs) => PeriodConfigActions.searchPeriodConfigsSuccess({periodConfigs})),
                catchError(({ error }) => [PeriodConfigActions.periodConfigActionFailure(error)])
            )
        )
    )
  );
}
