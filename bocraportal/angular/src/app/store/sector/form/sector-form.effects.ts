// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as SectorFormActions from './sector-form.actions';
import { SectorFormRestController } from '@app/service/bw/org/bocra/portal/sector/form/sector-form-rest-controller';

@Injectable()
export class SectorFormEffects {
  documentRestController: any;

  constructor(private actions$: Actions, private sectorFormRestController: SectorFormRestController) {}

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.findById),
      mergeMap(({ id }) =>
        this.sectorFormRestController.findById(id).pipe(
          map((sectorForm) =>
            SectorFormActions.findByIdSuccess({
              sectorForm,
              messages: [],
              success: false,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findBySector$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.findBySector),
      mergeMap(({ sectorId }) =>
        this.sectorFormRestController.findBySector(sectorId).pipe(
          map((sectorForms) =>
            SectorFormActions.findByFormSuccess({
              sectorForms,
              messages: [`${sectorForms.length} sector forms found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  findByForm$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.findByForm),
      mergeMap(({ formId }) =>
        this.sectorFormRestController.findByForm(formId).pipe(
          map((sectorForms) =>
            SectorFormActions.findByFormSuccess({
              sectorForms,
              messages: [`${sectorForms.length} sector forms found.`],
              success: false,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  create$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.create),
      mergeMap(({ sectorId, formId }) =>
        this.sectorFormRestController.create(sectorId, formId).pipe(
          map((sectorForm) =>
            SectorFormActions.createSuccess({
              sectorForm,
              messages: [`Sector form created.`],
              success: true
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateSector$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.updateSector),
      mergeMap(({ id, sectorId }) =>
        this.sectorFormRestController.updateSector(id, sectorId).pipe(
          map((sectorForm) =>
            SectorFormActions.updateSuccess({
              sectorForm,
              messages: [`Sector form created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  updateForm$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.updateForm),
      mergeMap(({ id, formId }) =>
        this.sectorFormRestController.updateForm(id, formId).pipe(
          map((sectorForm) =>
            SectorFormActions.updateSuccess({
              sectorForm,
              messages: [`Sector form created.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  remove$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.remove),
      mergeMap(({ id }) =>
        this.sectorFormRestController.remove(id).pipe(
          map((removed) =>
            SectorFormActions.removeSuccess({
              removed,
              messages: [`Sector form ${id} removed.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );

  getAll$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SectorFormActions.getAll),
      mergeMap(() =>
        this.sectorFormRestController.getAll().pipe(
          map((sectorForms) =>
            SectorFormActions.getAllSuccess({
              sectorForms,
              messages: [`${sectorForms.length} sector forms found.`],
              success: true,
            })
          ),
          catchError(({ error }) => [
            SectorFormActions.sectorFormFailure({ messages: [error?.error ? error.error : error] }),
          ])
        )
      )
    )
  );
}
