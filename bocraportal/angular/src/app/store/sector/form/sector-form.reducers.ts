// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as SectorFormActions from './sector-form.actions';
import { sectorFormKey, initialState } from './sector-form.state';

export const sectorFormReducer = createReducer(
  initialState,
  on(SectorFormActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.findByIdSuccess, (state, action) => ({
    ...state,
    sectorForm: action.sectorForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.findBySector, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.findBySectorSuccess, (state, action) => ({
    ...state,
    sectorForms: action.sectorForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.findByForm, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.findByFormSuccess, (state, action) => ({
    ...state,
    sectorForms: action.sectorForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.create, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.createSuccess, (state, action) => ({
    ...state,
    sectorForm: action.sectorForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.updateForm, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.updateSector, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.updateSuccess, (state, action) => ({
    ...state,
    sectorForm: action.sectorForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.removeSuccess, (state, action) => ({
    ...state,
    removed: action.removed,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(SectorFormActions.getAllSuccess, (state, action) => ({
    ...state,
    sectorForms: action.sectorForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(SectorFormActions.sectorFormReset, (state) => ({
    ...state,
    id: null,
    sectorForms: [],
    sectorForm: null,
    sector: undefined,
    form: undefined,
    removed: false,
    success: false,
    loading: false,
    loaderMessage: undefined,
    error: false,
    messages: [],
  })),
  on(SectorFormActions.sectorFormFailure, (state, action) => ({
    ...state,
    messages: action.messages,
    error: true,
    loading: false,
    loaderMessage: undefined,
    success: false,
  }))
);

export const sectorFormFeature = createFeature({
  name: sectorFormKey,
  reducer: sectorFormReducer,
});
