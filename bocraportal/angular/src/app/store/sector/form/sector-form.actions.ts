// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { SectorFormVO } from '@model/bw/org/bocra/portal/sector/form/sector-form-vo';

export enum SectorFormActionType {
  FIND_BY_ID = '[Sector Form] Find By Id',
  FIND_BY_ID_SUCCESS = '[Sector Form] Find By Id Success',
  FIND_BY_SECTOR = '[Sector Form] Find By Sector',
  FIND_BY_SECTOR_SUCCESS = '[Sector Form] Find By Sector Success',
  FIND_BY_FORM = '[Sector Form] Find By Form',
  FIND_BY_FORM_SUCCESS = '[Sector Form] Find By Form Success',
  CREATE = '[Sector Form] Save',
  CREATE_SUCCESS = '[Sector Form] Save Success',
  UPDATE_SECTOR = '[Sector Form] Update Sector',
  UPDATE_FORM = '[Sector Form] Update Form',
  UPDATE_SUCCESS = '[Sector Form] Update Success',
  REMOVE = '[Sector Form] Remove',
  REMOVE_SUCCESS = '[Sector Form] Remove Success',
  GET_ALL = '[Sector Form] Get All',
  GET_ALL_SUCCESS = '[Sector Form] Get All Success',
  SECTOR_FORM_RESET = '[Sector Form] Sector Form Reset',
  SECTOR_FORM_FAILURE = '[Sector Form] Sector Form Action Failure',
  SECTOR_FORM_LOADING = '[Sector Form] Sector Form Loading',
}

export const findById = createAction(SectorFormActionType.FIND_BY_ID, props<{ id: number | any; loading: boolean }>());

export const findByIdSuccess = createAction(
  SectorFormActionType.FIND_BY_ID_SUCCESS,
  props<{ sectorForm: SectorFormVO | any; messages: any[]; success: boolean }>()
);

export const findBySector = createAction(
  SectorFormActionType.FIND_BY_SECTOR,
  props<{ sectorId: number | any; loading: boolean }>()
);

export const findBySectorSuccess = createAction(
  SectorFormActionType.FIND_BY_SECTOR_SUCCESS,
  props<{ sectorForms: SectorFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const findByForm = createAction(
  SectorFormActionType.FIND_BY_FORM,
  props<{ formId: number | any; loading: boolean }>()
);

export const findByFormSuccess = createAction(
  SectorFormActionType.FIND_BY_FORM_SUCCESS,
  props<{ sectorForms: SectorFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const create = createAction(
  SectorFormActionType.CREATE,
  props<{ sectorId: number; formId: number; loading: boolean }>()
);

export const createSuccess = createAction(
  SectorFormActionType.CREATE_SUCCESS,
  props<{ sectorForm: SectorFormVO | any; messages: any[]; success: boolean }>()
);

export const updateSector = createAction(
  SectorFormActionType.UPDATE_SECTOR,
  props<{ id: number; sectorId: number; loading: boolean }>()
);

export const updateForm = createAction(
  SectorFormActionType.UPDATE_FORM,
  props<{ id: number; formId: number; loading: boolean }>()
);

export const updateSuccess = createAction(
  SectorFormActionType.UPDATE_SUCCESS,
  props<{ sectorForm: SectorFormVO | any; messages: any[]; success: boolean }>()
);

export const remove = createAction(SectorFormActionType.REMOVE, props<{ id: number | any; loading: boolean }>());

export const removeSuccess = createAction(
  SectorFormActionType.REMOVE_SUCCESS,
  props<{ removed: boolean | any; messages: any[]; success: boolean }>()
);

export const getAll = createAction(SectorFormActionType.GET_ALL, props<{ loading: boolean }>());

export const getAllSuccess = createAction(
  SectorFormActionType.GET_ALL_SUCCESS,
  props<{ sectorForms: SectorFormVO[] | any[]; messages: any[]; success: boolean }>()
);

export const sectorFormReset = createAction(SectorFormActionType.SECTOR_FORM_RESET);

export const sectorFormLoading = createAction(
  SectorFormActionType.SECTOR_FORM_LOADING,
  props<{ loading: boolean; success: boolean; messages: any[] }>()
);

export const sectorFormFailure = createAction(SectorFormActionType.SECTOR_FORM_FAILURE, props<{ messages: any[] }>());
