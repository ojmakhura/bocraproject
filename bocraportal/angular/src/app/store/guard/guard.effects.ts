// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as GuardActions from './guard.actions';
import { UrlGuardRestControllerImpl } from '@app/service/bw/org/bocra/portal/guard/url-guard-rest-controller.impl';

@Injectable()
export class GuardEffects {

    constructor(private actions$: Actions, private urlGuardRestController: UrlGuardRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.findById),
            mergeMap(({ id }) => this.urlGuardRestController.findById(id).pipe(
                map( urlGuard => GuardActions.findByIdSuccess({urlGuard})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.save),
            mergeMap(({ urlGuard }) => this.urlGuardRestController.save(urlGuard).pipe(
                map( urlGuard => GuardActions.saveSuccess({urlGuard})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.remove),
            mergeMap(({ id }) => this.urlGuardRestController.remove(id).pipe(
                map( removed => GuardActions.removeSuccess({removed})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.getAll),
            mergeMap(() => this.urlGuardRestController.getAll().pipe(
                map( urlGuards => GuardActions.getAllSuccess({urlGuards})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.search),
            mergeMap(({ criteria }) => this.urlGuardRestController.search(criteria).pipe(
                map( urlGuards => GuardActions.searchSuccess({urlGuards})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(GuardActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.urlGuardRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( urlGuards => GuardActions.getAllPagedSuccess({urlGuards})),
                catchError(({error}) => [GuardActions.guardFailure(error)])
            ))
        )
    );

}
