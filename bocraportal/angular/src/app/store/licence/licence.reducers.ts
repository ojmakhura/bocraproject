// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as LicenceActions from './licence.actions';
import {licenceKey, initialState} from './licence.state';

export const licenceReducer = createReducer(
    initialState,
    on(LicenceActions.findByIdSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.saveSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.removeSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getAllSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.searchSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.findByIdSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.saveSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.removeSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getAllSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.searchSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getLicenseeDocumentsSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.getLicenceDocumentsSuccess, (state, action) => ({
        ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: action.loading,
        success: action.success,
        error: action.error
    })),
    on(LicenceActions.licenceReset, (state) => ({
      ...state,
        id: null, 
        licences: [], 
        licence: null, 
        criteria: null, 
        loading: false,
        success: false,
        error: null
    })),
    on(LicenceActions.licenceFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        error: action.error
    })),
    on(LicenceActions.licenceLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    })),
    on(LicenceActions.licenceSuccess, (state, action) => ({
        ...state,
        loading: action.loading,
        success: action.success,
        error: action.error
    }))
);

export const licenceFeature = createFeature({
    name: licenceKey,
    reducer: licenceReducer
});
