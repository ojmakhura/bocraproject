// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenceActions from './licence.actions';
import { LicenseeRestControllerImpl } from '@app/service/bw/org/bocra/portal/licensee/licensee-rest-controller.impl';
import { DocumentRestControllerImpl } from '@app/service/bw/org/bocra/portal/document/document-rest-controller.impl';

@Injectable()
export class LicenceEffects {

    constructor(private actions$: Actions, private licenseeRestController: LicenseeRestControllerImpl, private documentRestController: DocumentRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.findById),
            mergeMap(({ id }) => this.licenseeRestController.findById(id).pipe(
                map( results => LicenceActions.findByIdSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.save),
            mergeMap(({ licensee }) => this.licenseeRestController.save(licensee).pipe(
                map( results => LicenceActions.saveSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.remove),
            mergeMap(({ id }) => this.licenseeRestController.remove(id).pipe(
                map( results => LicenceActions.removeSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getAll),
            mergeMap(() => this.licenseeRestController.getAll().pipe(
                map( results => LicenceActions.getAllSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.search),
            mergeMap(({ criteria }) => this.licenseeRestController.search(criteria).pipe(
                map( results => LicenceActions.searchSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.licenseeRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => LicenceActions.getAllPagedSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.findById),
            mergeMap(({ id }) => this.documentRestController.findById(id).pipe(
                map( results => LicenceActions.findByIdSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.save),
            mergeMap(({ document }) => this.documentRestController.save(document).pipe(
                map( results => LicenceActions.saveSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.remove),
            mergeMap(({ id }) => this.documentRestController.remove(id).pipe(
                map( results => LicenceActions.removeSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getAll),
            mergeMap(() => this.documentRestController.getAll().pipe(
                map( results => LicenceActions.getAllSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.search),
            mergeMap(({ criteria }) => this.documentRestController.search(criteria).pipe(
                map( results => LicenceActions.searchSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.documentRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => LicenceActions.getAllPagedSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getLicenseeDocuments$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getLicenseeDocuments),
            mergeMap(({ licenseeId }) => this.documentRestController.getLicenseeDocuments(licenseeId).pipe(
                map( results => LicenceActions.getLicenseeDocumentsSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

    getLicenceDocuments$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceActions.getLicenceDocuments),
            mergeMap(({ licenceId }) => this.documentRestController.getLicenceDocuments(licenceId).pipe(
                map( results => LicenceActions.getLicenceDocumentsSuccess({results})),
                catchError(({error}) => [LicenceActions.licenceFailure(error)])
            ))
        )
    );

}
