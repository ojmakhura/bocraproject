// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenceTypeActions from './licence-type.actions';
import { LicenceTypeRestControllerImpl } from '@app/service/bw/org/bocra/portal/licence/type/license-type-rest-controller.impl';

@Injectable()
export class LicenceTypeEffects {

    constructor(private actions$: Actions, private LicenceTypeRestController: LicenceTypeRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.findById),
            mergeMap(({ id }) => this.LicenceTypeRestController.findById(id).pipe(
                map( LicenceType => LicenceTypeActions.findByIdSuccess({LicenceType})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.save),
            mergeMap(({ LicenceType }) => this.LicenceTypeRestController.save(LicenceType).pipe(
                map( LicenceType => LicenceTypeActions.saveSuccess({LicenceType})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.remove),
            mergeMap(({ id }) => this.LicenceTypeRestController.remove(id).pipe(
                map( removed => LicenceTypeActions.removeSuccess({removed})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.getAll),
            mergeMap(() => this.LicenceTypeRestController.getAll().pipe(
                map( LicenceTypes => LicenceTypeActions.getAllSuccess({LicenceTypes})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.search),
            mergeMap(({ searchCriteria }) => this.LicenceTypeRestController.search(searchCriteria).pipe(
                map( LicenceTypes => LicenceTypeActions.searchSuccess({LicenceTypes})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.LicenceTypeRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( LicenceTypes => LicenceTypeActions.getAllPagedSuccess({LicenceTypes})),
                catchError(({error}) => [LicenceTypeActions.LicenceTypeFailure(error)])
            ))
        )
    );

}
