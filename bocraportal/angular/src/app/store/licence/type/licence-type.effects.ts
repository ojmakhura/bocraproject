// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LicenceTypeActions from './licence-type.actions';
import { LicenceTypeRestControllerImpl } from '@app/service/bw/org/bocra/portal/licence/type/licence-type-rest-controller.impl';

@Injectable()
export class LicenceTypeEffects {

    constructor(private actions$: Actions, private licenceTypeRestController: LicenceTypeRestControllerImpl) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.findById),
            mergeMap(({ id }) => this.licenceTypeRestController.findById(id).pipe(
                map( results => LicenceTypeActions.findByIdSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.save),
            mergeMap(({ licenseType }) => this.licenceTypeRestController.save(licenseType).pipe(
                map( results => LicenceTypeActions.saveSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.remove),
            mergeMap(({ id }) => this.licenceTypeRestController.remove(id).pipe(
                map( results => LicenceTypeActions.removeSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.getAll),
            mergeMap(() => this.licenceTypeRestController.getAll().pipe(
                map( results => LicenceTypeActions.getAllSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.search),
            mergeMap(({ searchCriteria }) => this.licenceTypeRestController.search(searchCriteria).pipe(
                map( results => LicenceTypeActions.searchSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(LicenceTypeActions.getAllPaged),
            mergeMap(({ pageNumber, pageSize }) => this.licenceTypeRestController.getAllPaged(pageNumber, pageSize).pipe(
                map( results => LicenceTypeActions.getAllPagedSuccess({results})),
                catchError(({error}) => [LicenceTypeActions.licenceTypeFailure(error)])
            ))
        )
    );

}
