// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { createFeature, createReducer, on } from '@ngrx/store';
import * as LicenceTypeFormActions from './licence-type-form.actions';
import { initialState, licenceTypeFormKey } from './licence-type-form.state';

export const licenceTypeFormReducer = createReducer(
  initialState,
  on(LicenceTypeFormActions.findById, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.findByIdSuccess, (state, action) => ({
    ...state,
    licenceTypeForm: action.licenceTypeForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.findByLicenceType, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.findByLicenceTypeSuccess, (state, action) => ({
    ...state,
    licenceTypeForms: action.licenceTypeForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.findByForm, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.findByFormSuccess, (state, action) => ({
    ...state,
    licenceTypeForms: action.licenceTypeForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.create, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.createSuccess, (state, action) => ({
    ...state,
    licenceTypeForm: action.licenceTypeForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.updateLicenceType, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.updateForm, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.updateSuccess, (state, action) => ({
    ...state,
    licenceTypeForm: action.licenceTypeForm,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.remove, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.removeSuccess, (state, action) => ({
    ...state,
    removed: action.removed,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.getAll, (state, action) => ({
    ...state,
    loading: action.loading,
    loaderMessage: action.loaderMessage,
  })),
  on(LicenceTypeFormActions.getAllSuccess, (state, action) => ({
    ...state,
    licenceTypeForms: action.licenceTypeForms,
    loading: false,
    loaderMessage: undefined,
    success: action.success,
    error: false,
    messages: action.messages,
  })),
  on(LicenceTypeFormActions.licenceTypeFormReset, (state) => ({
    ...state,
    id: null,
    licenceTypeForms: [],
    licenceTypeForm: null,
    licenceType: undefined,
    form: undefined,
    removed: false,
    success: false,
    loading: false,
    loaderMessage: undefined,
    error: false,
    messages: [],
  })),
  on(LicenceTypeFormActions.licenceTypeFormFailure, (state, action) => ({
    ...state,
    messages: action.messages,
    error: true,
    loading: false,
    loaderMessage: undefined,
    success: false,
  }))
);

export const licenceTypeFormFeature = createFeature({
  name: licenceTypeFormKey,
  reducer: licenceTypeFormReducer,
});
