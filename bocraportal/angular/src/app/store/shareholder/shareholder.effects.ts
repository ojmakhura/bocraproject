// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as ShareholderActions from './shareholder.actions';
import { ShareholderRestController } from '@app/service/bw/org/bocra/portal/shareholder/shareholder-rest-controller';

@Injectable()
export class ShareholderEffects {

    constructor(private actions$: Actions, private shareholderRestController: ShareholderRestController) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.findById),
            mergeMap(({id}) => this.shareholderRestController.findById(id).pipe(
                map(( shareholder) => ShareholderActions.findByIdSuccess({shareholder, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.save),
            mergeMap(({shareholder}) => this.shareholderRestController.save(shareholder).pipe(
                map(( shareholder) => ShareholderActions.saveSuccess({shareholder, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.remove),
            mergeMap(({id}) => this.shareholderRestController.remove(id).pipe(
                map(( removed) => ShareholderActions.removeSuccess({removed, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.getAll),
            mergeMap(({}) => this.shareholderRestController.getAll().pipe(
                map(( shareholders) => ShareholderActions.getAllSuccess({shareholders, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.search),
            mergeMap(({criteria}) => this.shareholderRestController.search(criteria).pipe(
                map(( shareholders) => ShareholderActions.searchSuccess({shareholders, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(ShareholderActions.getAllPaged),
            mergeMap(({pageNumber, pageSize}) => this.shareholderRestController.getAllPaged(pageNumber, pageSize).pipe(
                map(( shareholders ) => ShareholderActions.getAllPagedSuccess({shareholders, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [ShareholderActions.shareholderFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

}
