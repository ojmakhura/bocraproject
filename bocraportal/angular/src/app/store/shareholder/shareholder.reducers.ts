// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as ShareholderActions from './shareholder.actions';
import {shareholderKey, initialState} from './shareholder.state';

export const shareholderReducer = createReducer(
    initialState,
    on(ShareholderActions.findById, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.findByIdSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.save, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.saveSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.remove, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.removeSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.getAll, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.getAllSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.search, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.searchSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.getAllPaged, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(ShareholderActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(ShareholderActions.shareholderReset, (state) => ({
      ...state,
        shareholders: [], 
        id: null, 
        shareholder: null, 
        criteria: null, 
        loaderMessage: undefined,
        loading: false,
        success: false,
        error: false,
        messges: []
    })),
    on(ShareholderActions.shareholderFailure, (state, action) => ({
        ...state,
        loading: false,
        loaderMessage: undefined,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(ShareholderActions.shareholderLoading, (state, action) => ({
        ...state,
        loaderMessage: undefined,
        loading: action.loading,
        success: false
    }))
);

export const shareholderFeature = createFeature({
    name: shareholderKey,
    reducer: shareholderReducer
});
