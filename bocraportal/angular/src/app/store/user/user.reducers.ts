// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as UserActions from './user.actions';
import {userKey, initialState} from './user.state';

export const userReducer = createReducer(
    initialState,
    on(UserActions.createUserSuccess, (state, action) => ({
        ...state,
        userId: null, 
        user: action.user, 
        users: [], 
        criteria: null, 
        loading: false,
        success: action.success,
        errors: []
    })),
    on(UserActions.updateUserNameSuccess, (state, action) => ({
        ...state,
        userId: null, 
        user: null, 
        users: [], 
        criteria: null, 
        loading: false,
        success: action.success,
        errors: []
    })),
    on(UserActions.loadUsersSuccess, (state, action) => ({
        ...state,
        userId: null, 
        user: null, 
        users: [], 
        criteria: null, 
        loading: false,
        success: action.success,
        errors: []
    })),
    // on(UserActions.findByIdSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    // on(UserActions.saveSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    // on(UserActions.removeSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    // on(UserActions.getAllSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    // on(UserActions.searchSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    // on(UserActions.getAllPagedSuccess, (state, action) => ({
    //     ...state,
    //     userId: null, 
    //     user: null, 
    //     users: [], 
    //     criteria: null, 
    //     loading: false,
    //     success: action.success,
    //     errors: []
    // })),
    on(UserActions.userReset, (state) => ({
      ...state,
        userId: null, 
        user: null, 
        users: [], 
        criteria: null, 
        loading: false,
        success: false,
        errors: []
    })),
    on(UserActions.userFailure, (state, action) => ({
        ...state,
        loading: false,
        success: false,
        errors: action.errors
    })),
    on(UserActions.userLoading, (state, action) => ({
        ...state,
        loading: action.loading,
        success: false
    }))
);

export const userFeature = createFeature({
    name: userKey,
    reducer: userReducer
});
