// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as UserActions from './user.actions';
import { UserRestController } from '@app/service/bw/org/bocra/portal/user/user-rest-controller';
import { LicenseeRestController } from '@app/service/bw/org/bocra/portal/licensee/licensee-rest-controller';

@Injectable()
export class UserEffects {
  constructor(
    private actions$: Actions,
    private userRestController: UserRestController,
    private licenseeRestController: LicenseeRestController
  ) { }

  createUser$ = createEffect(() =>
    this.actions$.pipe(
      ofType(UserActions.createUser),
      mergeMap(({ user }) =>
        this.userRestController.createUser(user).pipe(
          map((user) =>
            UserActions.createUserSuccess({
              user,
              messages: [`User ${user?.email} saved.`],
              success: true,
            })
          ),
          catchError(({ error }) => [UserActions.userFailure({ messages: [error?.error ? error.error : error] })])
        )
      )
    )
  );

  loadUsers$ = createEffect(() =>
    this.actions$.pipe(
      ofType(UserActions.loadUsers),
      mergeMap(() =>
        this.userRestController.loadUsers().pipe(
          map((users) => UserActions.loadUsersSuccess({ users: users, messages: [], success: true })),
          catchError(({ error }) => [UserActions.userFailure({ messages: [error] })])
        )
      )
    )
  );

  findById$ = createEffect(() =>
    this.actions$.pipe(
      ofType(UserActions.findById),
      mergeMap(({ userId }) => this.userRestController.findUserById(userId).pipe(
        map((user) => UserActions.findByIdSuccess({ user: user, messages: [`User ${user?.username} found`], success: true })),
        catchError(({ error }) => [UserActions.userFailure({ messages: [error] })])
      ))
    )
  );

  changePassword$ = createEffect(() =>
    this.actions$.pipe(
      ofType(UserActions.changePassword),
      mergeMap(({ userId, newPassword }) => this.userRestController.changePassword(userId, newPassword).pipe(
        map((message) => UserActions.changePasswordSuccess({ messages: [message], success: true })),
        catchError(({ error }) => [UserActions.userFailure({ messages: [error] })])
      ))
    )
  );

  search$ = createEffect(() =>
    this.actions$.pipe(
      ofType(UserActions.search),
      mergeMap(({ criteria }) =>
        this.userRestController.search(criteria).pipe(
          map((users) =>
            UserActions.searchSuccess({ users: users, messages: [`Found ${users.length} users.`], success: true })
          ),
          catchError(({ error }) => [UserActions.userFailure({ messages: [error] })])
        )
      )
    )
  );

  // getAllPaged$ = createEffect(() =>
  //      this.actions$.pipe(
  //         ofType(UserActions.getAllPaged),
  //         mergeMap(({ pageNumber, pageSize }) => this.licenseeRestController.getAllPaged(pageNumber, pageSize).pipe(
  //             map( results => UserActions.getAllPagedSuccess({results})),
  //             catchError(({error}) => [UserActions.userFailure({messages: [error]})])
  //         ))
  //     )
  // );
}
