// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as UserActions from './user.actions';
import { UserRestControllerImpl } from '@app/service/bw/org/bocra/portal/user/user-rest-controller.impl';
import { LicenseeRestControllerImpl } from '@app/service/bw/org/bocra/portal/licensee/licensee-rest-controller.impl';

@Injectable()
export class UserEffects {

    constructor(private actions$: Actions, private userRestController: UserRestControllerImpl, private licenseeRestController: LicenseeRestControllerImpl) { }


    createUser$ = createEffect(() =>
        this.actions$.pipe(
            ofType(UserActions.createUser),
            mergeMap(({ user }) => this.userRestController.createUser(user).pipe(
                map(user => UserActions.createUserSuccess({
                    user,
                    success: true
                })),
                catchError(({ error }) => [UserActions.userFailure(error)])
            ))
        )
    );

    // updateUserName$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.updateUserName),
    //         mergeMap(({ username, userId }) => this.userRestController.updateUserName(username, userId).pipe(
    //             map( results => UserActions.updateUserNameSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // loadUsers$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.loadUsers),
    //         mergeMap(() => this.userRestController.loadUsers().pipe(
    //             map( results => UserActions.loadUsersSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // findById$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.findById),
    //         mergeMap(({ id }) => this.licenseeRestController.findById(id).pipe(
    //             map( results => UserActions.findByIdSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // save$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.save),
    //         mergeMap(({ licensee }) => this.licenseeRestController.save(licensee).pipe(
    //             map( results => UserActions.saveSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // remove$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.remove),
    //         mergeMap(({ id }) => this.licenseeRestController.remove(id).pipe(
    //             map( results => UserActions.removeSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // getAll$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.getAll),
    //         mergeMap(() => this.licenseeRestController.getAll().pipe(
    //             map( results => UserActions.getAllSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // search$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.search),
    //         mergeMap(({ criteria }) => this.licenseeRestController.search(criteria).pipe(
    //             map( results => UserActions.searchSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

    // getAllPaged$ = createEffect(() => 
    //      this.actions$.pipe(
    //         ofType(UserActions.getAllPaged),
    //         mergeMap(({ pageNumber, pageSize }) => this.licenseeRestController.getAllPaged(pageNumber, pageSize).pipe(
    //             map( results => UserActions.getAllPagedSuccess({results})),
    //             catchError(({error}) => [UserActions.userFailure(error)])
    //         ))
    //     )
    // );

}
