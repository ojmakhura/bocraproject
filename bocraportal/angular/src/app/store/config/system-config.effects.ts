// Generated by andromda-angular cartridge (app\usecase\effect.store.ts.vsl) DO NOT EDIT
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as SystemConfigActions from './system-config.actions';
import { SystemConfigRestController } from '@app/service/bw/org/bocra/portal/config/system-config-rest-controller';

@Injectable()
export class SystemConfigEffects {

    constructor(private actions$: Actions, private systemConfigRestController: SystemConfigRestController) {}

    findById$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.findById),
            mergeMap(({id}) => this.systemConfigRestController.findById(id).pipe(
                map(( systemConfig) => SystemConfigActions.findByIdSuccess({systemConfig, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    save$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.save),
            mergeMap(({systemConfig}) => this.systemConfigRestController.save(systemConfig).pipe(
                map(( systemConfig) => SystemConfigActions.saveSuccess({systemConfig, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    remove$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.remove),
            mergeMap(({id}) => this.systemConfigRestController.remove(id).pipe(
                map(( removed) => SystemConfigActions.removeSuccess({removed, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    getAll$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.getAll),
            mergeMap(({}) => this.systemConfigRestController.getAll().pipe(
                map(( systemConfigs) => SystemConfigActions.getAllSuccess({systemConfigs, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    search$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.search),
            mergeMap(({criteria}) => this.systemConfigRestController.search(criteria).pipe(
                map(( systemConfigs) => SystemConfigActions.searchSuccess({systemConfigs, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

    getAllPaged$ = createEffect(() => 
         this.actions$.pipe(
            ofType(SystemConfigActions.getAllPaged),
            mergeMap(({pageNumber, pageSize}) => this.systemConfigRestController.getAllPaged(pageNumber, pageSize).pipe(
                map(( systemConfigs ) => SystemConfigActions.getAllPagedSuccess({systemConfigs, messages: [`Action successful.`], success: true})),
                catchError(({error}) => [SystemConfigActions.systemConfigFailure({messages: [error?.error ? error?.error : error]})])
            ))
        )
    );

}
