// Generated by andromda-angular cartridge (app\usecase\reducer.store.ts.vsl) DO NOT EDIT
import { Action, createFeature, createReducer, on } from '@ngrx/store';
import * as SystemConfigActions from './system-config.actions';
import {systemConfigKey, initialState} from './system-config.state';

export const systemConfigReducer = createReducer(
    initialState,
    on(SystemConfigActions.findById, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.findByIdSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: action.systemConfig, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.save, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.saveSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: action.systemConfig, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.remove, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.removeSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: undefined,
        loading: false,
        removed: action.removed,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.getAll, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.getAllSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: action.systemConfigs, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.search, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.searchSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: action.systemConfigs, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.getAllPaged, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: action.loaderMessage,
        loading: action.loading,
        success: false,
        messages: []
    })),
    on(SystemConfigActions.getAllPagedSuccess, (state, action) => ({
        ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: action.systemConfigs, 
        loaderMessage: undefined,
        loading: false,
        success: action.success,
        messages: action.messages
    })),
    on(SystemConfigActions.systemConfigReset, (state) => ({
      ...state,
        id: null, 
        systemConfig: null, 
        criteria: null, 
        systemConfigs: [], 
        loaderMessage: undefined,
        loading: false,
        success: false,
        error: false,
        messges: []
    })),
    on(SystemConfigActions.systemConfigFailure, (state, action) => ({
        ...state,
        loading: false,
        loaderMessage: undefined,
        success: false,
        error: true,
        messages: action.messages
    })),
    on(SystemConfigActions.systemConfigLoading, (state, action) => ({
        ...state,
        loaderMessage: undefined,
        loading: action.loading,
        success: false
    }))
);

export const systemConfigFeature = createFeature({
    name: systemConfigKey,
    reducer: systemConfigReducer
});
