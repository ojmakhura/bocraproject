// Generated by andromda-angular cartridge (app\usecase\action.store.ts.vsl) DO NOT EDIT
import { createAction, props } from '@ngrx/store';
import { SystemConfigVO } from '@app/model/bw/org/bocra/portal/config/system-config-vo';

export enum SystemConfigActionType {
    FIND_BY_ID = '[SystemConfig] Find By Id',
    FIND_BY_ID_SUCCESS = '[SystemConfig] Find By Id Success',
    SAVE = '[SystemConfig] Save',
    SAVE_SUCCESS = '[SystemConfig] Save Success',
    REMOVE = '[SystemConfig] Remove',
    REMOVE_SUCCESS = '[SystemConfig] Remove Success',
    GET_ALL = '[SystemConfig] Get All',
    GET_ALL_SUCCESS = '[SystemConfig] Get All Success',
    SEARCH = '[SystemConfig] Search',
    SEARCH_SUCCESS = '[SystemConfig] Search Success',
    GET_ALL_PAGED = '[SystemConfig] Get All Paged',
    GET_ALL_PAGED_SUCCESS = '[SystemConfig] Get All Paged Success',
    SYSTEM_CONFIG_RESET = '[SystemConfig] SystemConfig Reset',
    SYSTEM_CONFIG_FAILURE = '[SystemConfig] SystemConfig Action Failure',
    SYSTEM_CONFIG_LOADING = '[SystemConfig] SystemConfig Loading',
    SYSTEM_CONFIG_LOADER_MESSAGE = '[SystemConfig] SystemConfig Loader Message'
}

export const findById = createAction(
    SystemConfigActionType.FIND_BY_ID,
    props<{ id: number | any , loading: boolean, loaderMessage: string | undefined }>()
);

export const findByIdSuccess = createAction(
    SystemConfigActionType.FIND_BY_ID_SUCCESS,
    props<{ systemConfig: SystemConfigVO | any, messages: any[], success: boolean}>()
);

export const save = createAction(
    SystemConfigActionType.SAVE,
    props<{ systemConfig: SystemConfigVO | any , loading: boolean, loaderMessage: string | undefined }>()
);

export const saveSuccess = createAction(
    SystemConfigActionType.SAVE_SUCCESS,
    props<{ systemConfig: SystemConfigVO | any, messages: any[], success: boolean}>()
);

export const remove = createAction(
    SystemConfigActionType.REMOVE,
    props<{ id: number | any , loading: boolean, loaderMessage: string | undefined }>()
);

export const removeSuccess = createAction(
    SystemConfigActionType.REMOVE_SUCCESS,
    props<{ removed: boolean | any, messages: any[], success: boolean}>()
);

export const getAll = createAction(
    SystemConfigActionType.GET_ALL,
    props<{  loading: boolean, loaderMessage: string | undefined }>()
);

export const getAllSuccess = createAction(
    SystemConfigActionType.GET_ALL_SUCCESS,
    props<{ systemConfigs: SystemConfigVO[] | any[], messages: any[], success: boolean}>()
);

export const search = createAction(
    SystemConfigActionType.SEARCH,
    props<{ criteria: string | any , loading: boolean, loaderMessage: string | undefined }>()
);

export const searchSuccess = createAction(
    SystemConfigActionType.SEARCH_SUCCESS,
    props<{ systemConfigs: SystemConfigVO[] | any[], messages: any[], success: boolean}>()
);

export const getAllPaged = createAction(
    SystemConfigActionType.GET_ALL_PAGED,
    props<{ pageNumber: number | any , pageSize: number | any , loading: boolean, loaderMessage: string | undefined }>()
);

export const getAllPagedSuccess = createAction(
    SystemConfigActionType.GET_ALL_PAGED_SUCCESS,
    props<{ systemConfigs: SystemConfigVO[] | any[], messages: any[], success: boolean}>()
);


export const systemConfigReset = createAction(SystemConfigActionType.SYSTEM_CONFIG_RESET);

export const systemConfigLoading = createAction(
    SystemConfigActionType.SYSTEM_CONFIG_LOADING,
    props<{ loading: boolean, success: boolean, messages: any[] }>()
);

export const systemConfigFailure = createAction(
    SystemConfigActionType.SYSTEM_CONFIG_FAILURE,
    props<{ messages: any[] }>()
);
