// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.message;

import java.time.LocalDateTime;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface CommunicationMessageRepository extends 
        JpaRepository<CommunicationMessage, Long>,
        JpaSpecificationExecutor<CommunicationMessage> {

    // Generating pageable query method for createdBy
    Page<CommunicationMessage> findByCreatedByNull(Pageable pageable);

    Page<CommunicationMessage> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByCreatedByNot(String createdBy);
    Page<CommunicationMessage> findByCreatedByNot(String createdBy, Pageable pageable);
    
    Collection<CommunicationMessage> findByCreatedByIn(Collection<String> createdBys);
    Page<CommunicationMessage> findByCreatedByIn(Collection<String> createdBys, Pageable pageable);
    
    Collection<CommunicationMessage> findByCreatedByNotIn(Collection<String> createdBys);
    Page<CommunicationMessage> findByCreatedByNotIn(Collection<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<CommunicationMessage> findByUpdatedByNull(Pageable pageable);

    Page<CommunicationMessage> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByUpdatedByNot(String updatedBy);
    Page<CommunicationMessage> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    Collection<CommunicationMessage> findByUpdatedByIn(Collection<String> updatedBys);
    Page<CommunicationMessage> findByUpdatedByIn(Collection<String> updatedBys, Pageable pageable);
    
    Collection<CommunicationMessage> findByUpdatedByNotIn(Collection<String> updatedBys);
    Page<CommunicationMessage> findByUpdatedByNotIn(Collection<String> updatedBys, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<CommunicationMessage> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<CommunicationMessage> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<CommunicationMessage> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByCreatedDateNot(LocalDateTime createdDate);
    Page<CommunicationMessage> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    Collection<CommunicationMessage> findByCreatedDateIn(Collection<LocalDateTime> createdDates);
    Page<CommunicationMessage> findByCreatedDateIn(Collection<LocalDateTime> createdDates, Pageable pageable);
    
    Collection<CommunicationMessage> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates);
    Page<CommunicationMessage> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<CommunicationMessage> findByUpdatedDateNull(Pageable pageable);

    Page<CommunicationMessage> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<CommunicationMessage> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<CommunicationMessage> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    Collection<CommunicationMessage> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates);
    Page<CommunicationMessage> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates, Pageable pageable);
    
    Collection<CommunicationMessage> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates);
    Page<CommunicationMessage> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates, Pageable pageable);

    // Search by a list of parameters
    Collection<CommunicationMessage> findByDestinationsNot(String destinations);
    Page<CommunicationMessage> findByDestinationsNot(String destinations, Pageable pageable);
    
    Collection<CommunicationMessage> findByDestinationsIn(Collection<String> destinationss);
    Page<CommunicationMessage> findByDestinationsIn(Collection<String> destinationss, Pageable pageable);
    
    Collection<CommunicationMessage> findByDestinationsNotIn(Collection<String> destinationss);
    Page<CommunicationMessage> findByDestinationsNotIn(Collection<String> destinationss, Pageable pageable);

    // Generating pageable query method for sendNow
    Page<CommunicationMessage> findBySendNowNull(Pageable pageable);

    // Search by a list of parameters
    Collection<CommunicationMessage> findBySendNowNot(Boolean sendNow);
    Page<CommunicationMessage> findBySendNowNot(Boolean sendNow, Pageable pageable);
    
    Collection<CommunicationMessage> findBySendNowIn(Collection<Boolean> sendNows);
    Page<CommunicationMessage> findBySendNowIn(Collection<Boolean> sendNows, Pageable pageable);
    
    Collection<CommunicationMessage> findBySendNowNotIn(Collection<Boolean> sendNows);
    Page<CommunicationMessage> findBySendNowNotIn(Collection<Boolean> sendNows, Pageable pageable);

    // Generating pageable query method for subject
    Page<CommunicationMessage> findBySubject(String subject, Pageable pageable);

    Page<CommunicationMessage> findBySubjectStartingWithIgnoreCase(String subject, Pageable pageable);
    
    Page<CommunicationMessage> findBySubjectEndingWithIgnoreCase(String subject, Pageable pageable);
    
    Page<CommunicationMessage> findBySubjectContainingIgnoreCase(String subject, Pageable pageable);
    
    Page<CommunicationMessage> findBySubjectLikeIgnoreCase(String subject, Pageable pageable);
    
    Page<CommunicationMessage> findBySubjectNotLikeIgnoreCase(String subject, Pageable pageable);
    
    Page<CommunicationMessage> findBySubjectContaining(String subject, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findBySubjectNot(String subject);
    Page<CommunicationMessage> findBySubjectNot(String subject, Pageable pageable);
    
    Collection<CommunicationMessage> findBySubjectIn(Collection<String> subjects);
    Page<CommunicationMessage> findBySubjectIn(Collection<String> subjects, Pageable pageable);
    
    Collection<CommunicationMessage> findBySubjectNotIn(Collection<String> subjects);
    Page<CommunicationMessage> findBySubjectNotIn(Collection<String> subjects, Pageable pageable);

    // Generating pageable query method for source
    Page<CommunicationMessage> findBySourceNull(Pageable pageable);

    Page<CommunicationMessage> findBySourceStartingWithIgnoreCase(String source, Pageable pageable);
    
    Page<CommunicationMessage> findBySourceEndingWithIgnoreCase(String source, Pageable pageable);
    
    Page<CommunicationMessage> findBySourceContainingIgnoreCase(String source, Pageable pageable);
    
    Page<CommunicationMessage> findBySourceLikeIgnoreCase(String source, Pageable pageable);
    
    Page<CommunicationMessage> findBySourceNotLikeIgnoreCase(String source, Pageable pageable);
    
    Page<CommunicationMessage> findBySourceContaining(String source, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findBySourceNot(String source);
    Page<CommunicationMessage> findBySourceNot(String source, Pageable pageable);
    
    Collection<CommunicationMessage> findBySourceIn(Collection<String> sources);
    Page<CommunicationMessage> findBySourceIn(Collection<String> sources, Pageable pageable);
    
    Collection<CommunicationMessage> findBySourceNotIn(Collection<String> sources);
    Page<CommunicationMessage> findBySourceNotIn(Collection<String> sources, Pageable pageable);

    // Generating pageable query method for text
    Page<CommunicationMessage> findByText(String text, Pageable pageable);

    Page<CommunicationMessage> findByTextStartingWithIgnoreCase(String text, Pageable pageable);
    
    Page<CommunicationMessage> findByTextEndingWithIgnoreCase(String text, Pageable pageable);
    
    Page<CommunicationMessage> findByTextContainingIgnoreCase(String text, Pageable pageable);
    
    Page<CommunicationMessage> findByTextLikeIgnoreCase(String text, Pageable pageable);
    
    Page<CommunicationMessage> findByTextNotLikeIgnoreCase(String text, Pageable pageable);
    
    Page<CommunicationMessage> findByTextContaining(String text, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByTextNot(String text);
    Page<CommunicationMessage> findByTextNot(String text, Pageable pageable);
    
    Collection<CommunicationMessage> findByTextIn(Collection<String> texts);
    Page<CommunicationMessage> findByTextIn(Collection<String> texts, Pageable pageable);
    
    Collection<CommunicationMessage> findByTextNotIn(Collection<String> texts);
    Page<CommunicationMessage> findByTextNotIn(Collection<String> texts, Pageable pageable);

    // Generating pageable query method for dispatchDate
    Page<CommunicationMessage> findByDispatchDateNull(Pageable pageable);

    Page<CommunicationMessage> findByDispatchDateAfter(LocalDateTime dispatchDate, Pageable pageable);
    
    Page<CommunicationMessage> findByDispatchDateBefore(LocalDateTime dispatchDate, Pageable pageable);
    
    Page<CommunicationMessage> findByDispatchDateBetween(LocalDateTime dispatchDateStart, LocalDateTime dispatchDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByDispatchDateNot(LocalDateTime dispatchDate);
    Page<CommunicationMessage> findByDispatchDateNot(LocalDateTime dispatchDate, Pageable pageable);
    
    Collection<CommunicationMessage> findByDispatchDateIn(Collection<LocalDateTime> dispatchDates);
    Page<CommunicationMessage> findByDispatchDateIn(Collection<LocalDateTime> dispatchDates, Pageable pageable);
    
    Collection<CommunicationMessage> findByDispatchDateNotIn(Collection<LocalDateTime> dispatchDates);
    Page<CommunicationMessage> findByDispatchDateNotIn(Collection<LocalDateTime> dispatchDates, Pageable pageable);

    // Generating pageable query method for messagePlatform
    Page<CommunicationMessage> findByMessagePlatform(CommunicationMessagePlatform messagePlatform, Pageable pageable);

    // Search by a list of parameters
    Collection<CommunicationMessage> findByMessagePlatformNot(CommunicationMessagePlatform messagePlatform);
    Page<CommunicationMessage> findByMessagePlatformNot(CommunicationMessagePlatform messagePlatform, Pageable pageable);
    
    Collection<CommunicationMessage> findByMessagePlatformIn(Collection<CommunicationMessagePlatform> messagePlatforms);
    Page<CommunicationMessage> findByMessagePlatformIn(Collection<CommunicationMessagePlatform> messagePlatforms, Pageable pageable);
    
    Collection<CommunicationMessage> findByMessagePlatformNotIn(Collection<CommunicationMessagePlatform> messagePlatforms);
    Page<CommunicationMessage> findByMessagePlatformNotIn(Collection<CommunicationMessagePlatform> messagePlatforms, Pageable pageable);

    // Generating pageable query method for status
    Page<CommunicationMessage> findByStatus(CommunicationMessageStatus status, Pageable pageable);

    // Search by a list of parameters
    Collection<CommunicationMessage> findByStatusNot(CommunicationMessageStatus status);
    Page<CommunicationMessage> findByStatusNot(CommunicationMessageStatus status, Pageable pageable);
    
    Collection<CommunicationMessage> findByStatusIn(Collection<CommunicationMessageStatus> statuss);
    Page<CommunicationMessage> findByStatusIn(Collection<CommunicationMessageStatus> statuss, Pageable pageable);
    
    Collection<CommunicationMessage> findByStatusNotIn(Collection<CommunicationMessageStatus> statuss);
    Page<CommunicationMessage> findByStatusNotIn(Collection<CommunicationMessageStatus> statuss, Pageable pageable);

    // Generating pageable query method for id
    Page<CommunicationMessage> findByIdNull(Pageable pageable);

    Page<CommunicationMessage> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<CommunicationMessage> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<CommunicationMessage> findByIdLessThan(Long id, Pageable pageable);
    
    Page<CommunicationMessage> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<CommunicationMessage> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<CommunicationMessage> findByIdNot(Long id);
    Page<CommunicationMessage> findByIdNot(Long id, Pageable pageable);
    
    Collection<CommunicationMessage> findByIdIn(Collection<Long> ids);
    Page<CommunicationMessage> findByIdIn(Collection<Long> ids, Pageable pageable);
    
    Collection<CommunicationMessage> findByIdNotIn(Collection<Long> ids);
    Page<CommunicationMessage> findByIdNotIn(Collection<Long> ids, Pageable pageable);

}