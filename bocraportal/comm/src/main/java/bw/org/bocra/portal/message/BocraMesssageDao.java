// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.message;

import java.time.LocalDateTime;
import java.util.Collection;
import org.springframework.transaction.annotation.Transactional;

/**
 * TODO: Model Documentation for BocraMesssage
 * @see BocraMesssage
 */
@Transactional
public interface BocraMesssageDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link BocraMesssage}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link BocraMesssageVO}.
     */
    public static final int TRANSFORM_BocraMesssageVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toBocraMesssageVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toBocraMesssageVO(
        BocraMesssage source,
        BocraMesssageVO target);

    /**
     * Converts this DAO's entity to an object of type {@link BocraMesssageVO}.
     * @param entity
     * @return BocraMesssageVO
     */
    public BocraMesssageVO toBocraMesssageVO(BocraMesssage entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link BocraMesssageVO}.
     * @param entities
     * @return Collection<BocraMesssageVO>
     */
    public Collection<BocraMesssageVO> toBocraMesssageVOCollection(Collection<BocraMesssage> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link BocraMesssageVO}.
     * @param entities
     * @return BocraMesssageVO[]
     */
    public BocraMesssageVO[] toBocraMesssageVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link BocraMesssageVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void bocraMesssageVOToEntity(
        BocraMesssageVO source,
        BocraMesssage target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link BocraMesssageVO} to this DAO's entity.
     * @param BocraMesssageVO
     * @return BocraMesssage
     */
    public BocraMesssage bocraMesssageVOToEntity(BocraMesssageVO BocraMesssageVO);

    /**
     * Converts a Collection of instances of type {@link BocraMesssageVO} to this
     * DAO's entity.
     * @param instances
     */
    public void bocraMesssageVOToEntityCollection(Collection<?> instances);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>bw.org.bocra.portal.message.BocraMesssageDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link BocraMesssage} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link BocraMesssageVO} - {@link #TRANSFORM_BocraMesssageVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link bw.org.bocra.portal.message.BocraMesssageDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final BocraMesssage entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,BocraMesssage)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>bw.org.bocra.portal.message.BocraMesssageDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,BocraMesssage)
     */
    public void transformEntities(final int transform, final Collection<?> entities);


    // spring-dao merge-point
}