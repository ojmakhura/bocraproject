// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: bocraportal::backend::bw.org.bocra.portal::message::CommunicationMessageService
 * STEREOTYPE:  Service
 */
package bw.org.bocra.portal.message;

import bw.org.bocra.portal.PrincipalStore;
import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>CommunicationMessageService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see CommunicationMessageService
 */
public abstract class CommunicationMessageServiceBase
    implements CommunicationMessageService
{
    protected Logger logger = LoggerFactory.getLogger(CommunicationMessageService.class);
    protected final CommunicationMessageDao communicationMessageDao;
    protected final CommunicationMessageRepository communicationMessageRepository;
    protected final MessageSource messageSource;

    public CommunicationMessageServiceBase(
        CommunicationMessageDao communicationMessageDao,
        CommunicationMessageRepository communicationMessageRepository,
        MessageSource messageSource
    ) {
        this.communicationMessageDao = communicationMessageDao;
        this.communicationMessageRepository = communicationMessageRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>communicationMessage</code>'s DAO.
     * @return communicationMessageDao
     */
    protected CommunicationMessageDao getCommunicationMessageDao()
    {
        return this.communicationMessageDao;
    }

    /**
     * Gets the reference to <code>communicationMessage</code>'s repository.
     * @return communicationMessageRepository
     */
    public CommunicationMessageRepository getCommunicationMessageRepository() {
        return communicationMessageRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunicationMessageVO findById(final Long id)
    {
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.findById(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(Long)}
     * @param id Long TODO: Model Documentation for CommunicationMessageService.findById(id)
     * @return CommunicationMessageVO
     * @throws Exception
     */
    protected abstract CommunicationMessageVO handleFindById(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for
CommunicationMessageService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
CommunicationMessageService.getAll(pageSize)
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final Long id)
    {
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.remove(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(Long)}
     * @param id Long TODO: Model Documentation for CommunicationMessageService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunicationMessageVO save(final CommunicationMessageVO communicationMessage)
    {
        if (communicationMessage == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.save(CommunicationMessageVO communicationMessage) - 'communicationMessage' can not be null");
        }
        if (communicationMessage.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.save(CommunicationMessageVO communicationMessage) - 'communicationMessage.status' can not be null");
        }
        if (communicationMessage.getMessagePlatform() == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.save(CommunicationMessageVO communicationMessage) - 'communicationMessage.messagePlatform' can not be null");
        }
        if (communicationMessage.getSubject() == null || communicationMessage.getSubject().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.save(CommunicationMessageVO communicationMessage) - 'communicationMessage.subject' can not be null or empty");
        }
        if (communicationMessage.getText() == null || communicationMessage.getText().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.save(CommunicationMessageVO communicationMessage) - 'communicationMessage.text' can not be null or empty");
        }
        try
        {
            return this.handleSave(communicationMessage);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.save(CommunicationMessageVO communicationMessage)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(CommunicationMessageVO)}
     * @param communicationMessage CommunicationMessageVO TODO: Model Documentation for
CommunicationMessageService.save(communicationMessage)
     * @return CommunicationMessageVO
     * @throws Exception
     */
    protected abstract CommunicationMessageVO handleSave(CommunicationMessageVO communicationMessage)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> search(final String criteria)
    {
        if (criteria == null || criteria.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.search(String criteria) - 'criteria' can not be null or empty");
        }
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.search(String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String)}
     * @param criteria String TODO: Model Documentation for
CommunicationMessageService.search(criteria)
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleSearch(String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> search(final Integer pageNumber, final Integer pageSize, final String criteria)
    {
        if (criteria == null || criteria.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.search(Integer pageNumber, Integer pageSize, String criteria) - 'criteria' can not be null or empty");
        }
        try
        {
            return this.handleSearch(pageNumber, pageSize, criteria);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.search(Integer pageNumber, Integer pageSize, String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(Integer, Integer, String)}
     * @param pageNumber Integer TODO: Model Documentation for
CommunicationMessageService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
CommunicationMessageService.search(pageSize)
     * @param criteria String TODO: Model Documentation for
CommunicationMessageService.search(criteria)
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleSearch(Integer pageNumber, Integer pageSize, String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> loadTodayMessages()
    {
        try
        {
            return this.handleLoadTodayMessages();
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.loadTodayMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #loadTodayMessages()}
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleLoadTodayMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer clearSentMessages()
    {
        try
        {
            return this.handleClearSentMessages();
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.clearSentMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #clearSentMessages()}
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleClearSentMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer clearFailedMessages()
    {
        try
        {
            return this.handleClearFailedMessages();
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.clearFailedMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #clearFailedMessages()}
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleClearFailedMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<CommunicationMessageVO> loadDueSubmissionMessages()
    {
        try
        {
            return this.handleLoadDueSubmissionMessages();
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.loadDueSubmissionMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #loadDueSubmissionMessages()}
     * @return Collection<CommunicationMessageVO>
     * @throws Exception
     */
    protected abstract Collection<CommunicationMessageVO> handleLoadDueSubmissionMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean updateMessageStatus(final Long id, final CommunicationMessageStatus status)
    {
        if (status == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.CommunicationMessageService.updateMessageStatus(Long id, CommunicationMessageStatus status) - 'status' can not be null");
        }
        try
        {
            return this.handleUpdateMessageStatus(id, status);
        }
        catch (Throwable th)
        {
            throw new CommunicationMessageServiceException(
                "Error performing 'CommunicationMessageService.updateMessageStatus(Long id, CommunicationMessageStatus status)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #updateMessageStatus(Long, CommunicationMessageStatus)}
     * @param id Long TODO: Model Documentation for
CommunicationMessageService.updateMessageStatus(id)
     * @param status CommunicationMessageStatus TODO: Model Documentation for
CommunicationMessageService.updateMessageStatus(status)
     * @return Boolean
     * @throws Exception
     */
    protected abstract Boolean handleUpdateMessageStatus(Long id, CommunicationMessageStatus status)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}