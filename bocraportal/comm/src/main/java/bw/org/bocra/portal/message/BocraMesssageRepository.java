// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringRepository.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
package bw.org.bocra.portal.message;

import java.time.LocalDateTime;
import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface BocraMesssageRepository extends 
        JpaRepository<BocraMesssage, Long>,
        JpaSpecificationExecutor<BocraMesssage> {

    // Generating pageable query method for createdBy
    Page<BocraMesssage> findByCreatedByNull(Pageable pageable);

    Page<BocraMesssage> findByCreatedByStartingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedByEndingWithIgnoreCase(String createdBy, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedByContainingIgnoreCase(String createdBy, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedByLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedByNotLikeIgnoreCase(String createdBy, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedByContaining(String createdBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByCreatedByNot(String createdBy);
    Page<BocraMesssage> findByCreatedByNot(String createdBy, Pageable pageable);
    
    Collection<BocraMesssage> findByCreatedByIn(Collection<String> createdBys);
    Page<BocraMesssage> findByCreatedByIn(Collection<String> createdBys, Pageable pageable);
    
    Collection<BocraMesssage> findByCreatedByNotIn(Collection<String> createdBys);
    Page<BocraMesssage> findByCreatedByNotIn(Collection<String> createdBys, Pageable pageable);

    // Generating pageable query method for updatedBy
    Page<BocraMesssage> findByUpdatedByNull(Pageable pageable);

    Page<BocraMesssage> findByUpdatedByStartingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedByEndingWithIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedByContainingIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedByLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedByNotLikeIgnoreCase(String updatedBy, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedByContaining(String updatedBy, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByUpdatedByNot(String updatedBy);
    Page<BocraMesssage> findByUpdatedByNot(String updatedBy, Pageable pageable);
    
    Collection<BocraMesssage> findByUpdatedByIn(Collection<String> updatedBys);
    Page<BocraMesssage> findByUpdatedByIn(Collection<String> updatedBys, Pageable pageable);
    
    Collection<BocraMesssage> findByUpdatedByNotIn(Collection<String> updatedBys);
    Page<BocraMesssage> findByUpdatedByNotIn(Collection<String> updatedBys, Pageable pageable);

    // Generating pageable query method for createdDate
    Page<BocraMesssage> findByCreatedDate(LocalDateTime createdDate, Pageable pageable);

    Page<BocraMesssage> findByCreatedDateAfter(LocalDateTime createdDate, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedDateBefore(LocalDateTime createdDate, Pageable pageable);
    
    Page<BocraMesssage> findByCreatedDateBetween(LocalDateTime createdDateStart, LocalDateTime createdDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByCreatedDateNot(LocalDateTime createdDate);
    Page<BocraMesssage> findByCreatedDateNot(LocalDateTime createdDate, Pageable pageable);
    
    Collection<BocraMesssage> findByCreatedDateIn(Collection<LocalDateTime> createdDates);
    Page<BocraMesssage> findByCreatedDateIn(Collection<LocalDateTime> createdDates, Pageable pageable);
    
    Collection<BocraMesssage> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates);
    Page<BocraMesssage> findByCreatedDateNotIn(Collection<LocalDateTime> createdDates, Pageable pageable);

    // Generating pageable query method for updatedDate
    Page<BocraMesssage> findByUpdatedDateNull(Pageable pageable);

    Page<BocraMesssage> findByUpdatedDateAfter(LocalDateTime updatedDate, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedDateBefore(LocalDateTime updatedDate, Pageable pageable);
    
    Page<BocraMesssage> findByUpdatedDateBetween(LocalDateTime updatedDateStart, LocalDateTime updatedDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByUpdatedDateNot(LocalDateTime updatedDate);
    Page<BocraMesssage> findByUpdatedDateNot(LocalDateTime updatedDate, Pageable pageable);
    
    Collection<BocraMesssage> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates);
    Page<BocraMesssage> findByUpdatedDateIn(Collection<LocalDateTime> updatedDates, Pageable pageable);
    
    Collection<BocraMesssage> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates);
    Page<BocraMesssage> findByUpdatedDateNotIn(Collection<LocalDateTime> updatedDates, Pageable pageable);

    // Search by a list of parameters
    Collection<BocraMesssage> findByDestinationsNot(String destinations);
    Page<BocraMesssage> findByDestinationsNot(String destinations, Pageable pageable);
    
    Collection<BocraMesssage> findByDestinationsIn(Collection<String> destinationss);
    Page<BocraMesssage> findByDestinationsIn(Collection<String> destinationss, Pageable pageable);
    
    Collection<BocraMesssage> findByDestinationsNotIn(Collection<String> destinationss);
    Page<BocraMesssage> findByDestinationsNotIn(Collection<String> destinationss, Pageable pageable);

    // Generating pageable query method for sendNow
    Page<BocraMesssage> findBySendNowNull(Pageable pageable);

    // Search by a list of parameters
    Collection<BocraMesssage> findBySendNowNot(Boolean sendNow);
    Page<BocraMesssage> findBySendNowNot(Boolean sendNow, Pageable pageable);
    
    Collection<BocraMesssage> findBySendNowIn(Collection<Boolean> sendNows);
    Page<BocraMesssage> findBySendNowIn(Collection<Boolean> sendNows, Pageable pageable);
    
    Collection<BocraMesssage> findBySendNowNotIn(Collection<Boolean> sendNows);
    Page<BocraMesssage> findBySendNowNotIn(Collection<Boolean> sendNows, Pageable pageable);

    // Generating pageable query method for subject
    Page<BocraMesssage> findBySubject(String subject, Pageable pageable);

    Page<BocraMesssage> findBySubjectStartingWithIgnoreCase(String subject, Pageable pageable);
    
    Page<BocraMesssage> findBySubjectEndingWithIgnoreCase(String subject, Pageable pageable);
    
    Page<BocraMesssage> findBySubjectContainingIgnoreCase(String subject, Pageable pageable);
    
    Page<BocraMesssage> findBySubjectLikeIgnoreCase(String subject, Pageable pageable);
    
    Page<BocraMesssage> findBySubjectNotLikeIgnoreCase(String subject, Pageable pageable);
    
    Page<BocraMesssage> findBySubjectContaining(String subject, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findBySubjectNot(String subject);
    Page<BocraMesssage> findBySubjectNot(String subject, Pageable pageable);
    
    Collection<BocraMesssage> findBySubjectIn(Collection<String> subjects);
    Page<BocraMesssage> findBySubjectIn(Collection<String> subjects, Pageable pageable);
    
    Collection<BocraMesssage> findBySubjectNotIn(Collection<String> subjects);
    Page<BocraMesssage> findBySubjectNotIn(Collection<String> subjects, Pageable pageable);

    // Generating pageable query method for source
    Page<BocraMesssage> findBySourceNull(Pageable pageable);

    Page<BocraMesssage> findBySourceStartingWithIgnoreCase(String source, Pageable pageable);
    
    Page<BocraMesssage> findBySourceEndingWithIgnoreCase(String source, Pageable pageable);
    
    Page<BocraMesssage> findBySourceContainingIgnoreCase(String source, Pageable pageable);
    
    Page<BocraMesssage> findBySourceLikeIgnoreCase(String source, Pageable pageable);
    
    Page<BocraMesssage> findBySourceNotLikeIgnoreCase(String source, Pageable pageable);
    
    Page<BocraMesssage> findBySourceContaining(String source, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findBySourceNot(String source);
    Page<BocraMesssage> findBySourceNot(String source, Pageable pageable);
    
    Collection<BocraMesssage> findBySourceIn(Collection<String> sources);
    Page<BocraMesssage> findBySourceIn(Collection<String> sources, Pageable pageable);
    
    Collection<BocraMesssage> findBySourceNotIn(Collection<String> sources);
    Page<BocraMesssage> findBySourceNotIn(Collection<String> sources, Pageable pageable);

    // Generating pageable query method for text
    Page<BocraMesssage> findByText(String text, Pageable pageable);

    Page<BocraMesssage> findByTextStartingWithIgnoreCase(String text, Pageable pageable);
    
    Page<BocraMesssage> findByTextEndingWithIgnoreCase(String text, Pageable pageable);
    
    Page<BocraMesssage> findByTextContainingIgnoreCase(String text, Pageable pageable);
    
    Page<BocraMesssage> findByTextLikeIgnoreCase(String text, Pageable pageable);
    
    Page<BocraMesssage> findByTextNotLikeIgnoreCase(String text, Pageable pageable);
    
    Page<BocraMesssage> findByTextContaining(String text, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByTextNot(String text);
    Page<BocraMesssage> findByTextNot(String text, Pageable pageable);
    
    Collection<BocraMesssage> findByTextIn(Collection<String> texts);
    Page<BocraMesssage> findByTextIn(Collection<String> texts, Pageable pageable);
    
    Collection<BocraMesssage> findByTextNotIn(Collection<String> texts);
    Page<BocraMesssage> findByTextNotIn(Collection<String> texts, Pageable pageable);

    // Generating pageable query method for dispatchDate
    Page<BocraMesssage> findByDispatchDateNull(Pageable pageable);

    Page<BocraMesssage> findByDispatchDateAfter(LocalDateTime dispatchDate, Pageable pageable);
    
    Page<BocraMesssage> findByDispatchDateBefore(LocalDateTime dispatchDate, Pageable pageable);
    
    Page<BocraMesssage> findByDispatchDateBetween(LocalDateTime dispatchDateStart, LocalDateTime dispatchDateEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByDispatchDateNot(LocalDateTime dispatchDate);
    Page<BocraMesssage> findByDispatchDateNot(LocalDateTime dispatchDate, Pageable pageable);
    
    Collection<BocraMesssage> findByDispatchDateIn(Collection<LocalDateTime> dispatchDates);
    Page<BocraMesssage> findByDispatchDateIn(Collection<LocalDateTime> dispatchDates, Pageable pageable);
    
    Collection<BocraMesssage> findByDispatchDateNotIn(Collection<LocalDateTime> dispatchDates);
    Page<BocraMesssage> findByDispatchDateNotIn(Collection<LocalDateTime> dispatchDates, Pageable pageable);

    // Generating pageable query method for messagePlatform
    Page<BocraMesssage> findByMessagePlatform(BocraMesssagePlatform messagePlatform, Pageable pageable);

    // Search by a list of parameters
    Collection<BocraMesssage> findByMessagePlatformNot(BocraMesssagePlatform messagePlatform);
    Page<BocraMesssage> findByMessagePlatformNot(BocraMesssagePlatform messagePlatform, Pageable pageable);
    
    Collection<BocraMesssage> findByMessagePlatformIn(Collection<BocraMesssagePlatform> messagePlatforms);
    Page<BocraMesssage> findByMessagePlatformIn(Collection<BocraMesssagePlatform> messagePlatforms, Pageable pageable);
    
    Collection<BocraMesssage> findByMessagePlatformNotIn(Collection<BocraMesssagePlatform> messagePlatforms);
    Page<BocraMesssage> findByMessagePlatformNotIn(Collection<BocraMesssagePlatform> messagePlatforms, Pageable pageable);

    // Generating pageable query method for status
    Page<BocraMesssage> findByStatus(BocraMesssageStatus status, Pageable pageable);

    // Search by a list of parameters
    Collection<BocraMesssage> findByStatusNot(BocraMesssageStatus status);
    Page<BocraMesssage> findByStatusNot(BocraMesssageStatus status, Pageable pageable);
    
    Collection<BocraMesssage> findByStatusIn(Collection<BocraMesssageStatus> statuss);
    Page<BocraMesssage> findByStatusIn(Collection<BocraMesssageStatus> statuss, Pageable pageable);
    
    Collection<BocraMesssage> findByStatusNotIn(Collection<BocraMesssageStatus> statuss);
    Page<BocraMesssage> findByStatusNotIn(Collection<BocraMesssageStatus> statuss, Pageable pageable);

    // Generating pageable query method for id
    Page<BocraMesssage> findByIdNull(Pageable pageable);

    Page<BocraMesssage> findByIdLessThanEqual(Long id, Pageable pageable);
    
    Page<BocraMesssage> findByIdGreaterThanEqual(Long id, Pageable pageable);
    
    Page<BocraMesssage> findByIdLessThan(Long id, Pageable pageable);
    
    Page<BocraMesssage> findByIdGreaterThan(Long id, Pageable pageable);
    
    Page<BocraMesssage> findByIdBetween(Long idStart, Long idEnd, Pageable pageable);
    
    // Search by a list of parameters
    Collection<BocraMesssage> findByIdNot(Long id);
    Page<BocraMesssage> findByIdNot(Long id, Pageable pageable);
    
    Collection<BocraMesssage> findByIdIn(Collection<Long> ids);
    Page<BocraMesssage> findByIdIn(Collection<Long> ids, Pageable pageable);
    
    Collection<BocraMesssage> findByIdNotIn(Collection<Long> ids);
    Page<BocraMesssage> findByIdNotIn(Collection<Long> ids, Pageable pageable);

}