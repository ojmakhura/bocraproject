// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on $springUtils.date. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: bocraportal::backend::bw.org.bocra.portal::message::BocraMesssageService
 * STEREOTYPE:  Service
 */
package bw.org.bocra.portal.message;

import java.security.Principal;
import java.util.Collection;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>BocraMesssageService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see BocraMesssageService
 */
public abstract class BocraMesssageServiceBase
    implements BocraMesssageService
{
    protected Logger logger = LoggerFactory.getLogger(BocraMesssageService.class);
    protected final BocraMesssageDao bocraMesssageDao;
    protected final BocraMesssageRepository bocraMesssageRepository;
    protected final MessageSource messageSource;

    public BocraMesssageServiceBase(
        BocraMesssageDao bocraMesssageDao,
        BocraMesssageRepository bocraMesssageRepository,
        MessageSource messageSource
    ) {
        this.bocraMesssageDao = bocraMesssageDao;
        this.bocraMesssageRepository = bocraMesssageRepository;
        this.messageSource = messageSource;
    }

	/**
     * Gets the reference to <code>BocraMesssage</code>'s DAO.
     * @return BocraMesssageDao
     */
    protected BocraMesssageDao getBocraMesssageDao()
    {
        return this.bocraMesssageDao;
    }

    /**
     * Gets the reference to <code>BocraMesssage</code>'s repository.
     * @return BocraMesssageRepository
     */
    public BocraMesssageRepository getBocraMesssageRepository() {
        return bocraMesssageRepository;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BocraMesssageVO findById(final Long id)
    {
        try
        {
            return this.handleFindById(id);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.findById(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #findById(Long)}
     * @param id Long TODO: Model Documentation for BocraMesssageService.findById(id)
     * @return BocraMesssageVO
     * @throws Exception
     */
    protected abstract BocraMesssageVO handleFindById(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> getAll()
    {
        try
        {
            return this.handleGetAll();
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.getAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll()}
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleGetAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> getAll(final Integer pageNumber, final Integer pageSize)
    {
        try
        {
            return this.handleGetAll(pageNumber, pageSize);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.getAll(Integer pageNumber, Integer pageSize)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #getAll(Integer, Integer)}
     * @param pageNumber Integer TODO: Model Documentation for
BocraMesssageService.getAll(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
BocraMesssageService.getAll(pageSize)
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleGetAll(Integer pageNumber, Integer pageSize)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean remove(final Long id)
    {
        try
        {
            return this.handleRemove(id);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.remove(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #remove(Long)}
     * @param id Long TODO: Model Documentation for BocraMesssageService.remove(id)
     * @return boolean
     * @throws Exception
     */
    protected abstract boolean handleRemove(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public BocraMesssageVO save(final BocraMesssageVO BocraMesssage)
    {
        if (BocraMesssage == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.save(BocraMesssageVO BocraMesssage) - 'BocraMesssage' can not be null");
        }
        if (BocraMesssage.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.save(BocraMesssageVO BocraMesssage) - 'BocraMesssage.status' can not be null");
        }
        if (BocraMesssage.getMessagePlatform() == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.save(BocraMesssageVO BocraMesssage) - 'BocraMesssage.messagePlatform' can not be null");
        }
        if (BocraMesssage.getSubject() == null || BocraMesssage.getSubject().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.save(BocraMesssageVO BocraMesssage) - 'BocraMesssage.subject' can not be null or empty");
        }
        if (BocraMesssage.getText() == null || BocraMesssage.getText().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.save(BocraMesssageVO BocraMesssage) - 'BocraMesssage.text' can not be null or empty");
        }
        try
        {
            return this.handleSave(BocraMesssage);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.save(BocraMesssageVO BocraMesssage)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #save(BocraMesssageVO)}
     * @param BocraMesssage BocraMesssageVO TODO: Model Documentation for
BocraMesssageService.save(BocraMesssage)
     * @return BocraMesssageVO
     * @throws Exception
     */
    protected abstract BocraMesssageVO handleSave(BocraMesssageVO BocraMesssage)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> search(final String criteria)
    {
        if (criteria == null || criteria.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.search(String criteria) - 'criteria' can not be null or empty");
        }
        try
        {
            return this.handleSearch(criteria);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.search(String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String)}
     * @param criteria String TODO: Model Documentation for
BocraMesssageService.search(criteria)
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleSearch(String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> search(final Integer pageNumber, final Integer pageSize, final String criteria)
    {
        if (criteria == null || criteria.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.search(Integer pageNumber, Integer pageSize, String criteria) - 'criteria' can not be null or empty");
        }
        try
        {
            return this.handleSearch(pageNumber, pageSize, criteria);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.search(Integer pageNumber, Integer pageSize, String criteria)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(Integer, Integer, String)}
     * @param pageNumber Integer TODO: Model Documentation for
BocraMesssageService.search(pageNumber)
     * @param pageSize Integer TODO: Model Documentation for
BocraMesssageService.search(pageSize)
     * @param criteria String TODO: Model Documentation for
BocraMesssageService.search(criteria)
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleSearch(Integer pageNumber, Integer pageSize, String criteria)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> loadTodayMessages()
    {
        try
        {
            return this.handleLoadTodayMessages();
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.loadTodayMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #loadTodayMessages()}
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleLoadTodayMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer clearSentMessages()
    {
        try
        {
            return this.handleClearSentMessages();
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.clearSentMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #clearSentMessages()}
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleClearSentMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer clearFailedMessages()
    {
        try
        {
            return this.handleClearFailedMessages();
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.clearFailedMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #clearFailedMessages()}
     * @return Integer
     * @throws Exception
     */
    protected abstract Integer handleClearFailedMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<BocraMesssageVO> loadDueSubmissionMessages()
    {
        try
        {
            return this.handleLoadDueSubmissionMessages();
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.loadDueSubmissionMessages()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #loadDueSubmissionMessages()}
     * @return Collection<BocraMesssageVO>
     * @throws Exception
     */
    protected abstract Collection<BocraMesssageVO> handleLoadDueSubmissionMessages()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean updateMessageStatus(final Long id, final BocraMesssageStatus status)
    {
        if (status == null)
        {
            throw new IllegalArgumentException(
                "bw.org.bocra.portal.message.BocraMesssageService.updateMessageStatus(Long id, BocraMesssageStatus status) - 'status' can not be null");
        }
        try
        {
            return this.handleUpdateMessageStatus(id, status);
        }
        catch (Throwable th)
        {
            throw new BocraMesssageServiceException(
                "Error performing 'BocraMesssageService.updateMessageStatus(Long id, BocraMesssageStatus status)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #updateMessageStatus(Long, BocraMesssageStatus)}
     * @param id Long TODO: Model Documentation for
BocraMesssageService.updateMessageStatus(id)
     * @param status BocraMesssageStatus TODO: Model Documentation for
BocraMesssageService.updateMessageStatus(status)
     * @return Boolean
     * @throws Exception
     */
    protected abstract Boolean handleUpdateMessageStatus(Long id, BocraMesssageStatus status)
        throws Exception;


    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return messageSource;
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}