// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 02/01/2023 19:22:26+0200.
//
package bw.org.bocra.portal.message;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collection;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * TODO: Model Documentation for CommunicationMessage
 */
// $entity.uniqueConstraints
@Entity
@Table(
    name = "COMMUNICATION_MESSAGE")
// Uncomment to enable caching for CommunicationMessage
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.read-write)
@NamedQuery(name = "CommunicationMessage.findAll", query = "SELECT c FROM CommunicationMessage AS c")
// HibernateEntity.vsl annotations merge-point
public class CommunicationMessage
    implements Serializable, Comparable<CommunicationMessage>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -8919194353300437030L;

    // Generate 13 attributes
    private String createdBy;

    /**
     * TODO: Model Documentation for CommunicationMessage.createdBy
     * @return this.createdBy String
     */
    @Column(name = "CREATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getCreatedBy()
    {
        return this.createdBy;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.createdBy
     * @param createdByIn String
     */
    public void setCreatedBy(String createdByIn)
    {
        this.createdBy = createdByIn;
    }

    private String updatedBy;

    /**
     * TODO: Model Documentation for CommunicationMessage.updatedBy
     * @return this.updatedBy String
     */
    @Column(name = "UPDATED_BY", unique = false, nullable = true, insertable = true, updatable = true)
    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.updatedBy
     * @param updatedByIn String
     */
    public void setUpdatedBy(String updatedByIn)
    {
        this.updatedBy = updatedByIn;
    }

    private LocalDateTime createdDate;

    /**
     * TODO: Model Documentation for CommunicationMessage.createdDate
     * @return this.createdDate LocalDateTime
     */
    @Column(name = "CREATED_DATE", unique = false, nullable = false, insertable = true, updatable = true)
    public LocalDateTime getCreatedDate()
    {
        return this.createdDate;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.createdDate
     * @param createdDateIn LocalDateTime
     */
    public void setCreatedDate(LocalDateTime createdDateIn)
    {
        this.createdDate = createdDateIn;
    }

    private LocalDateTime updatedDate;

    /**
     * TODO: Model Documentation for CommunicationMessage.updatedDate
     * @return this.updatedDate LocalDateTime
     */
    @Column(name = "UPDATED_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getUpdatedDate()
    {
        return this.updatedDate;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.updatedDate
     * @param updatedDateIn LocalDateTime
     */
    public void setUpdatedDate(LocalDateTime updatedDateIn)
    {
        this.updatedDate = updatedDateIn;
    }

    private Collection<String> destinations;

    /**
     * TODO: Model Documentation for CommunicationMessage.destinations
     * @return this.destinations Collection<String>
     */
    @ElementCollection
    public Collection<String> getDestinations()
    {
        return this.destinations;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.destinations
     * @param destinationsIn Collection<String>
     */
    public void setDestinations(Collection<String> destinationsIn)
    {
        this.destinations = destinationsIn;
    }

    private Boolean sendNow = Boolean.valueOf(true);

    /**
     * TODO: Model Documentation for CommunicationMessage.sendNow
     * @return this.sendNow Boolean
     */
    @Column(name = "SEND_NOW", unique = false, nullable = true, insertable = true, updatable = true)
    public Boolean getSendNow()
    {
        return this.sendNow;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.sendNow
     * @param sendNowIn Boolean
     */
    public void setSendNow(Boolean sendNowIn)
    {
        this.sendNow = sendNowIn;
    }

    private String subject;

    /**
     * TODO: Model Documentation for CommunicationMessage.subject
     * @return this.subject String
     */
    @Column(name = "SUBJECT", unique = false, nullable = false, insertable = true, updatable = true)
    public String getSubject()
    {
        return this.subject;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.subject
     * @param subjectIn String
     */
    public void setSubject(String subjectIn)
    {
        this.subject = subjectIn;
    }

    private String source;

    /**
     * TODO: Model Documentation for CommunicationMessage.source
     * @return this.source String
     */
    @Column(name = "SOURCE", unique = false, nullable = true, insertable = true, updatable = true)
    public String getSource()
    {
        return this.source;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.source
     * @param sourceIn String
     */
    public void setSource(String sourceIn)
    {
        this.source = sourceIn;
    }

    private String text;

    /**
     * TODO: Model Documentation for CommunicationMessage.text
     * @return this.text String
     */
    @Lob
    @Column(name = "TEXT", unique = false, nullable = false, insertable = true, updatable = true)
    public String getText()
    {
        return this.text;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.text
     * @param textIn String
     */
    public void setText(String textIn)
    {
        this.text = textIn;
    }

    private LocalDateTime dispatchDate;

    /**
     * TODO: Model Documentation for CommunicationMessage.dispatchDate
     * @return this.dispatchDate LocalDateTime
     */
    @Column(name = "DISPATCH_DATE", unique = false, nullable = true, insertable = true, updatable = true)
    public LocalDateTime getDispatchDate()
    {
        return this.dispatchDate;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.dispatchDate
     * @param dispatchDateIn LocalDateTime
     */
    public void setDispatchDate(LocalDateTime dispatchDateIn)
    {
        this.dispatchDate = dispatchDateIn;
    }

    private CommunicationMessagePlatform messagePlatform;

    /**
     * TODO: Model Documentation for
     * CommunicationMessage.messagePlatform
     * @return this.messagePlatform CommunicationMessagePlatform
     */
    @Column(name = "MESSAGE_PLATFORM", unique = false, nullable = false, insertable = true, updatable = true)
    @Enumerated(EnumType.STRING)
    public CommunicationMessagePlatform getMessagePlatform()
    {
        return this.messagePlatform;
    }

    /**
     * TODO: Model Documentation for
     * CommunicationMessage.messagePlatform
     * @param messagePlatformIn CommunicationMessagePlatform
     */
    public void setMessagePlatform(CommunicationMessagePlatform messagePlatformIn)
    {
        this.messagePlatform = messagePlatformIn;
    }

    private CommunicationMessageStatus status;

    /**
     * TODO: Model Documentation for CommunicationMessage.status
     * @return this.status CommunicationMessageStatus
     */
    @Column(name = "STATUS", unique = false, nullable = false, insertable = true, updatable = true)
    @Enumerated(EnumType.STRING)
    public CommunicationMessageStatus getStatus()
    {
        return this.status;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.status
     * @param statusIn CommunicationMessageStatus
     */
    public void setStatus(CommunicationMessageStatus statusIn)
    {
        this.status = statusIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for CommunicationMessage.id
     * @return this.id Long
     */
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="COMMUNICATION_MESSAGE_SEQ")
    @SequenceGenerator(name="COMMUNICATION_MESSAGE_SEQ", sequenceName="COMMUNICATION_MESSAGE_SEQ", allocationSize=1)
    @Column(name = "ID", unique = false, nullable = true, insertable = true, updatable = true)
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for CommunicationMessage.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    /**
     * Returns <code>true</code> if the argument is an CommunicationMessage instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof CommunicationMessage))
        {
            return false;
        }
        final CommunicationMessage that = (CommunicationMessage)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link CommunicationMessage}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link CommunicationMessage}.
         * @return new CommunicationMessage()
         */
        public static CommunicationMessage newInstance()
        {
            return new CommunicationMessage();
        }

        /**
         * Constructs a new instance of {@link CommunicationMessage}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param createdDate LocalDateTime
         * @param subject String
         * @param text String
         * @param messagePlatform CommunicationMessagePlatform
         * @param status CommunicationMessageStatus
         * @return newInstance
         */
        public static CommunicationMessage newInstance(LocalDateTime createdDate, String subject, String text, CommunicationMessagePlatform messagePlatform, CommunicationMessageStatus status)
        {
            final CommunicationMessage entity = new CommunicationMessage();
            entity.setCreatedDate(createdDate);
            entity.setSubject(subject);
            entity.setText(text);
            entity.setMessagePlatform(messagePlatform);
            entity.setStatus(status);
            return entity;
        }

        /**
         * Constructs a new instance of {@link CommunicationMessage}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param createdBy String
         * @param updatedBy String
         * @param createdDate LocalDateTime
         * @param updatedDate LocalDateTime
         * @param destinations Collection<String>
         * @param sendNow Boolean
         * @param subject String
         * @param source String
         * @param text String
         * @param dispatchDate LocalDateTime
         * @param messagePlatform CommunicationMessagePlatform
         * @param status CommunicationMessageStatus
         * @return newInstance CommunicationMessage
         */
        public static CommunicationMessage newInstance(String createdBy, String updatedBy, LocalDateTime createdDate, LocalDateTime updatedDate, Collection<String> destinations, Boolean sendNow, String subject, String source, String text, LocalDateTime dispatchDate, CommunicationMessagePlatform messagePlatform, CommunicationMessageStatus status)
        {
            final CommunicationMessage entity = new CommunicationMessage();
            entity.setCreatedBy(createdBy);
            entity.setUpdatedBy(updatedBy);
            entity.setCreatedDate(createdDate);
            entity.setUpdatedDate(updatedDate);
            entity.setDestinations(destinations);
            entity.setSendNow(sendNow);
            entity.setSubject(subject);
            entity.setSource(source);
            entity.setText(text);
            entity.setDispatchDate(dispatchDate);
            entity.setMessagePlatform(messagePlatform);
            entity.setStatus(status);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(CommunicationMessage other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getCreatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedBy().compareTo(other.getCreatedBy()));
            }
            if (this.getUpdatedBy() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedBy().compareTo(other.getUpdatedBy()));
            }
            if (this.getCreatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCreatedDate().compareTo(other.getCreatedDate()));
            }
            if (this.getUpdatedDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getUpdatedDate().compareTo(other.getUpdatedDate()));
            }
            if (this.getDestinations() != null)
            {
                // Compare Collection sizes for ordering
                cmp = (cmp != 0 ? cmp : Math.abs(this.getDestinations().size()-other.getDestinations().size()));
            }
            if (this.getSendNow() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSendNow().compareTo(other.getSendNow()));
            }
            if (this.getSubject() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSubject().compareTo(other.getSubject()));
            }
            if (this.getSource() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSource().compareTo(other.getSource()));
            }
            if (this.getText() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getText().compareTo(other.getText()));
            }
            if (this.getDispatchDate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDispatchDate().compareTo(other.getDispatchDate()));
            }
            if (this.getMessagePlatform() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMessagePlatform().compareTo(other.getMessagePlatform()));
            }
            if (this.getStatus() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStatus().compareTo(other.getStatus()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("CommunicationMessage(");
        sb.append(" createdBy=").append(getCreatedBy());
        sb.append(" updatedBy=").append(getUpdatedBy());
        sb.append(" createdDate=").append(getCreatedDate());
        sb.append(" updatedDate=").append(getUpdatedDate());
        sb.append(" destinations=").append(getDestinations());
        sb.append(" sendNow=").append(getSendNow());
        sb.append(" subject=").append(getSubject());
        sb.append(" source=").append(getSource());
        sb.append(" text=").append(getText());
        sb.append(" dispatchDate=").append(getDispatchDate());
        sb.append(" messagePlatform=").append(getMessagePlatform());
        sb.append(" status=").append(getStatus());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}