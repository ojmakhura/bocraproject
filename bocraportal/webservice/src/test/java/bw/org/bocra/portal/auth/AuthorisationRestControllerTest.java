// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.auth;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.GenericTestData;
import bw.org.bocra.portal.access.AccessPointRepository;
import bw.org.bocra.portal.access.AccessPointRestController;
import bw.org.bocra.portal.access.AccessPointService;
import bw.org.bocra.portal.access.AccessPointTestData;
import bw.org.bocra.portal.access.AccessPointVO;
import bw.org.bocra.portal.access.type.AccessPointTypeRepository;
import bw.org.bocra.portal.access.type.AccessPointTypeRestController;
import bw.org.bocra.portal.access.type.AccessPointTypeService;
import bw.org.bocra.portal.access.type.AccessPointTypeTestData;
import bw.org.bocra.portal.access.type.AccessPointTypeVO;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@Transactional
public class AuthorisationRestControllerTest extends GenericRestTest<AuthorisationVO, AuthorisationRepository, AuthorisationCriteria, AuthorisationRestController> {

    // @ClassRule
    // public static PostgreSQLContainer postgreSQLContainer = BocraportalTestContainer.getInstance();

    private String path = "/authorisation";

    protected Logger logger = LoggerFactory.getLogger(AuthorisationRestControllerTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;


    @Autowired
    protected AuthorisationService authorisationService;

    @Autowired
    protected AuthorisationRepository authorisationRepository;

    @Autowired
    protected AccessPointService accessPointService;

    @Autowired
    protected AccessPointRestController accessPointRestController;

    @Autowired
    protected AccessPointRepository accessPointRepository;

    @Autowired
    protected AccessPointTypeService accessPointTypeService;

    @Autowired
    protected AccessPointTypeRestController accessPointTypeRestController;

    @Autowired
    protected AccessPointTypeRepository accessPointTypeRepository;

    @Autowired
    private AccessPointTestData accessPointTestData;

    @Autowired
    private AccessPointTypeTestData accessPointTypeTestData;

    @Autowired
    private AuthorisationTestData authorisationTestData;

    @Autowired
    public AuthorisationRestControllerTest(AuthorisationRestController restController,
            GenericTestData<AuthorisationVO, AuthorisationRepository, AuthorisationCriteria, AuthorisationRestController> testData) {
        super(restController, testData);
        
    }

    @BeforeEach
    public void clean() {
        authorisationTestData.clean();
        accessPointTestData.clean();
        accessPointTypeTestData.clean();
    }

    public Collection<AuthorisationVO> dummyData(int size) {

        return authorisationTestData.generateSequentialData(size);
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveAuthorisationTest_missing() {

        ResponseEntity<?> response = restController.save(null);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("information is missing"));

    }
    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveAuthorisationTest_missingAccessPoint() {
        AuthorisationVO auth = authorisationTestData.createUnsavedData();

        auth.setAccessPoint(null);
        ResponseEntity<?> response = restController.save(auth);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedBy() {
        AuthorisationVO auth = testData.createUnsavedData();
        auth.setCreatedBy(null);

        ResponseEntity<?> response = restController.save(auth);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("created-by value is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedDate() {

        AuthorisationVO auth = testData.createUnsavedData();
        auth.setCreatedDate(null);

        ResponseEntity<?> response = restController.save(auth);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("created date value is missing"));
    }
    // private AccessPointVO createDefaultAccessPoint() {

    //     AccessPointTypeVO type = new AccessPointTypeVO();

    //     type.setCode("test");
    //     type.setName("Test Type");
    //     type.setDescription("This is a test");

    //     type = accessPointTypeService.save(type);

    //     AccessPointVO point = new AccessPointVO();

    //     point.setAccessPointType(type);
    //     point.setCreatedBy("testuser4");
    //     point.setCreatedDate(LocalDateTime.now());
    //     point.setName("Test Type ");
    //     point.setUrl("/test");

    //     point = accessPointService.save(point);

    //     return point;
    // }


    @Override
    protected void basicCompareAssertions(AuthorisationVO o1, AuthorisationVO o2) {

        AuthorisationVO auth1 = (AuthorisationVO) o1;
        AuthorisationVO auth2 = (AuthorisationVO) o2;

        Assertions.assertEquals(auth1.getId(), auth2.getId());
        Assertions.assertEquals(auth1.getAccessPoint().getId(), auth2.getAccessPoint().getId());
    }
    
    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void assignMenuSection() {

    }


    @Override
    protected Class<AuthorisationCriteria> getCriteriaClass() {
        return AuthorisationCriteria.class;
    }


    @Override
    protected Class<AuthorisationVO> getDataClass() {
        return AuthorisationVO.class;
    }


    @Override
    protected void searchResultsAssertions(ResponseEntity<?> response) {
        // TODO Auto-generated method stub
        Collection<AuthorisationVO> types = (Collection<AuthorisationVO>) response.getBody();
        Assertions.assertEquals(types.size(), 7);
        
    }

    // @Override
    // protected ResponseEntity<?> handleFindById(Long id) {
    //     return authorisationRestController.findById(id);
    // }


    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void findByRolesAndUrl() {
    //     // TODO::
    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void findRestrictedViewItems() {
    //     // TODO::
    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getAccessTypeCodeAuthorisations() {
    //     // TODO::
    // }
    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void remove() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void save() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void search() {

    // }

    // @Override
    // protected ResponseEntity<?> handleRemove(Long id) {
        
    //     return authorisationRestController.remove(id);
    // }

    // @Override
    // protected ResponseEntity<?> handleSearch(Object criteria) {
        
    //     return authorisationRestController.search((AuthorisationCriteria) criteria);
    // }

    // @Override
    // protected ResponseEntity<?> handlePagedSearch(int pagenumber, int pageSize, Object criteria) {
        
    //     return null;
    // }

    // @Override
    // protected ResponseEntity<?> handleSave(Object o) {
        
    //     return authorisationRestController.save((AuthorisationVO) o);
    // }

}