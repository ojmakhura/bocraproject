// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.licensee;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.GenericTestData;
import bw.org.bocra.portal.document.DocumentService;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
public class LicenseeRestControllerTest extends GenericRestTest<LicenseeVO, LicenseeRepository, LicenseeCriteria, LicenseeRestController> {

    private String path = "/licensee";

    protected Logger logger = LoggerFactory.getLogger(LicenseeRestControllerTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    protected LicenseeService licenseeService;

    @Autowired
    private LicenseeTestData licenseeTestData;
    protected DocumentService documentService;

    @Autowired
    public LicenseeRestControllerTest(LicenseeRestController restController,
            GenericTestData<LicenseeVO, LicenseeRepository, LicenseeCriteria, LicenseeRestController> testData) {
        super(restController, testData);
    }

    @BeforeEach
    public void clean() {
        licenseeTestData.clean();
    }

    public Collection<LicenseeVO> dummyData(int size) {

        return licenseeTestData.generateSequentialData(size);
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missing() {

        ResponseEntity<?> response = restController.save(null);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("information is missing"));

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missingUin() {
        LicenseeVO licensee = licenseeTestData.createUnsavedData();

        licensee.setUin(UUID.randomUUID().toString());
        ResponseEntity<?> response = restController.save(licensee);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        logger.info(response.getBody().toString());
        // String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("Uin is missing"));

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missingLicenseeName() {
        LicenseeVO licensee = licenseeTestData.createUnsavedData();

        licensee.setLicenseeName(null);
        ResponseEntity<?> response = restController.save(licensee);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("name is missing"));

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missingStatus() {
        LicenseeVO licensee = licenseeTestData.createUnsavedData();

        licensee.setStatus(null);
        ResponseEntity<?> response = restController.save(licensee);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        Assertions.assertTrue(message.contains("status is missing"));

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missingAlias() {
        LicenseeVO licensee = licenseeTestData.createUnsavedData();

        licensee.setAlias(null);

        ResponseEntity<?> response = restController.save(licensee);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        licensee = (LicenseeVO) response.getBody();
        Assertions.assertNotNull(licensee);
        Assertions.assertNotNull(licensee.getId());
        logger.info(licensee.toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenseeTest_missingAddress() {
        LicenseeVO licensee = licenseeTestData.createUnsavedData();

        licensee.setAddress(null);

        ResponseEntity<?> response = restController.save(licensee);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        licensee = (LicenseeVO) response.getBody();
        Assertions.assertNotNull(licensee);
        Assertions.assertNotNull(licensee.getId());
        logger.info(licensee.toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenceTypeTest_sameUin() {
        LicenseeVO exists = (LicenseeVO) dummyData(1).iterator().next();

        LicenseeVO licensee = new LicenseeVO();

        licensee.setUin(exists.getUin());
        licensee.setAddress("test address");
        licensee.setLicenseeName("Test Licensee");
        licensee.setAlias("Test");
        licensee.setStatus(LicenseeStatus.ACTIVE);
        licensee.setCreatedBy("testuser4");
        licensee.setCreatedDate(LocalDateTime.now());
        ResponseEntity<?> response = restController.save(licensee);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        logger.info(response.getBody().toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenceTypeTest_sameStatus() {
        LicenseeVO exists = (LicenseeVO) dummyData(1).iterator().next();

        LicenseeVO licensee = new LicenseeVO();

        licensee.setStatus(exists.getStatus());
        licensee.setAddress("test address");
        licensee.setLicenseeName("Test Licensee");
        licensee.setAlias("Test");
        licensee.setUin(UUID.randomUUID().toString());
        licensee.setCreatedBy("testuser4");
        licensee.setCreatedDate(LocalDateTime.now());
        ResponseEntity<?> response = restController.save(licensee);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        logger.info(response.getBody().toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenceTypeTest_sameLicenseeName() {
        LicenseeVO exists = (LicenseeVO) dummyData(1).iterator().next();

        LicenseeVO licensee = new LicenseeVO();

        licensee.setLicenseeName(exists.getLicenseeName());
        licensee.setAddress("test address");
        licensee.setStatus(LicenseeStatus.ACTIVE);
        licensee.setAlias("Test");
        licensee.setUin(UUID.randomUUID().toString());
        licensee.setCreatedBy("testuser4");
        licensee.setCreatedDate(LocalDateTime.now());
        ResponseEntity<?> response = restController.save(licensee);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        logger.info(response.getBody().toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenceTypeTest_sameAlias() {
        LicenseeVO exists = (LicenseeVO) dummyData(1).iterator().next();

        LicenseeVO licensee = new LicenseeVO();

        licensee.setAlias(exists.getAlias());
        licensee.setAddress("test address");
        licensee.setStatus(LicenseeStatus.ACTIVE);
        licensee.setLicenseeName("Test Licensee");
        licensee.setUin(UUID.randomUUID().toString());
        licensee.setCreatedBy("testuser4");
        licensee.setCreatedDate(LocalDateTime.now());
        ResponseEntity<?> response = restController.save(licensee);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        logger.info(response.getBody().toString());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void saveLicenceTypeTest_existingAddress() {
        LicenseeVO exists = (LicenseeVO) dummyData(1).iterator().next();

        LicenseeVO licensee = new LicenseeVO();

        licensee.setAddress(exists.getAddress());
        licensee.setAlias("Test");
        licensee.setStatus(LicenseeStatus.ACTIVE);
        licensee.setLicenseeName("Test Licensee");
        licensee.setUin(UUID.randomUUID().toString());
        licensee.setCreatedBy("testuser4");
        licensee.setCreatedDate(LocalDateTime.now());
        ResponseEntity<?> response = restController.save(licensee);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());

    }

    @Override
    protected void basicCompareAssertions(LicenseeVO o1, LicenseeVO o2) {
        
        LicenseeVO l1 = (LicenseeVO)o1;
        LicenseeVO l2 = (LicenseeVO)o2;

        Assertions.assertEquals(l1.getId(), l2.getId());   
        Assertions.assertEquals(l1.getLicenseeName(), l2.getLicenseeName());  
        Assertions.assertEquals(l1.getUin(), l2.getUin());
        Assertions.assertEquals(l1.getStatus(), l2.getStatus());        
    }

    @Override
    protected Class<LicenseeCriteria> getCriteriaClass() {
        return LicenseeCriteria.class;
    }

    @Override
    protected Class<LicenseeVO> getDataClass() {
        return LicenseeVO.class;
    }

    @Override
    protected void searchResultsAssertions(ResponseEntity<?> response) {
        // TODO Auto-generated method stub
        Collection<LicenseeVO> types = (Collection<LicenseeVO>) response.getBody();
        Assertions.assertEquals(types.size(), 7);
        
    }
}