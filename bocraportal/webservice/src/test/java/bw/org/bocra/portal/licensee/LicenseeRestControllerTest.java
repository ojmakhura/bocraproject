// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.licensee;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.document.DocumentService;
import bw.org.bocra.portal.user.LicenseeUserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.Collection;
import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
public class LicenseeRestControllerTest extends GenericRestTest {

    @ClassRule
    public static PostgreSQLContainer postgreSQLContainer = BocraportalTestContainer.getInstance();

    private String path = "/licensee";

    protected Logger logger = LoggerFactory.getLogger(LicenseeRestControllerTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private LicenseeRestController licenseeRestController;

    @Autowired
    protected LicenseeService licenseeService;

    @Autowired
    protected LicenseeUserService licenseeUserService;

    @Autowired
    private LicenseeTestData licenseeTestData;

    @Autowired
    protected DocumentService documentService;

    @BeforeEach
    public void clean() {
    }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void addDocument() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void addSector() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void findById() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getAll() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getAllPaged() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getDocuments() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getForms() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getFormSubmissions() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getLicences() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getReportConfigurations() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getReports() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getSectors() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getShareholders() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void remove() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void removeSector() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void save() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void search() {

    // }

    @Override
    protected Collection<?> dummyData(int size) {
        return licenseeTestData.generateSequentialData(size);
    }

    @Override
    protected Object unsavedDummyData() {
        return licenseeTestData.createUnsavedLicensee();
    }

    @Override
    protected ResponseEntity<?> handleGetAll() {
        return licenseeRestController.getAll();
    }

    @Override
    protected ResponseEntity<?> handleGetAllPaged(int pageNumber, int pageSize) {
        return licenseeRestController.getAllPaged(pageNumber, pageSize);
    }

    @Override
    protected ResponseEntity<?> handleFindById(Long id) {
        return licenseeRestController.findById(id);
    }

    @Override
    protected ResponseEntity<?> handleRemove(Long id) {
        return licenseeRestController.remove(id);
    }

    @Override
    protected ResponseEntity<?> handleSearch(Object criteria) {
        return licenseeRestController.search((LicenseeCriteria) criteria);
    }

    @Override
    protected ResponseEntity<?> handlePagedSearch(int pagenumber, int pageSize, Object criteria) {
        return null;
    }

    @Override
    protected ResponseEntity<?> handleSave(Object o) {
        
        return licenseeRestController.save((LicenseeVO) o);
    }

    @Override
    protected void basicCompareAssertions(Object o1, Object o2) {
        
        LicenseeVO l1 = (LicenseeVO)o1;
        LicenseeVO l2 = (LicenseeVO)o2;

        Assertions.assertEquals(l1.getId(), l2.getId());   
        Assertions.assertEquals(l1.getLicenseeName(), l2.getLicenseeName());  
        Assertions.assertEquals(l1.getUin(), l2.getUin());        
    }

    @Override
    protected Collection<?> searchData() {
        // TODO Auto-generated method stub
        return licenseeTestData.generateSearchData();
    }

    @Override
    protected Object searchCriteria() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected Object searchCriteriaNone() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected Object searchCriteriaEmpty() {
        // TODO Auto-generated method stub
        return null;
    }

}