// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.access;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;

import com.fasterxml.jackson.databind.ObjectMapper;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.access.type.AccessPointTypeRepository;
import bw.org.bocra.portal.access.type.AccessPointTypeRestController;
import bw.org.bocra.portal.access.type.AccessPointTypeService;
import bw.org.bocra.portal.access.type.AccessPointTypeTestData;
import bw.org.bocra.portal.access.type.AccessPointTypeVO;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@Transactional
public class AccessPointRestControllerTest extends GenericRestTest {

    @ClassRule
    public static PostgreSQLContainer postgreSQLContainer = BocraportalTestContainer.getInstance();

    private String path = "/access";

    protected Logger logger = LoggerFactory.getLogger(AccessPointRestControllerTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private AccessPointRestController accessPointRestController;

    @Autowired
    private AccessPointTypeService accessPointTypeService;

    @Autowired
    private AccessPointTypeRestController accessPointTypeRestController;

    @Autowired
    protected AccessPointService accessPointService;

    @Autowired
    private AccessPointRepository accessPointRepository;

    @Autowired
    private AccessPointTypeRepository accessPointTypeRepository;

    @Autowired
    private AccessPointTestData accessPointTestData;

    @Autowired
    private AccessPointTypeTestData accessPointTypeTestData;


    public Collection<?> dummyData(int size) {

        return accessPointTestData.generateSequentialData(size);
    }

    @BeforeEach
    public void clean() {
        accessPointRepository.deleteAll();
        accessPointTypeRepository.deleteAll();
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_noType() {
        
        AccessPointVO point = accessPointTestData.createUnsavedAccessPointNoType();

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(
            message.contains("access point type is missing")
            || message.contains("access point type or its id is missing")
        );
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_badType() {

        AccessPointVO point = accessPointTestData.createUnsavedAccessPointUnsavedType();

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(
            message.contains("access point type is not valid")
            || message.contains("The access point type is invalid")
            || message.contains("access point type or its id is missing")
        );
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedDate() {

        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();
        point.setCreatedDate(null);

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("created date value is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedBy() {
        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();
        System.out.println(point);
        point.setCreatedBy(null);

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        System.out.println(response.getBody());
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("created-by value is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullName() {
        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();

        point.setName(null);

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("access point name is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_emptyName() {
        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();
        point.setName(" ");

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("access point name is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullUrl() {
        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();
        point.setUrl(null);

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("access point url is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_emptyUrl() {
        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();
        point.setUrl(" ");

        ResponseEntity<?> response = accessPointRestController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("access point url is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_sameName() {
        AccessPointTypeVO type = accessPointTypeTestData.generateSequentialData(1).iterator().next();

        AccessPointVO point = new AccessPointVO();

        point.setAccessPointType(type);
        point.setCreatedBy("testuser4");
        point.setCreatedDate(LocalDateTime.now());
        point.setName("Test ");
        point.setUrl("/test");

        ResponseEntity<?> response = accessPointRestController.save(point);

        point = new AccessPointVO();

        point.setAccessPointType(type);
        point.setCreatedBy("testuser4");
        point.setCreatedDate(LocalDateTime.now());
        point.setName("Test");
        point.setUrl("/test2");

        response = accessPointRestController.save(point);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        point = (AccessPointVO) response.getBody();
        Assertions.assertNotNull(point);
        Assertions.assertNotNull(point.getId());
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void getAllPaged() {
        dummyData(25);
        int pageNumber = 2;
        int pageSize = 4;
        ResponseEntity<?> response = accessPointRestController.getAllPaged(pageNumber, pageSize);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Collection<AccessPointVO> types = (Collection<AccessPointVO>) response.getBody();
        Assertions.assertTrue(CollectionUtils.isNotEmpty(types));
        Assertions.assertEquals(types.size(), pageSize);
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void getAllPaged_lastPage() {
        dummyData(15);
        int pageNumber = 3;
        int pageSize = 4;

        ResponseEntity<?> response = accessPointRestController.getAllPaged(pageNumber, pageSize);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Collection<AccessPointVO> types = (Collection<AccessPointVO>) response.getBody();
        Assertions.assertTrue(CollectionUtils.isNotEmpty(types));
        Assertions.assertEquals(types.size(), 3);
    }

    protected Collection<?> searchData() {

        return accessPointTestData.generateSearchData();

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void pagedSearch() {
        this.searchData();

        AccessPointCriteria criteria = new AccessPointCriteria();
        criteria.setUrl("type");

        ResponseEntity<?> response = accessPointRestController.pagedSearch(2, 2, criteria);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Collection<AccessPointVO> points = (Collection<AccessPointVO>) response.getBody();
        
        Assertions.assertTrue(CollectionUtils.isNotEmpty(points));
        Assertions.assertEquals(points.size(), 1);
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void remove() {
        dummyData(15);
        ResponseEntity<?> response = accessPointRestController.getAll();
        Collection<AccessPointVO> points = (Collection<AccessPointVO>) response.getBody();
        AccessPointVO t = points.iterator().next();

        response = accessPointRestController.remove(t.getId());
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Assertions.assertTrue((boolean) response.getBody());

        response = accessPointRestController.getAll();
        Collection<AccessPointVO> points2 = (Collection<AccessPointVO>) response.getBody();

        Assertions.assertEquals(points2.size(), points.size() - 1);

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void remove_non_existing() {
        dummyData(10);
        ResponseEntity<?> response = accessPointRestController.getAll();
        Collection<AccessPointVO> types = (Collection<AccessPointVO>) response.getBody();

        response = accessPointRestController.remove(300L);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.NOT_FOUND);
        Assertions.assertTrue(response.getBody().toString().contains("Could not delete access point"));

        response = accessPointRestController.getAll();
        Collection<AccessPointVO> types2 = (Collection<AccessPointVO>) response.getBody();

        Assertions.assertEquals(types2.size(), types.size());

    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void search_type() {
        this.searchData();

        AccessPointCriteria criteria = new AccessPointCriteria();
        criteria.setUrl("type");

        ResponseEntity<?> response = accessPointRestController.search(criteria);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Collection<AccessPointTypeVO> types = (Collection<AccessPointTypeVO>) response.getBody();
        Assertions.assertTrue(CollectionUtils.isNotEmpty(types));
        Assertions.assertEquals(types.size(), 5);
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void search_no_results() {
        
        this.searchData();

        AccessPointCriteria criteria = new AccessPointCriteria();
        criteria.setUrl("types");

        ResponseEntity<?> response = accessPointRestController.search(criteria);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        Collection<AccessPointTypeVO> types = (Collection<AccessPointTypeVO>) response.getBody();
        Assertions.assertEquals(types.size(), 0);
    }

    @Override
    protected Object unsavedDummyData() {

        AccessPointVO point = accessPointTestData.createUnsavedAccessPoint();

        return point;
    }

    @Override
    protected ResponseEntity<?> handleGetAll() {
        return accessPointRestController.getAll();
    }

    @Override
    protected ResponseEntity<?> handleGetAllPaged(int pageNumber, int pageSize) {
        
        return accessPointRestController.getAllPaged(pageNumber, pageSize);
    }

    @Override
    protected ResponseEntity<?> handleFindById(Long id) {
        return accessPointRestController.findById(id);
    }

    @Override
    protected ResponseEntity<?> handleRemove(Long id) {
        return accessPointRestController.remove(id);
    }

    @Override
    protected ResponseEntity<?> handleSearch(Object criteria) {
        return accessPointRestController.search((AccessPointCriteria)criteria);
    }

    @Override
    protected ResponseEntity<?> handlePagedSearch(int pagenumber, int pageSize, Object criteria) {
        
        return accessPointRestController.pagedSearch(pagenumber, pageSize, (AccessPointCriteria)criteria);
    }

    @Override
    protected ResponseEntity<?> handleSave(Object o) {
        
        return accessPointRestController.save((AccessPointVO)o);
    }

    @Override
    protected void basicCompareAssertions(Object o1, Object o2) {
        // TODO Auto-generated method stub
        AccessPointVO point1 = (AccessPointVO)o1;
        AccessPointVO point2 = (AccessPointVO)o2;
        
        Assertions.assertEquals(point1.getId(), point2.getId());
        Assertions.assertEquals(point1.getUrl(), point2.getUrl());
        Assertions.assertEquals(point1.getName(), point2.getName());
    }

    @Override
    protected Object searchCriteria() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected Object searchCriteriaNone() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected Object searchCriteriaEmpty() {
        // TODO Auto-generated method stub
        return null;
    }

}