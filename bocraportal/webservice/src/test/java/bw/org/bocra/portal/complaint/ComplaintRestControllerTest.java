// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.complaint;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.GenericTestData;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.util.Collection;
import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;

@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
public class ComplaintRestControllerTest extends GenericRestTest<ComplaintVO, ComplaintRepository, String, ComplaintRestController>{

    @ClassRule
    public static PostgreSQLContainer postgreSQLContainer = BocraportalTestContainer.getInstance();

    private String path = "/complaint";

    protected Logger logger = LoggerFactory.getLogger(ComplaintRestControllerTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ComplaintRestController complaintRestController;

    @Autowired
    protected ComplaintService complaintService;

    @Autowired
    private ComplaintTestData complaintTestData;

    @Autowired
    public ComplaintRestControllerTest(ComplaintRestController restController, ComplaintTestData testData) {
        super(restController, testData);
        //TODO Auto-generated constructor stub
    }    

    @BeforeEach
    public void clean() {
        testData.clean();
        complaintTestData.clean();
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_noType() {
        
        ComplaintVO complaint = ((ComplaintTestData)testData).createUnsavedComplaintNoType();

        ResponseEntity<?> response = restController.save(complaint);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
     
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_badType() {

        ComplaintVO complaint = ((ComplaintTestData)testData).createUnsavedComplaintUnsavedType();

        ResponseEntity<?> response = restController.save(complaint);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        
    }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void save_nullCreatedDate() {

    //     ComplaintVO complaint = testData.createUnsavedData();
    //     complaint.setCreatedDate(null);

    //     ResponseEntity<?> response = restController.save(complaint);
    //     Assertions.assertNotNull(response);
    //     Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
    //     String message = response.getBody().toString();
    //     System.out.println(message);
    //     Assertions.assertTrue(message.contains("created date value is missing"));
    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void save_nullFirstName() {
    //     ComplaintVO complaint = testData.createUnsavedData();

    //     complaint.setFirstName(null);

    //     ResponseEntity<?> response = restController.save(complaint);
    //     Assertions.assertNotNull(response);
    //     Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
    //     String message = response.getBody().toString();
    //     System.out.println(message);
    //     Assertions.assertTrue(message.contains("access point name is missing"));
    // }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_emptyFirstName() {
        ComplaintVO point = testData.createUnsavedData();
        point.setFirstName(" ");

        ResponseEntity<?> response = restController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        System.out.println(message);
        Assertions.assertTrue(message.contains("access point name is missing"));
    }

    @Override
    protected Class<String> getCriteriaClass() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected Class<ComplaintVO> getDataClass() {
        // TODO Auto-generated method stub
        return ComplaintVO.class;
    }

    @Override
    protected void basicCompareAssertions(ComplaintVO o1, ComplaintVO o2) {
        // TODO Auto-generated method stub
        ComplaintVO complaint1 = (ComplaintVO)o1;
        ComplaintVO complaint2 = (ComplaintVO)o2;
        
        Assertions.assertEquals(complaint1.getDetails(), complaint2.getDetails());
        Assertions.assertEquals(complaint1.getCreatedDate(), complaint2.getCreatedDate());
        Assertions.assertEquals(complaint1.getFirstName(), complaint2.getFirstName());
        Assertions.assertEquals(complaint1.getSurname(), complaint2.getSurname());
        Assertions.assertEquals(complaint1.getEmail(), complaint2.getEmail());
        Assertions.assertEquals(complaint1.getStatus(), complaint2.getStatus());
        
    }

    @Override
    protected void searchResultsAssertions(ResponseEntity<?> response) {
        // TODO Auto-generated method stub
        Collection<ComplaintVO> types = (Collection<ComplaintVO>) response.getBody();
        Assertions.assertEquals(types.size(), 7);
        
    }

}