// license-header java merge-lice
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWS.java.vsl in andromda-webservices. Do not modify by hand!.
//
package bw.org.bocra.portal.licence;

import javax.transaction.Transactional;

import bw.org.bocra.portal.BocraportalTestContainer;
import bw.org.bocra.portal.GenericRestTest;
import bw.org.bocra.portal.GenericTestData;
import bw.org.bocra.portal.document.DocumentService;
import bw.org.bocra.portal.licence.type.LicenceTypeTestData;
import bw.org.bocra.portal.licence.type.LicenceTypeVO;
import bw.org.bocra.portal.licensee.LicenseeTestData;
import bw.org.bocra.portal.licensee.LicenseeVO;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.ClassRule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.PostgreSQLContainer;


@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@Transactional
public class LicenceRestControllerTest extends GenericRestTest<LicenceVO,LicenceRepository, LicenceCriteria, LicenceRestController>{ 


    @ClassRule
    public static PostgreSQLContainer postgreSQLContainer = BocraportalTestContainer.getInstance();

    private String path = "/license";

    protected Logger logger = LoggerFactory.getLogger(LicenceRestControllerTest.class);

    @Autowired
    protected LicenceTypeTestData licenceTypeTestData;

    @Autowired
    protected LicenceTestData licenceTestData;

    @Autowired
    protected LicenceService licenceService;

    @Autowired
    protected LicenseeTestData licenseeTestData;

    @Autowired
    public LicenceRestControllerTest(LicenceRestController restController, LicenceTestData testData) {
        super(restController, testData);
    }

    @BeforeEach
    public void clean() {
        testData.clean();
        licenceTypeTestData.clean();
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_noType() {
        
        LicenceVO point = ((LicenceTestData)testData).createUnsavedLicenceNoType();

        ResponseEntity<?> response = restController.save(point);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        // Assertions.assertTrue(
        //     message.contains("licence type is missing")
        //     || message.contains("licence type or its id is missing")
        // );
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_badType() {

        LicenceVO licence = ((LicenceTestData)testData).createUnsavedLicenceUnsavedType();

        ResponseEntity<?> response = restController.save(licence);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(
        //     message.contains("licence type is not valid")
        //     || message.contains("The licence type is invalid")
        //     || message.contains("licence type or its id is missing")
        // );
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedDate() {

        LicenceVO lice = testData.createUnsavedData();

        lice.setCreatedDate(null);
        ResponseEntity<?> response = restController.save(lice);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("created date value is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullCreatedBy() {
        LicenceVO lice = testData.createUnsavedData();
        lice.setCreatedBy(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("created-by value is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullLicenseeName() {
        LicenceVO lice = testData.createUnsavedData();

        lice.setLicensee(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("licensee name is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullLicenceName() {
        LicenceVO lice = testData.createUnsavedData();

        lice.setLicenceType(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("licence type is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullStatus() {
        LicenceVO lice = testData.createUnsavedData();


        lice.setStatus(null);
        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("status is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullLicenceNumber() {
        LicenceVO lice = testData.createUnsavedData();

        lice.setLicenceNumber(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("licence number is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullStartDate() {
        LicenceVO lice = testData.createUnsavedData();

        lice.setLicenceNumber(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("Start date is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_nullEndDate() {
        LicenceVO lice = testData.createUnsavedData();

        lice.setLicenceNumber(null);

        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        logger.info(response.getBody().toString());
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("End date is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_emptyLicenceNumber() {
        LicenceVO lice = testData.createUnsavedData();
        lice.setLicenceNumber(" ");
        ResponseEntity<?> response = restController.save(lice);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.BAD_REQUEST);
        String message = response.getBody().toString();
        // Assertions.assertTrue(message.contains("licence number is missing"));
    }

    @WithMockUser(username = "testuser4", password = "testuser1")
    @Test
    public void save_sameLicenceNumber() {
        LicenceTypeVO type = licenceTypeTestData.generateSequentialData(1).iterator().next();
        LicenseeVO licensee = licenseeTestData.generateSequentialData(1).iterator().next();

        LicenceVO lice = new LicenceVO();

        lice.setLicenceType(type);
        lice.setCreatedBy("testuser4");
        lice.setCreatedDate(LocalDateTime.now());
        lice.setLicensee(licensee);
        lice.setLicenceNumber(UUID.randomUUID().toString());
        lice.setProvisional(false);
        lice.setStartDate(LocalDate.now().plusWeeks(1));
        lice.setEndDate(lice.getStartDate().plusYears(2));
        lice.setStatus(LicenceStatus.ACTIVE);

        ResponseEntity<?> response = restController.save(lice);

        lice = new LicenceVO();

        lice.setLicenceType(type);
        lice.setCreatedBy("testuser4");
        lice.setCreatedDate(LocalDateTime.now());
        lice.setLicensee(licensee);
        lice.setLicenceNumber(UUID.randomUUID().toString());
        lice.setProvisional(false);
        lice.setStartDate(LocalDate.now().plusWeeks(1));
        lice.setEndDate(lice.getStartDate().plusYears(2));
        lice.setStatus(LicenceStatus.ACTIVE);

        response = restController.save(lice);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.getStatusCode(), HttpStatus.OK);
        lice = (LicenceVO) response.getBody();
        Assertions.assertNotNull(lice);
        Assertions.assertNotNull(lice.getId());
    }

    @Override
    protected void basicCompareAssertions(LicenceVO o1, LicenceVO o2) {
        // TODO Auto-generated method stub
        LicenceVO lice1 = (LicenceVO)o1;
        LicenceVO lice2 = (LicenceVO)o2;
        
        Assertions.assertEquals(lice1.getId(), lice2.getId());
        Assertions.assertEquals(lice1.getLicenceType(), lice2.getLicenceType());
        Assertions.assertEquals(lice1.getLicensee(), lice2.getLicensee());
        Assertions.assertEquals(lice1.getStatus(), lice2.getStatus());
        Assertions.assertEquals(lice1.getLicenceNumber(), lice2.getLicenceNumber());
        Assertions.assertEquals(lice1.getStartDate(), lice2.getStartDate());
        Assertions.assertEquals(lice1.getEndDate(), lice2.getEndDate());
        
    }

    @Override
    protected void searchResultsAssertions(ResponseEntity<?> response) {
        // TODO Auto-generated method stub
        
    }

    @Override
    protected Class<LicenceCriteria> getCriteriaClass() {
        // TODO Auto-generated method stub
        return LicenceCriteria.class;
    }

    @Override
    protected Class<LicenceVO> getDataClass() {
        // TODO Auto-generated method stub
        return LicenceVO.class;
    }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void addDocument() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void findById() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getAll() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void getAllPaged() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void remove() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void save() {

    // }

    // @WithMockUser(username = "testuser4", password = "testuser1")
    // @Test
    // public void search() {

    // }

}