// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.section;

import bw.org.bocra.portal.form.FormVO;
import java.util.Collection;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/form/section")
//@org.springframework.web.bind.annotation.CrossOrigin()
public class FormSectionRestControllerImpl extends FormSectionRestControllerBase {


    @Override
    public ResponseEntity<FormSectionVO> handleFindById(Long id) {
        Optional<FormSectionVO> data = Optional.of(formSectionService.findById(id));
        ResponseEntity<FormSectionVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSectionVO>> handleGetAll() {
        Optional<Collection<FormSectionVO>> data = Optional.of(formSectionService.getAll());
        ResponseEntity<Collection<FormSectionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSectionVO>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        Optional<Collection<FormSectionVO>> data = Optional.of(formSectionService.getAll(pageNumber, pageSize));
        ResponseEntity<Collection<FormSectionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Boolean> handleRemove(Long id) {
        Optional<Boolean> data = Optional.of(formSectionService.remove(id));
        ResponseEntity<Boolean> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<FormSectionVO> handleSave(FormSectionVO formSection) {
        System.out.println(formSection.toString());
        Optional<FormSectionVO> data = Optional.of(formSectionService.save(formSection));
        ResponseEntity<FormSectionVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSectionVO>> handleSearch(String criteria) {
        Optional<Collection<FormSectionVO>> data = Optional.of(formSectionService.search(criteria));
        ResponseEntity<Collection<FormSectionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }
}