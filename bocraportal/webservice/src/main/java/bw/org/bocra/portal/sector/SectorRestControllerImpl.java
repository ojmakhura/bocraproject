// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.sector;

import bw.org.bocra.portal.licensee.sector.LicenseeSectorVO;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;
import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/sector")
@Tag(name = "Sector", description = "Managing sectors.")
@CrossOrigin()
public class SectorRestControllerImpl extends SectorRestControllerBase {

    public SectorRestControllerImpl(SectorService sectorService) {
        super(sectorService);
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try{
            logger.debug("Search Sector by Id "+id);
            Optional<SectorVO> data = Optional.of(sectorService.findById(id)); // TODO: Add custom code here;
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Sector with id %ld not found.", id));
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Sector with id %d not found.", id));
            } else {
                message = "An unknown error has occured while loading an sector. Please contact the system administrator.";
            }

            logger.error(message);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try{
            logger.debug("Display all Sectors");
             return ResponseEntity.status(HttpStatus.OK).body(sectorService.getAll());
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An error occured when loading all sectors.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try{
            logger.debug("Display all Sectors with specified page number "+pageNumber+" and page size"+pageSize);
    
            return ResponseEntity.status(HttpStatus.OK).body(sectorService.getAll(pageNumber, pageSize));

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            String message = String.format("An error occurred when reading page %d of size %d.", pageNumber, pageSize);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try{
            logger.debug("Deletes sector by ID " + id);
            boolean rm = sectorService.remove(id);
            ResponseEntity<?> response;

            if(rm) {
                response = ResponseEntity.status(HttpStatus.OK).body(rm);
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the sector with id " + id);
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete sector with id " + id);
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Unknown error encountered when deleting sector with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleSave(SectorVO sector) {
        try{
            logger.debug("Saves sector " + sector );
            Optional<?> data = Optional.of(sectorService.save(sector));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not save the access point type.");
            }

            return response;
        } catch (SectorServiceException | IllegalArgumentException e) {

            String message = e.getMessage();
            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {
                if(message.contains("'sector'")) {
                    message = "The sector information is missing.";
                } else if(message.contains("'sector.code'")) {
                    message = "The sector code is missing.";
                } else if(message.contains("'sector.name'")) {
                    message = "The sector name is missing.";
                } else if(message.contains("'sector.themeColour'")) {
                    message = "The sector colour is missing.";
                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }

                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(code)")) {

                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This sector with this code has been already created.");

                    } else if(e.getCause().getMessage().contains("(name)")) {

                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This sector with this name has been already created.");
                    } else {
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This sector is conflicting with an existing one.");
                    }
                }
                
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This sector is conflicting with an existing one.");
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            e.getCause().printStackTrace();
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
               
      }
     
    

    @Override
    public ResponseEntity<?> handleSearch(String criteria) {
        
        try {
            logger.debug("Search Sector by criteria "+criteria);
            Optional<Collection<SectorVO>> data = Optional.of(sectorService.search(criteria)); // TODO: Add custom code here;
            ResponseEntity<Collection<SectorVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }
    
    

    @Override
    public ResponseEntity<?> handleAddLicensee(Long sectorId, Long licenseeId) {
        try{
            logger.debug("Add Licensee with sector Id "+sectorId+" and Licensee Id "+licenseeId );
        LicenseeSectorVO lvo = getSectorService().addLicensee(sectorId, licenseeId);

        if(lvo == null || lvo.getId() == null) {
            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();

        } else {
            return ResponseEntity.ok().body(lvo);
        }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }
}