// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.submission;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.collections4.CollectionUtils;
import org.postgresql.util.PSQLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bw.org.bocra.portal.form.submission.data.DataFieldVO;
import bw.org.bocra.portal.keycloak.KeycloakUserService;
import bw.org.bocra.portal.user.UserVO;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/form/submission")
@Tag(name = "Form Submission", description = "Managing form submission.")
@CrossOrigin()
public class SubmissionRestControllerImpl extends SubmissionRestControllerBase {

    protected static Logger logger = LoggerFactory.getLogger(SubmissionRestControllerImpl.class);
    private final KeycloakUserService keycloakUserService;

    public SubmissionRestControllerImpl(SubmissionService submissionService, KeycloakUserService keycloakUserService) {
        super(submissionService);
        this.keycloakUserService = keycloakUserService;
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try{
            logger.debug("Search Form Submision by "+id);
            Optional<FormSubmissionVO> data = Optional.of(submissionService.findById(id));
            ResponseEntity<FormSubmissionVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            // e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(String.format("Form submission with id %ld not found.", id));
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try{
            logger.debug("Display all Form Submissions");
            return ResponseEntity.status(HttpStatus.OK).body(submissionService.getAll());
            
        } catch (Exception e) {
            // e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the system administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try{
            logger.debug("Display all Form Submissions of the specified "+"Page number "+pageNumber+" and Page size "+pageSize);
            
            return ResponseEntity.status(HttpStatus.OK).body(submissionService.getAll(pageNumber, pageSize));
    
        } catch (Exception e) {
            // e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("An unknown error has occured. Please contact the system administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try{
            logger.debug("Deletes Form Submission by "+id);
            Optional<Boolean> data = Optional.of(submissionService.remove(id));
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the form submission with id " + id);
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage(), e);

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete form submission with id " + id);
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Unknown error encountered when deleting form submission with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleSave(FormSubmissionVO formSubmissionVO) {
        try{
            logger.debug("Save Form Submisson "+formSubmissionVO);
            Optional<FormSubmissionVO> data = Optional.of(submissionService.save(formSubmissionVO));
            ResponseEntity<FormSubmissionVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (IllegalArgumentException | SubmissionServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'formSubmission'")) {

                    message = "The submission information is missing.";

                } else if(message.contains("or its id can not be null")) {
                    if(message.contains("'formSubmission.form' can not be null")) {
                
                        message = "The submission form or its id is missing.";
                    } else if(message.contains("'formSubmission.formActivation' can not be null")) {
                
                        message = "The submission form activation or its id is missing.";
                    } else if(message.contains("'formSubmission.period' can not be null")) {
                
                        message = "The submission period or its id is missing.";
                    } else if(message.contains("'formSubmission.period' can not be null")) {
                
                        message = "The submission period or its id is missing.";
                    }
                
                } else if(message.contains("'formSubmission.submissionStatus'")) {
                
                    message = "The submission status is missing.";
                
                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }

                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(form_submission_unique)")) {

                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An submission for this has been already created.");
                    } 
                    
                } else if (e.getCause().getMessage().contains("null value in column")) {
                    if (e.getCause().getMessage().contains("column \"created_by\"")) {
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The created-by value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"created_date\"")) {
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The created date value is missing.");
                    }
                }
                
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown database error has occured. Please contact the portal administrator.");
            } 

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(FormSubmissionCriteria criteria) {
        try{
            logger.debug("Search Form Submission by " + criteria);

            UserVO user = keycloakUserService.getLoggedInUser();

            if(user.getLicensee() != null && user.getLicensee().getId() != null) {
                criteria.setLicenseeId(user.getLicensee().getId());
            }

            return ResponseEntity.status(HttpStatus.OK).body(submissionService.search(criteria));
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleAddDataField(DataFieldVO dataField) {
        try{
            logger.debug("Adds Data Field " + dataField);
            Optional<DataFieldVO> data = Optional.of(submissionService.addDataField(dataField));
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not add a data field to the submission.");
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleAddDataFields(Set<DataFieldVO> dataFields) {
        try{
            logger.debug("Adds Data Fields "+dataFields);
            Optional<Collection<DataFieldVO>> data = Optional.of(submissionService.addDataFields(dataFields));
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not add data fields to the submission.");
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleDeleteDataField(Long id) {
        try{
            logger.debug("Deletes Data Field by "+id);
            Optional<Boolean> data = Optional.of(submissionService.deleteDataField(id));
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to delete the data field with id " + id);
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage(), e);

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete data field with id " + id);
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetSubmissionSummary(FormSubmissionCriteria criteria) {
        try{
            logger.debug("Display Submission Summary by "+criteria);
            UserVO user = keycloakUserService.getLoggedInUser();

            if(user.getLicensee() != null && user.getLicensee().getId() != null) {
                criteria.setLicenseeId(user.getLicensee().getId());
            }

            SubmissionSummary data = submissionService.getSubmissionSummary(criteria);
            ResponseEntity<SubmissionSummary> response;
    
            response = ResponseEntity.status(HttpStatus.OK).body(data);
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindByIds(Set<Long> ids) {
        try {

            Collection<FormSubmissionVO> submissions = submissionService.findByIds(ids);
            return ResponseEntity.ok(submissions);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
        
    }

    @Override
    public ResponseEntity<?> handleUpdateSubmissionStatus(Long id, FormSubmissionStatus submissionStatus, final LocalDateTime updateTime, final String username) {
        try {

            Boolean updated = submissionService.updateSubmissionStatus(id, submissionStatus, updateTime, username);
            return ResponseEntity.ok(updated);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleLoadDueSubmissions() {
        try {

            Collection<FormSubmissionVO> dueSubmissions = submissionService.loadDueSubmissions();
            return ResponseEntity.ok(dueSubmissions);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleCheckOverdueSubmissions() {
        
        try {

            Integer overdue = submissionService.checkOverdueSubmissions();
            return ResponseEntity.ok(overdue);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleCreateNewSubmissions(Set<Long> licenseeIds, Long activationId) {

        if(activationId == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Form activation should not be null.");
        }

        if(CollectionUtils.isEmpty(licenseeIds)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Licensee IDs should not be empty.");
        }

        try {

            return ResponseEntity.ok(submissionService.createNewSubmissions(licenseeIds, activationId));

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }
}