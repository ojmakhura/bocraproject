// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.submission;

import java.util.Collection;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("form/submission")
@CrossOrigin()
public class SubmissionRestControllerImpl extends SubmissionRestControllerBase {

    protected static Logger logger = LoggerFactory.getLogger(SubmissionRestControllerImpl.class);

    @Override
    public ResponseEntity<FormSubmissionVO> handleFindById(Long id) {
        Optional<FormSubmissionVO> data = Optional.of(submissionService.findById(id));
        ResponseEntity<FormSubmissionVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSubmissionVO>> handleGetAll() {
        Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.getAll());
        ResponseEntity<Collection<FormSubmissionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSubmissionVO>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.getAll(pageNumber, pageSize));
        ResponseEntity<Collection<FormSubmissionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Boolean> handleRemove(Long id) {
        Optional<Boolean> data = Optional.of(submissionService.remove(id));
        ResponseEntity<Boolean> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<FormSubmissionVO> handleSave(FormSubmissionVO formSubmissionVO) {
        Optional<FormSubmissionVO> data = Optional.of(submissionService.save(formSubmissionVO));
        ResponseEntity<FormSubmissionVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<FormSubmissionVO>> handleSearch(FormSubmissionCriteria criteria) {
        Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.search(criteria));
        ResponseEntity<Collection<FormSubmissionVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }
}