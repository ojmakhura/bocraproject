// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.submission;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Optional;
import java.util.Set;

import org.hibernate.exception.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bw.org.bocra.portal.form.submission.data.DataFieldVO;
import bw.org.bocra.portal.keycloak.KeycloakUserService;
import bw.org.bocra.portal.user.UserVO;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/form/submission")
@Tag(name = "Form Submission", description = "Managing form submission.")
@CrossOrigin()
public class SubmissionRestControllerImpl extends SubmissionRestControllerBase {

    protected static Logger logger = LoggerFactory.getLogger(SubmissionRestControllerImpl.class);
    private final KeycloakUserService keycloakUserService;

    public SubmissionRestControllerImpl(SubmissionService submissionService, KeycloakUserService keycloakUserService) {
        super(submissionService);
        this.keycloakUserService = keycloakUserService;
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try{
            logger.debug("Search Form Submision by "+id);
            Optional<FormSubmissionVO> data = Optional.of(submissionService.findById(id));
            ResponseEntity<FormSubmissionVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try{
            logger.debug("Display all Form Submissions");
            Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.getAll());
            ResponseEntity<Collection<FormSubmissionVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try{
            logger.debug("Display all Form Submissions of the specified "+"Page number "+pageNumber+" and Page size "+pageSize);
            Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.getAll(pageNumber, pageSize));
            ResponseEntity<Collection<FormSubmissionVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try{
            logger.debug("Deletes Form Submission by "+id);
            Optional<Boolean> data = Optional.of(submissionService.remove(id));
            ResponseEntity<Boolean> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSave(FormSubmissionVO formSubmissionVO) {
        try{
            logger.debug("Save Form Submisson "+formSubmissionVO);
            Optional<FormSubmissionVO> data = Optional.of(submissionService.save(formSubmissionVO));
            ResponseEntity<FormSubmissionVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            if(e instanceof ConstraintViolationException) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This form submission has been already done.");
            }
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(FormSubmissionCriteria criteria) {
        try{
            logger.debug("Search Form Submission by "+criteria);

            UserVO user = keycloakUserService.getLoggedInUser();

            if(user.getLicensee() != null && user.getLicensee().getId() != null) {
                criteria.setLicenseeId(user.getLicensee().getId());
            }

            Optional<Collection<FormSubmissionVO>> data = Optional.of(submissionService.search(criteria));
            ResponseEntity<Collection<FormSubmissionVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleAddDataField(DataFieldVO dataField) {
        try{
            logger.debug("Adds Data Field "+dataField);
            Optional<DataFieldVO> data = Optional.of(submissionService.addDataField(dataField));
            ResponseEntity<DataFieldVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleAddDataFields(Set<DataFieldVO> dataFields) {
        try{
            logger.debug("Adds Data Fields "+dataFields);
            Optional<Collection<DataFieldVO>> data = Optional.of(submissionService.addDataFields(dataFields));
            ResponseEntity<Collection<DataFieldVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleDeleteDataField(Long id) {
        try{
            logger.debug("Deletes Data Field by "+id);
            Optional<Boolean> data = Optional.of(submissionService.deleteDataField(id));
            ResponseEntity<Boolean> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetSubmissionSummary(FormSubmissionCriteria criteria) {
        try{
            logger.debug("Display Submission Summary by "+criteria);
            UserVO user = keycloakUserService.getLoggedInUser();

            if(user.getLicensee() != null && user.getLicensee().getId() != null) {
                criteria.setLicenseeId(user.getLicensee().getId());
            }

            SubmissionSummary data = submissionService.getSubmissionSummary(criteria);
            ResponseEntity<SubmissionSummary> response;
    
            if(data != null) {
                response = ResponseEntity.status(HttpStatus.OK).body(data);
            } else {
                response = ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleFindByIds(Set<Long> ids) {
        try {

            Collection<FormSubmissionVO> submissions = submissionService.findByIds(ids);
            return ResponseEntity.ok(submissions);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
        
    }

    @Override
    public ResponseEntity<?> handleUpdateSubmissionStatus(Long id, FormSubmissionStatus submissionStatus, final LocalDateTime updateTime, final String username) {
        try {

            Boolean updated = submissionService.updateSubmissionStatus(id, submissionStatus, updateTime, username);
            return ResponseEntity.ok(updated);

        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage());
            throw new SubmissionServiceException("Could not update the form submission.");
            // return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }
}