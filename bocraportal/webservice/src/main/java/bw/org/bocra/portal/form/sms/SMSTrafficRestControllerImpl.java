// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.sms;

import bw.org.bocra.portal.form.FormCriteria;
import bw.org.bocra.portal.form.sim.SimVO;
import java.util.Collection;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("sms")
@CrossOrigin()
public class SMSTrafficRestControllerImpl extends SMSTrafficRestControllerBase {

    protected static Logger log = LoggerFactory.getLogger(SMSTrafficRestControllerImpl.class);


    @Override
    public ResponseEntity<SMSTrafficVO> handleFindById(Long id) {
        Optional<SMSTrafficVO> data = Optional.of(sMSTrafficService.findById(id));
        ResponseEntity<SMSTrafficVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<SMSTrafficVO>> handleGetAll() {
        Optional<Collection<SMSTrafficVO>> data = Optional.of(sMSTrafficService.getAll());
        ResponseEntity<Collection<SMSTrafficVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<SMSTrafficVO>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        Optional<Collection<SMSTrafficVO>> data = Optional.of(sMSTrafficService.getAll(pageNumber, pageSize));
        ResponseEntity<Collection<SMSTrafficVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Boolean> handleRemove(Long id) {
        Optional<Boolean> data = Optional.of(sMSTrafficService.remove(id));
        ResponseEntity<Boolean> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<SMSTrafficVO> handleSave(SMSTrafficVO smsTrafficVO) {
        Optional<SMSTrafficVO> data = Optional.of(sMSTrafficService.save(smsTrafficVO)); // TODO: Add custom code here;
        ResponseEntity<SMSTrafficVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<SMSTrafficVO>> handleSearch(FormCriteria searchCriteria) {
        Optional<Collection<SMSTrafficVO>> data = Optional.of(sMSTrafficService.search(searchCriteria));
        ResponseEntity<Collection<SMSTrafficVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }
}