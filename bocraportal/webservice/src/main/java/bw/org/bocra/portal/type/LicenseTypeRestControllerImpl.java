// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.type;

import java.util.Collection;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("license/type")
@CrossOrigin()
public class LicenseTypeRestControllerImpl extends LicenseTypeRestControllerBase {

    protected static Logger log = LoggerFactory.getLogger(LicenseTypeRestControllerImpl.class);


    @Override
    public ResponseEntity<LicenseTypeVO> handleFindById(Long id) {
        Optional<LicenseTypeVO> data = Optional.of(this.licenseTypeService.findById(id)); // TODO: Add custom code here;
        ResponseEntity<LicenseTypeVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<LicenseTypeVO>> handleGetAll() {
        Optional<Collection<LicenseTypeVO>> data = Optional.of(this.licenseTypeService.getAll()); // TODO: Add custom code here;
        ResponseEntity<Collection<LicenseTypeVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Boolean> handleRemove(Long id) {
        Optional<Boolean> data = Optional.of(this.licenseTypeService.remove(id));
        ResponseEntity<Boolean> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<LicenseTypeVO> handleSave(LicenseTypeVO licenseTypeVO) {
        Optional<LicenseTypeVO> data = Optional.of(this.licenseTypeService.save(licenseTypeVO));
        ResponseEntity<LicenseTypeVO> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }

    @Override
    public ResponseEntity<Collection<LicenseTypeVO>> handleSearch(LicenseTypeCriteria searchCriteria) {
        Optional<Collection<LicenseTypeVO>> data = Optional.of(this.licenseTypeService.search(searchCriteria));
        ResponseEntity<Collection<LicenseTypeVO>> response;

        if(data.isPresent()) {
            response = ResponseEntity.status(HttpStatus.OK).body(data.get());
        } else {
            response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        return response;
    }
}