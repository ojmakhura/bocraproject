// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.sector.form;

import bw.org.bocra.portal.form.FormService;
import bw.org.bocra.portal.sector.SectorService;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.util.NoSuchElementException;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/sector/form")
@Tag(name = "Sector Forms", description = "Managing sector level forms.")
@CrossOrigin()
public class SectorFormRestControllerImpl extends SectorFormRestControllerBase {

    public SectorFormRestControllerImpl(
            SectorFormService sectorFormService, SectorService sectorService, FormService formService) {

        super(sectorFormService, sectorService, formService);
    }

    @Override
    public ResponseEntity<?> handleCreate(Long sectorId, Long formId) {
        try {
            logger.debug("Create Licence Form with Licence Id "+sectorId+" and Form Id "+formId);
            Optional<?> data = Optional.of(sectorFormService.create(sectorId, formId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not create a sector form entry. Please contact administrator.");
            }

            return response;
        } catch (IllegalArgumentException | SectorFormServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'sectorForm'")) {

                    message = "The sector form information is missing.";

                } else if(message.contains("or its id can not be null")) {
                    if(message.contains("'sectorForm.form'")) {
                
                        message = "The form type or its id is missing.";

                    } else if(message.contains("'sectorForm.sector'")) {
                
                        message = "The sector or its id is missing.";
                    }
                
                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }

                return ResponseEntity.badRequest().body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(sector_form_unique)")) {

                        return ResponseEntity.badRequest().body("An sector form has been already created.");
                    } 
                    
                } else if (e.getCause().getMessage().contains("null value in column")) {
                    if (e.getCause().getMessage().contains("column \"form_fk\"")) {
                        return ResponseEntity.badRequest().body("The form value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"sector_fk\"")) {
                        return ResponseEntity.badRequest().body("The sector value is missing.");
                    }
                }
                
                return ResponseEntity.badRequest().body("An unknown database error has occured. Please contact the portal administrator.");
            } 

            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindByForm(Long formId) {
        try {
            logger.debug("Search Sector Form by Form Id "+formId);
            Optional<?> data = Optional.ofNullable(sectorFormService.findByForm(formId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not find the sector form with this form id.");
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();

            logger.error(message, e);
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("sector with form id %d not found.", formId));
            } else {
                message = "An unknown error has occured. Please contact the system administrator.";
            }
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try {
            logger.debug("Search sector Form by Id "+id);
            Optional<?> data = Optional.of(sectorFormService.findById(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Sector form with id %d not found.", id));
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Sector form with id %d not found.", id));
            } else {
                message = "An unknown error has occured. Please contact the system administrator.";
            }

            logger.error(message, e);
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleFindBySector(Long sectorId) {
        try {
            logger.debug("Search sector Form by sector Id " + sectorId);
            Optional<?> data = Optional.of(sectorFormService.findBySector(sectorId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not find the sector form with this sector id.");
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();

            logger.error(message, e);
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Sector with sector id %d not found.", sectorId));
            } else {
                message = "An unknown error has occured. Please contact the system administrator.";
            }
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            logger.debug("Display all sector Forms");
            return ResponseEntity.ok().body(sectorFormService.getAll());
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try {
            logger.debug("Deletes sector Form by Id "+id);
            Optional<?> data = Optional.of(sectorFormService.remove(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the sector form with id " + id);
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage(), e);

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete sector form with id " + id);
            }

            return ResponseEntity.badRequest().body("Unknown error encountered when deleting sector form with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleUpdateForm(Long id, Long formId) {
        try {
            logger.debug("Update sector Form by Id "+id+" and Form Id"+formId);
            Optional<?> data = Optional.of(sectorFormService.updateForm(id, formId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to change the form id.");
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage(), e );
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleUpdateSector(Long id, Long sectorId) {
        try {
            logger.debug("Update sector Form by Id " + id + " and sector Id " + sectorId);
            Optional<?> data = Optional.of(sectorFormService.updateSector(id, sectorId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to change the sector id.");
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }
}