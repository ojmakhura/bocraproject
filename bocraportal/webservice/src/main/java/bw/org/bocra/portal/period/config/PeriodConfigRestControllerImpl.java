// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.period.config;

import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.NoSuchElementException;
import java.util.Optional;
import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/period/config")
@Tag(name = "Period Configuration", description = "Managing time period configurations in the system.")
@CrossOrigin()
public class PeriodConfigRestControllerImpl extends PeriodConfigRestControllerBase {

    public PeriodConfigRestControllerImpl(PeriodConfigService periodConfigService) {
        super(periodConfigService);
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try{
            logger.debug("Search Period Config by Id "+id);
            Optional<PeriodConfigVO> data = Optional.of(periodConfigService.findById(id)); 
            ResponseEntity<PeriodConfigVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Period config with id %d not found.", id));
            } else {
                message = "An unknown error has occured while loading an period config. Please contact the system administrator.";
            }

            logger.error(message);
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try{

            logger.debug("Display all Period Config");
            return ResponseEntity.ok().body(periodConfigService.getAll());
    
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("An error occured when loading all period configurations.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try{
            logger.debug("Delete Period Config with id "+id);
            Optional<Boolean> data = Optional.of(periodConfigService.remove(id)); 
            ResponseEntity<?> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the period config with id " + id);
            }
    
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete period config with id " + id);
            }

            return ResponseEntity.badRequest().body("Unknown error encountered when deleting period config with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleSave(PeriodConfigVO periodConfigVO) {
        try{
            logger.debug("Save Period Config "+periodConfigVO);
            Optional<PeriodConfigVO> data = Optional.of(periodConfigService.save(periodConfigVO)); 
            ResponseEntity<PeriodConfigVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;
        } catch (PeriodConfigServiceException | IllegalArgumentException e) {

            String message = e.getMessage();
            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'periodConfig'")) {

                    message = "Period config information is missing.";

                } else if(message.contains("'periodConfig.periodConfigName'")) {

                    message = "Period config name is missing.";

                } else if(message.contains("'periodConfig.repeatPeriod'")) {

                    message = "Repeat period is missing.";

                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }
                
                return ResponseEntity.badRequest().body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(code)")) {

                        return ResponseEntity.badRequest().body("This licence type with this code has been already created.");

                    } else if(e.getCause().getMessage().contains("(name)")) {

                        return ResponseEntity.badRequest().body("This licence type with this name has been already created.");
                    } else {
                        return ResponseEntity.badRequest().body("This licence type is conflicting with an existing one.");
                    }

                }   else if (e.getCause().getMessage().contains("null value in column")) {

                    if (e.getCause().getMessage().contains("column \"created_by\"")) {

                        return ResponseEntity.badRequest().body("The created-by value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"created_date\"")) {

                        return ResponseEntity.badRequest().body("The created date value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"period_config_name\"")) {

                        return ResponseEntity.badRequest().body("Period config name is missing.");
                    } else if (e.getCause().getMessage().contains("column \"repeat_period\"")) {

                        return ResponseEntity.badRequest().body("Repeat value is missing.");
                    }
                }
                
            }

            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            // e.printStackTrace();
            e.getCause().printStackTrace();
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(PeriodConfigCriteria criteria) {
        try{
            logger.debug("Search Period Config by criteria "+criteria);
            return ResponseEntity.ok().body(periodConfigService.search(criteria));
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try{
            logger.debug("Display all Period Configs with specified page number "+pageNumber+" and "+pageSize);
                return ResponseEntity.ok().body(periodConfigService.getAll(pageNumber, pageSize));
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("An unknown error has occurred. Please contact the site administrator.");
        }
    }
}