// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.licensee;

import java.util.Collection;
import java.util.Optional;

import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bw.org.bocra.portal.document.DocumentVO;
import bw.org.bocra.portal.form.FormVO;
import bw.org.bocra.portal.form.submission.FormSubmissionVO;
import bw.org.bocra.portal.licence.LicenceVO;
import bw.org.bocra.portal.licensee.sector.LicenseeSectorVO;
import bw.org.bocra.portal.licensee.shares.ShareholderVO;
import bw.org.bocra.portal.report.ReportVO;
import bw.org.bocra.portal.report.config.ReportConfigVO;
import bw.org.bocra.portal.sector.SectorVO;
import bw.org.bocra.portal.user.LicenseeUserService;

@RestController
@RequestMapping("/licensee")
public class LicenseeRestControllerImpl extends LicenseeRestControllerBase {

    public LicenseeRestControllerImpl(LicenseeService licenseeService, LicenseeUserService licenseeUserService) {
        super(licenseeService, licenseeUserService);
        //TODO Auto-generated constructor stub
    }

    protected static Logger log = LoggerFactory.getLogger(LicenseeRestControllerImpl.class);

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try{
            Optional<LicenseeVO> data = Optional.of(this.licenseeService.findById(id)); // TODO: Add custom code here;
            ResponseEntity<LicenseeVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try{
            Optional<Collection<LicenseeVO>> data = Optional.of(this.licenseeService.getAll()); // TODO: Add custom code here;
            ResponseEntity<Collection<LicenseeVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try{
            Optional<Boolean> data = Optional.of(this.licenseeService.remove(id)); // TODO: Add custom code here;
            ResponseEntity<Boolean> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSave(LicenseeVO licenseeVO) {
        try{
            Optional<LicenseeVO> data = Optional.of(this.licenseeService.save(licenseeVO)); // TODO: Add custom code here;
            ResponseEntity<LicenseeVO> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(LicenseeCriteria criteria) {
        try{
            Optional<Collection<LicenseeVO>> data = Optional.of(this.licenseeService.search(criteria)); // TODO: Add custom code here;
            ResponseEntity<Collection<LicenseeVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try{
            Optional<Collection<LicenseeVO>> data = Optional.of(this.licenseeService.getAll(pageNumber, pageSize)); // TODO: Add custom code here;
            ResponseEntity<Collection<LicenseeVO>> response;
    
            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
    
            return response;            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetDocuments(Long id) {
        try{
            Collection<DocumentVO> docs = licenseeService.getDocuments(id);

            if(CollectionUtils.isEmpty(docs)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(docs);
            }            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }

    }

    @Override
    public ResponseEntity<?> handleGetForms(Long id) {
        try{
            Collection<FormVO> vos = licenseeService.getForms(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetFormSubmissions(Long id) {
        try{
            Collection<FormSubmissionVO> vos = licenseeService.getFormSubmissions(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetLicences(Long id) {
        try{
            Collection<LicenceVO> vos = licenseeService.getLicences(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }            
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetReportConfigurations(Long id) {
        try{
            Collection<ReportConfigVO> vos = licenseeService.getReportConfigurations(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetReports(Long id) {
        try{
            Collection<ReportVO> vos = licenseeService.getReports(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetSectors(Long id) {
        try{
            Collection<SectorVO> vos = licenseeService.getSectors(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleGetShareholders(Long id) {
        try{
            Collection<ShareholderVO> vos = licenseeService.getShareholders(id);

            if(CollectionUtils.isEmpty(vos)) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            } else {
                return ResponseEntity.ok().body(vos);
            }
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> handleAddSector(Long licenseeId, Long sectorId) {
        try{
            LicenseeSectorVO lvo = getLicenseeService().addSector(licenseeId, sectorId);

            if(lvo == null || lvo.getId() == null) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    
            } else {
                return ResponseEntity.ok().body(lvo);
            }
        } catch(Exception e){
            log.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.NO_CONTENT).body(e.getMessage());
        }

    }

    @Override
    public ResponseEntity<?> handleRemoveSector(Long licenseeSectorId) {
        // TODO Auto-generated method stub
        return null;
    }
}