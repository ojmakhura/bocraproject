// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.licensee;

import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bw.org.bocra.portal.document.DocumentService;
import bw.org.bocra.portal.keycloak.KeycloakService;
import bw.org.bocra.portal.keycloak.KeycloakUserService;
import bw.org.bocra.portal.user.UserVO;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/licensee")
@CrossOrigin()
// @PreAuthorize("@securityCheck.isAuthorised('/licensee')")
@Tag(name = "Licensee", description = "Managing licensees.")
public class LicenseeRestControllerImpl extends LicenseeRestControllerBase {
    
    private final KeycloakUserService keycloakUserService;
    private final KeycloakService keycloakService;
    
    public LicenseeRestControllerImpl(LicenseeService licenseeService, DocumentService documentService, KeycloakUserService keycloakUserService, KeycloakService keycloakService) {
        
        super(licenseeService, documentService);
        this.keycloakUserService = keycloakUserService;
        this.keycloakService = keycloakService;
    }

    @Override
    public ResponseEntity<?> handleAddSector(Long licenseeId, Long sectorId) {
        try {
            logger.debug("Add sector to Licensee with Id "+licenseeId+" and sector Id "+sectorId);
            Optional<?> data = Optional.of(getLicenseeService().addSector(licenseeId, sectorId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.badRequest().body("Could not add sector to licensee.");
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try {
            logger.debug("Search Licensee by "+id);
            LicenseeVO licensee = licenseeService.findById(id);
            ResponseEntity<?> response;

            if(licensee != null && licensee.getId() != null) {
                Collection<UserVO> users = this.keycloakUserService.getLicenseeUsers(licensee.getId());
                licensee.setUsers(users);
                response = ResponseEntity.ok().body(licensee);
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Licensee with id %ld not found.", id));
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Licensee with id %d not found.", id));
            } else {
                message = "An unknown error has occured. Please contact the system administrator.";
            }

            logger.error(message, e);
            return ResponseEntity.badRequest().body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            logger.debug("Display all Licensees ");
            return ResponseEntity.ok().body(licenseeService.getAll());
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try {
            logger.debug("Display all Licensees with specified page number " + pageNumber + " and page size " + pageSize);
            return ResponseEntity.ok().body(licenseeService.getAll(pageNumber, pageSize));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetDocuments(Long id) {
        try {
            logger.debug("Display Licensee Document with "+id);
            return ResponseEntity.ok().body(this.licenseeService.getDocuments(id));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetForms(Long id) {
        try {
            logger.debug("Display Licensee Forms with "+id);
            return ResponseEntity.ok().body(this.licenseeService.getForms(id));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetFormSubmissions(Long id) {
        try {
            logger.debug("Display Licensee Form Submissions with  "+id);
            Optional<?> data = Optional.of(this.licenseeService.getFormSubmissions(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetLicences(Long id) {
        try {
            logger.debug("Display Licensees with Id "+id);
            return ResponseEntity.ok().body(this.licenseeService.getLicences(id));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetReportConfigurations(Long id) {
        try {
            logger.debug("Display Licensee Report Configurations with Id " + id);
            Optional<?> data = Optional.of(this.licenseeService.getReportConfigurations(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetReports(Long id) {
        try {
            logger.debug("Display Licensee Reports "+id);
            return ResponseEntity.ok().body(this.licenseeService.getReports(id));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetSectors(Long id) {
        try {
            logger.debug("Display Licensee Sectors with Id "+id);
            return ResponseEntity.ok().body(this.licenseeService.getSectors(id));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetShareholders(Long id) {
        try {
            logger.debug("Display Licensee Shareholders with Id "+id);
            return ResponseEntity.ok().body(this.licenseeService.getShareholders(id));
           
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try {
            logger.debug("Error detected at Licensee Service handleRemove "+id);
            Optional<?> data = Optional.of(this.licenseeService.remove(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the licensee with id " + id);
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage(), e);

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete licensee with id " + id);
            }

            return ResponseEntity.badRequest().body("Unknown error encountered when deleting licensee with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleRemoveSector(Long licenseeSectorId) {
        try {
            logger.debug("Delete Licensee Sector with Licensee Sector Id "+licenseeSectorId);
            Optional<?> data = Optional.of(this.licenseeService.removeSector(licenseeSectorId));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.ok().body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not remove sector from licensee.");
            }

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSave(LicenseeVO licensee) {
        try {
            logger.debug("Save Licensee "+licensee);
            return ResponseEntity.ok().body(this.licenseeService.save(licensee));
            
        } catch (IllegalArgumentException | LicenseeServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'licensee'")) {

                    message = "The licensee information is missing.";

                } else if(message.contains("'licensee.licenseeName'")) {
                
                    message = "The licensee name is missing.";
                
                } else if(message.contains("'licensee.status'")) {
                  
                    message = "The licensee status is missing.";
                
                }else if(message.contains("'licensee.uin'")) {
                  
                    message = "The licensee uin is missing.";
                
                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }

                return ResponseEntity.badRequest().body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(uin)")) {

                        return ResponseEntity.badRequest().body("An licensee with this uin has been already created.");
                    } else if(e.getCause().getMessage().contains("(licensee_name)")) {

                        return ResponseEntity.badRequest().body("An licensee with this name has been already created.");
                    } 
                    
                } else if (e.getCause().getMessage().contains("null value in column")) {

                    if (e.getCause().getMessage().contains("column \"created_by\"")) {
                        return ResponseEntity.badRequest().body("The created-by value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"created_date\"")) {
                        return ResponseEntity.badRequest().body("The created date value is missing.");
                    }
                }
                
                return ResponseEntity.badRequest().body("An unknown database error has occured. Please contact the portal administrator.");
            } 

            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.badRequest().body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(LicenseeCriteria criteria) {
        try {
            logger.debug("Search Licensee by criteria "+criteria);
            return  ResponseEntity.ok().body(this.licenseeService.search(criteria));
            
        } catch (Exception e) {
            logger.error(e.getMessage());
            return ResponseEntity.badRequest().body("An unknown error has occurred. Please contact the site administrator.");
        }
    }
}