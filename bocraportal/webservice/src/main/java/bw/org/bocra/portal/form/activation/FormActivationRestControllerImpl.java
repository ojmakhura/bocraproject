// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.org.bocra.portal.form.activation;

import java.util.NoSuchElementException;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/form/activation")
@Tag(name = "Form Activation", description = "Managing form activation within specified period.")
@CrossOrigin()
public class FormActivationRestControllerImpl extends FormActivationRestControllerBase {
    
    public FormActivationRestControllerImpl(FormActivationService formActivationService) {
        
        super(formActivationService);
    }

    @Override
    public ResponseEntity<?> handleFindById(Long id) {
        try {
            logger.debug("Searches Form Activation by "+id);
            Optional<?> data = Optional.of(formActivationService.findById(id));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Form activation with id %ld not found.", id));
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();

            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(String.format("Form activation with id %d not found.", id));
            } else {
                message = "An unknown error has occured. Please contact the system administrator.";
            }

            logger.error(message);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);
        }
    }

    @Override
    public ResponseEntity<?> handleGetAll() {
        try {
            logger.debug("Displays all Form Activations");
            return ResponseEntity.status(HttpStatus.OK).body(formActivationService.getAll());
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the system administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        try {
            logger.debug("Displays all Form Activations of the specified "+"Page Number:"+pageNumber+"and Page Size:"+pageSize);
            return ResponseEntity.status(HttpStatus.OK).body(formActivationService.getAll(pageNumber, pageSize));
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the system administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRemove(Long id) {
        try {
            logger.debug("Deletes form activation by ID " + id);
            boolean rm = formActivationService.remove(id);
            ResponseEntity<?> response;

            if(rm) {
                response = ResponseEntity.status(HttpStatus.OK).body(rm);
            } else {
                response = ResponseEntity.status(HttpStatus.NOT_FOUND).body("Failed to delete the form activation with id " + id);
            }

            return response;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());

            if(e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Could not delete form activation with id " + id);
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Unknown error encountered when deleting form activation with id " + id);
        }
    }

    @Override
    public ResponseEntity<?> handleSave(FormActivationVO formActivation) {
        try {
            logger.debug("Saves Form Activation "+formActivation);

            Optional<?> data = Optional.of(formActivationService.save(formActivation));
            ResponseEntity<?> response;

            if(data.isPresent()) {
                response = ResponseEntity.status(HttpStatus.OK).body(data.get());
            } else {
                response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Could not save the form activation");
            }

            return response;
        } catch (IllegalArgumentException | FormActivationServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'formActivation'")) {

                    message = "The form activation information is missing.";

                } else if(message.contains("or its id can not be null")) {

                    if(message.contains("'formActivation.form'")) {

                        message = "The form activation type or its id is missing.";

                    } else if(message.contains("'formActivation.period'")) {

                        message = "The form activation type or its id is missing.";
                    }                
                
                } else if(message.contains("'formActivation.activationName'")) {
                
                    message = "The form activation name is missing.";
                
                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }

                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(message);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(form_period_unique)")) {

                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An form activation with this form and period has been already created.");
                    } else if(e.getCause().getMessage().contains("(activation_name)")) {

                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An form activation with this name and period has been already created.");
                    } 
                    
                } else if (e.getCause().getMessage().contains("null value in column")) {
                    if (e.getCause().getMessage().contains("column \"created_by\"")) {
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The created-by value is missing.");
                    } else if (e.getCause().getMessage().contains("column \"created_date\"")) {
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The created date value is missing.");
                    }
                }
                
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("This form activation is conflicting with an existing one.");
            } 

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown database error has occured. Please contact the portal administrator.");
        } catch(Exception e) {

            e.printStackTrace();
            logger.error(e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleSearch(FormActivationCriteria criteria) {
        try {
            logger.debug("Search Form Activation by "+criteria);
            return  ResponseEntity.status(HttpStatus.OK).body(formActivationService.search(criteria));

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleActivateDueForms() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public ResponseEntity<?> handleCreateMissingSubmissions(Long id) {

        if(id == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Form activation should not be null.");
        }
        
        try {
            logger.debug("Creating missing submission for activation " + id);
            return  ResponseEntity.status(HttpStatus.OK).body(formActivationService.createMissingSubmissions(id));

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }

    @Override
    public ResponseEntity<?> handleRecreateActivationSubmission(Long id) {

        if(id == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Form activation should not be null.");
        }
        
        try {
            logger.debug("Recreating submission for activation " + id);
            return  ResponseEntity.status(HttpStatus.OK).body(formActivationService.recreateActivationSubmission(id));

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("An unknown error has occured. Please contact the portal administrator.");
        }
    }
}