version: "3.9"
services:
  ###############################################################################
  # Keycloak authentication server
  ###############################################################################
  keycloak:
    image: ${KEYCLOAK_REGISTRY_IMAGE}
    hostname: keycloak
    restart: unless-stopped
    command:
      - "start"
      - "--optimized"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    environment:  
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB}
      KC_DB_URL_HOST: ${POSTGRES_SERVER}
      KC_HOSTNAME: ${KEYCLOAK_DOMAIN}
      KC_METRICS_ENABLED: true
      KC_PROXY: edge
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      PROXY_ADDRESS_FORWARDING: false
      TZ: Africa/Gaborone
    networks:
      traefik-public:
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
        - "traefik.http.routers.keycloak.entrypoints=${ACTIVE_ROUTER_ENTRY}"
        - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN}`)"
        - "traefik.http.routers.keycloak.tls=${SSL_SECURE}"
        - "traefik.http.routers.keycloak.tls.certresolver=le"

###############################################################################
# Networks
###############################################################################
networks:
  traefik-public:
    external: true